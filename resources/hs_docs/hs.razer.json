{"backlightsBreathing":{"def":"hs.razer:backlightsBreathing([color], [secondaryColor]) -> razerObject, boolean, string | nil","desc":"Changes the keyboard backlights to the breath mode.","doc":"Changes the keyboard backlights to the breath mode.\n\nParameters:\n * [color] - An optional `hs.drawing.color` value\n * [secondaryColor] - An optional secondary `hs.drawing.color`\n\nReturns:\n * The `hs.razer` object.\n * `true` if successful otherwise `false`\n * A plain text error message if not successful.\n\nNotes:\n * If neither `color` nor `secondaryColor` is provided, then random colors will be used.","examples":[],"file":"extensions/razer/librazer.m","lineno":"625","name":"backlightsBreathing","notes":[" * If neither `color` nor `secondaryColor` is provided, then random colors will be used."],"parameters":[" * [color] - An optional `hs.drawing.color` value"," * [secondaryColor] - An optional secondary `hs.drawing.color`"],"returns":[" * The `hs.razer` object."," * `true` if successful otherwise `false`"," * A plain text error message if not successful."],"signature":"hs.razer:backlightsBreathing([color], [secondaryColor]) -> razerObject, boolean, string | nil","stripped_doc":"","type":"Method"},"backlightsCustom":{"def":"hs.razer:backlightsCustom(colors) -> razerObject, boolean, string | nil","desc":"Changes the keyboard backlights to custom colours.","doc":"Changes the keyboard backlights to custom colours.\n\nParameters:\n * colors - A table of `hs.drawing.color` objects for each individual button on your device (i.e. if there's 20 buttons, you should have twenty colors in the table).\n\nReturns:\n * The `hs.razer` object.\n * `true` if successful otherwise `false`\n * A plain text error message if not successful.\n\nNotes:\n * The order is top to bottom, left to right. You can use `nil` for any buttons you don't want to light up.\n * Example usage: ```lua\n  hs.razer.new(0):backlightsCustom({hs.drawing.color.red, nil, hs.drawing.color.green, hs.drawing.color.blue})\n  ```","examples":[],"file":"extensions/razer/librazer.m","lineno":"665","name":"backlightsCustom","notes":[" * The order is top to bottom, left to right. You can use `nil` for any buttons you don't want to light up."," * Example usage: ```lua","  hs.razer.new(0):backlightsCustom({hs.drawing.color.red, nil, hs.drawing.color.green, hs.drawing.color.blue})","  ```"],"parameters":[" * colors - A table of `hs.drawing.color` objects for each individual button on your device (i.e. if there's 20 buttons, you should have twenty colors in the table)."],"returns":[" * The `hs.razer` object."," * `true` if successful otherwise `false`"," * A plain text error message if not successful."],"signature":"hs.razer:backlightsCustom(colors) -> razerObject, boolean, string | nil","stripped_doc":"","type":"Method"},"backlightsOff":{"def":"hs.razer:backlightsOff() -> razerObject, boolean, string | nil","desc":"Turns all the keyboard backlights off.","doc":"Turns all the keyboard backlights off.\n\nParameters:\n * None\n\nReturns:\n * The `hs.razer` object.\n * `true` if successful otherwise `false`.\n * A plain text error message if not successful.","examples":[],"file":"extensions/razer/librazer.m","lineno":"450","name":"backlightsOff","notes":[],"parameters":[" * None"],"returns":[" * The `hs.razer` object."," * `true` if successful otherwise `false`."," * A plain text error message if not successful."],"signature":"hs.razer:backlightsOff() -> razerObject, boolean, string | nil","stripped_doc":"","type":"Method"},"backlightsReactive":{"def":"hs.razer:backlightsReactive(speed, color) -> razerObject, boolean, string | nil","desc":"Changes the keyboard backlights to the reactive mode.","doc":"Changes the keyboard backlights to the reactive mode.\n\nParameters:\n * speed - A number between 1 (fast) and 4 (slow)\n * color - A `hs.drawing.color` object\n\nReturns:\n * The `hs.razer` object.\n * `true` if successful otherwise `false`\n * A plain text error message if not successful.","examples":[],"file":"extensions/razer/librazer.m","lineno":"541","name":"backlightsReactive","notes":[],"parameters":[" * speed - A number between 1 (fast) and 4 (slow)"," * color - A `hs.drawing.color` object"],"returns":[" * The `hs.razer` object."," * `true` if successful otherwise `false`"," * A plain text error message if not successful."],"signature":"hs.razer:backlightsReactive(speed, color) -> razerObject, boolean, string | nil","stripped_doc":"","type":"Method"},"backlightsSpectrum":{"def":"hs.razer:backlightsSpectrum() -> razerObject, boolean, string | nil","desc":"Changes the keyboard backlights to the spectrum mode.","doc":"Changes the keyboard backlights to the spectrum mode.\n\nParameters:\n * None\n\nReturns:\n * The `hs.razer` object.\n * `true` if successful otherwise `false`\n * A plain text error message if not successful.","examples":[],"file":"extensions/razer/librazer.m","lineno":"517","name":"backlightsSpectrum","notes":[],"parameters":[" * None"],"returns":[" * The `hs.razer` object."," * `true` if successful otherwise `false`"," * A plain text error message if not successful."],"signature":"hs.razer:backlightsSpectrum() -> razerObject, boolean, string | nil","stripped_doc":"","type":"Method"},"backlightsStarlight":{"def":"hs.razer:backlightsStarlight(speed, [color], [secondaryColor]) -> razerObject, boolean, string | nil","desc":"Changes the keyboard backlights to the Starlight mode.","doc":"Changes the keyboard backlights to the Starlight mode.\n\nParameters:\n * speed - A number between 1 (fast) and 3 (slow)\n * [color] - An optional `hs.drawing.color` value\n * [secondaryColor] - An optional secondary `hs.drawing.color`\n\nReturns:\n * The `hs.razer` object.\n * `true` if successful otherwise `false`\n * A plain text error message if not successful.\n\nNotes:\n * If neither `color` nor `secondaryColor` is provided, then random colors will be used.","examples":[],"file":"extensions/razer/librazer.m","lineno":"576","name":"backlightsStarlight","notes":[" * If neither `color` nor `secondaryColor` is provided, then random colors will be used."],"parameters":[" * speed - A number between 1 (fast) and 3 (slow)"," * [color] - An optional `hs.drawing.color` value"," * [secondaryColor] - An optional secondary `hs.drawing.color`"],"returns":[" * The `hs.razer` object."," * `true` if successful otherwise `false`"," * A plain text error message if not successful."],"signature":"hs.razer:backlightsStarlight(speed, [color], [secondaryColor]) -> razerObject, boolean, string | nil","stripped_doc":"","type":"Method"},"backlightsStatic":{"def":"hs.razer:backlightsStatic(color) -> razerObject, boolean, string | nil","desc":"Changes the keyboard backlights to a single static color.","doc":"Changes the keyboard backlights to a single static color.\n\nParameters:\n * color - A `hs.drawing.color` object.\n\nReturns:\n * The `hs.razer` object.\n * `true` if successful otherwise `false`.\n * A plain text error message if not successful.","examples":[],"file":"extensions/razer/librazer.m","lineno":"424","name":"backlightsStatic","notes":[],"parameters":[" * color - A `hs.drawing.color` object."],"returns":[" * The `hs.razer` object."," * `true` if successful otherwise `false`."," * A plain text error message if not successful."],"signature":"hs.razer:backlightsStatic(color) -> razerObject, boolean, string | nil","stripped_doc":"","type":"Method"},"backlightsWave":{"def":"hs.razer:backlightsWave(speed, direction) -> razerObject, boolean, string | nil","desc":"Changes the keyboard backlights to the wave mode.","doc":"Changes the keyboard backlights to the wave mode.\n\nParameters:\n * speed - A number between 1 (fast) and 255 (slow)\n * direction - \"left\" or \"right\" as a string\n\nReturns:\n * The `hs.razer` object.\n * `true` if successful otherwise `false`\n * A plain text error message if not successful.","examples":[],"file":"extensions/razer/librazer.m","lineno":"475","name":"backlightsWave","notes":[],"parameters":[" * speed - A number between 1 (fast) and 255 (slow)"," * direction - \"left\" or \"right\" as a string"],"returns":[" * The `hs.razer` object."," * `true` if successful otherwise `false`"," * A plain text error message if not successful."],"signature":"hs.razer:backlightsWave(speed, direction) -> razerObject, boolean, string | nil","stripped_doc":"","type":"Method"},"blueStatusLight":{"def":"hs.razer:blueStatusLight(value) -> razerObject, boolean | nil, string | nil","desc":"Gets or sets the blue status light.","doc":"Gets or sets the blue status light.\n\nParameters:\n * value - `true` for on, `false` for off`\n\nReturns:\n * The `hs.razer` object.\n * `true` for on, `false` for off`, or `nil` if something has gone wrong\n * A plain text error message if not successful.","examples":[],"file":"extensions/razer/librazer.m","lineno":"374","name":"blueStatusLight","notes":[],"parameters":[" * value - `true` for on, `false` for off`"],"returns":[" * The `hs.razer` object."," * `true` for on, `false` for off`, or `nil` if something has gone wrong"," * A plain text error message if not successful."],"signature":"hs.razer:blueStatusLight(value) -> razerObject, boolean | nil, string | nil","stripped_doc":"","type":"Method"},"brightness":{"def":"hs.razer:brightness(value) -> razerObject, number | nil, string | nil","desc":"Gets or sets the brightness of a Razer keyboard.","doc":"Gets or sets the brightness of a Razer keyboard.\n\nParameters:\n * value - The brightness value - a number between 0 (off) and 100 (brightest).\n\nReturns:\n * The `hs.razer` object.\n * The brightness as a number or `nil` if something goes wrong.\n * A plain text error message if not successful.","examples":[],"file":"extensions/razer/librazer.m","lineno":"221","name":"brightness","notes":[],"parameters":[" * value - The brightness value - a number between 0 (off) and 100 (brightest)."],"returns":[" * The `hs.razer` object."," * The brightness as a number or `nil` if something goes wrong."," * A plain text error message if not successful."],"signature":"hs.razer:brightness(value) -> razerObject, number | nil, string | nil","stripped_doc":"","type":"Method"},"callback":{"def":"hs.razer:callback(callbackFn) -> razerObject","desc":"Sets or removes a callback function for the `hs.razer` object.","doc":"Sets or removes a callback function for the `hs.razer` object.\n\nParameters:\n * `callbackFn` - a function to set as the callback for this `hs.razer` object.  If the value provided is `nil`, any currently existing callback function is removed.\n\nReturns:\n * The `hs.razer` object\n\nNotes:\n * The callback function should expect 4 arguments and should not return anything:\n   * `razerObject` - The serial port object that triggered the callback.\n   * `buttonName` - The name of the button as a string.\n   * `buttonAction` - A string containing \"pressed\", \"released\", \"up\" or \"down\".","examples":[],"file":"extensions/razer/librazer.m","lineno":"147","name":"callback","notes":[" * The callback function should expect 4 arguments and should not return anything:","   * `razerObject` - The serial port object that triggered the callback.","   * `buttonName` - The name of the button as a string.","   * `buttonAction` - A string containing \"pressed\", \"released\", \"up\" or \"down\"."],"parameters":[" * `callbackFn` - a function to set as the callback for this `hs.razer` object.  If the value provided is `nil`, any currently existing callback function is removed."],"returns":[" * The `hs.razer` object"],"signature":"hs.razer:callback(callbackFn) -> razerObject","stripped_doc":"","type":"Method"},"defaultKeyboardLayout":{"def":"hs.razer:defaultKeyboardLayout(enabled) -> boolean","desc":"Allows you to remap the default Keyboard Layout on a Razer device so that the buttons no longer trigger their factory default actions, or restore the default keyboard layout.","doc":"Allows you to remap the default Keyboard Layout on a Razer device so that the buttons no longer trigger their factory default actions, or restore the default keyboard layout.\n\nParameters:\n * enabled - If `true` the Razer default will use its default keyboard layout.\n\nReturns:\n * The `hs.razer` object.\n * `true` if successful otherwise `false`\n\nNotes:\n * This feature currently only works on the Razer Tartarus V2.","examples":[],"file":"extensions/razer/razer.lua","lineno":"43","name":"defaultKeyboardLayout","notes":[" * This feature currently only works on the Razer Tartarus V2."],"parameters":[" * enabled - If `true` the Razer default will use its default keyboard layout."],"returns":[" * The `hs.razer` object."," * `true` if successful otherwise `false`"],"signature":"hs.razer:defaultKeyboardLayout(enabled) -> boolean","stripped_doc":"","type":"Method"},"discoveryCallback":{"def":"hs.razer.discoveryCallback(fn) -> none","desc":"Sets/clears a callback for reacting to device discovery events","doc":"Sets/clears a callback for reacting to device discovery events\n\nParameters:\n * fn - A function that will be called when a Razer device is connected or disconnected. It should take the following arguments:\n  * A boolean, true if a device was connected, false if a device was disconnected\n  * An hs.razer object, being the device that was connected/disconnected\n\nReturns:\n * None","examples":[],"file":"extensions/razer/librazer.m","lineno":"48","name":"discoveryCallback","notes":[],"parameters":[" * fn - A function that will be called when a Razer device is connected or disconnected. It should take the following arguments:\n   * A boolean, true if a device was connected, false if a device was disconnected\n   * An hs.razer object, being the device that was connected/disconnected"],"returns":[" * None"],"signature":"hs.razer.discoveryCallback(fn) -> none","stripped_doc":"","type":"Function"},"getDevice":{"def":"hs.razer.getDevice(num) -> razerObject | nil","desc":"Gets an hs.razer object for the specified device","doc":"Gets an hs.razer object for the specified device\n\nParameters:\n * num - A number that should be within the bounds of the number of connected devices\n\nReturns:\n * An hs.razer object or `nil` if something goes wrong","examples":[],"file":"extensions/razer/librazer.m","lineno":"92","name":"getDevice","notes":[],"parameters":[" * num - A number that should be within the bounds of the number of connected devices"],"returns":[" * An hs.razer object or `nil` if something goes wrong"],"signature":"hs.razer.getDevice(num) -> razerObject | nil","stripped_doc":"","type":"Function"},"greenStatusLight":{"def":"hs.razer:greenStatusLight(value) -> razerObject, boolean | nil, string | nil","desc":"Gets or sets the green status light.","doc":"Gets or sets the green status light.\n\nParameters:\n * value - `true` for on, `false` for off`\n\nReturns:\n * The `hs.razer` object.\n * `true` for on, `false` for off`, or `nil` if something has gone wrong\n * A plain text error message if not successful.","examples":[],"file":"extensions/razer/librazer.m","lineno":"326","name":"greenStatusLight","notes":[],"parameters":[" * value - `true` for on, `false` for off`"],"returns":[" * The `hs.razer` object."," * `true` for on, `false` for off`, or `nil` if something has gone wrong"," * A plain text error message if not successful."],"signature":"hs.razer:greenStatusLight(value) -> razerObject, boolean | nil, string | nil","stripped_doc":"","type":"Method"},"init":{"def":"hs.razer.init(fn)","desc":"Initialises the Razer driver and sets a discovery callback.","doc":"Initialises the Razer driver and sets a discovery callback.\n\nParameters:\n * fn - A function that will be called when a Razer device is connected or disconnected. It should take the following arguments:\n  * A boolean, true if a device was connected, false if a device was disconnected\n  * An hs.razer object, being the device that was connected/disconnected\n\nReturns:\n * None\n\nNotes:\n * This function must be called before any other parts of this module are used","examples":[],"file":"extensions/razer/librazer.m","lineno":"23","name":"init","notes":[" * This function must be called before any other parts of this module are used"],"parameters":[" * fn - A function that will be called when a Razer device is connected or disconnected. It should take the following arguments:\n   * A boolean, true if a device was connected, false if a device was disconnected\n   * An hs.razer object, being the device that was connected/disconnected"],"returns":[" * None"],"signature":"hs.razer.init(fn)","stripped_doc":"","type":"Function"},"name":{"def":"hs.razer:name() -> string","desc":"Returns the human readible device name of the Razer device.","doc":"Returns the human readible device name of the Razer device.\n\nParameters:\n * None\n\nReturns:\n * The device name as a string.","examples":[],"file":"extensions/razer/librazer.m","lineno":"125","name":"name","notes":[],"parameters":[" * None"],"returns":[" * The device name as a string."],"signature":"hs.razer:name() -> string","stripped_doc":"","type":"Method"},"numDevices":{"def":"hs.razer.numDevices() -> number","desc":"Gets the number of Razer devices connected","doc":"Gets the number of Razer devices connected\n\nParameters:\n * None\n\nReturns:\n * A number containing the number of Razer devices attached to the system","examples":[],"file":"extensions/razer/librazer.m","lineno":"75","name":"numDevices","notes":[],"parameters":[" * None"],"returns":[" * A number containing the number of Razer devices attached to the system"],"signature":"hs.razer.numDevices() -> number","stripped_doc":"","type":"Function"},"orangeStatusLight":{"def":"hs.razer:orangeStatusLight(value) -> razerObject, boolean | nil, string | nil","desc":"Gets or sets the orange status light.","doc":"Gets or sets the orange status light.\n\nParameters:\n * value - `true` for on, `false` for off`\n\nReturns:\n * The `hs.razer` object.\n * `true` for on, `false` for off`, or `nil` if something has gone wrong\n * A plain text error message if not successful.","examples":[],"file":"extensions/razer/librazer.m","lineno":"278","name":"orangeStatusLight","notes":[],"parameters":[" * value - `true` for on, `false` for off`"],"returns":[" * The `hs.razer` object."," * `true` for on, `false` for off`, or `nil` if something has gone wrong"," * A plain text error message if not successful."],"signature":"hs.razer:orangeStatusLight(value) -> razerObject, boolean | nil, string | nil","stripped_doc":"","type":"Method"},"unitTests":{"def":"hs.razer.unitTests() -> none","desc":"Runs some basic unit tests when a Razer Tartarus V2 is connected.","doc":"Runs some basic unit tests when a Razer Tartarus V2 is connected.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Because `hs.razer` relies on a physical device to\n   be connected for testing, this method exists so that\n   Hammerspoon developers can test the extension outside\n   of the usual GitHub tests. It can also be used for\n   user troubleshooting.","examples":[],"file":"extensions/razer/razer.lua","lineno":"81","name":"unitTests","notes":[" * Because `hs.razer` relies on a physical device to","   be connected for testing, this method exists so that","   Hammerspoon developers can test the extension outside","   of the usual GitHub tests. It can also be used for","   user troubleshooting."],"parameters":[" * None"],"returns":[" * None"],"signature":"hs.razer.unitTests() -> none","stripped_doc":"","type":"Function"}}