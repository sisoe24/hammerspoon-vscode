{"get":{"def":"hs.fs.xattr.get(path, attribute, [options], [position]) -> string | true | nil","desc":"Set the extended attribute to the value provided for the path specified.","doc":"Set the extended attribute to the value provided for the path specified.\n\nParameters:\n * `path`      - A string specifying the path to the file or directory to get the extended attribute from\n * `attribute` - A string specifying the name of the extended attribute to get the value of\n * `options`   - An optional table containing options as described in this module's documentation header. Defaults to {} (an empty array).\n * `position`  - An optional integer specifying the offset within the extended attribute. Defaults to 0. Setting this argument to a value other than 0 is only valid when `attribute` is \"com.apple.ResourceFork\".\n\nReturns:\n * If the attribute exists for the file or directory and contains data, returns the value of the attribute as a string of raw bytes which are not guaranteed to conform to proper UTF-8 byte sequences. If the attribute exist but does not have a value, returns the Lua boolean `true`.  If the attribute does not exist, returns nil. Throws a Lua error on failure with a description of the reason for the failure.\n\nNotes:\n * See also [hs.fs.xattr.getHumanReadable](#getHumanReadable).","examples":[],"file":"extensions/fs/libfs_xattr.m","lineno":"156","name":"get","notes":[" * See also [hs.fs.xattr.getHumanReadable](#getHumanReadable)."],"parameters":[" * `path`      - A string specifying the path to the file or directory to get the extended attribute from"," * `attribute` - A string specifying the name of the extended attribute to get the value of"," * `options`   - An optional table containing options as described in this module's documentation header. Defaults to {} (an empty array)."," * `position`  - An optional integer specifying the offset within the extended attribute. Defaults to 0. Setting this argument to a value other than 0 is only valid when `attribute` is \"com.apple.ResourceFork\"."],"returns":[" * If the attribute exists for the file or directory and contains data, returns the value of the attribute as a string of raw bytes which are not guaranteed to conform to proper UTF-8 byte sequences. If the attribute exist but does not have a value, returns the Lua boolean `true`.  If the attribute does not exist, returns nil. Throws a Lua error on failure with a description of the reason for the failure."],"signature":"hs.fs.xattr.get(path, attribute, [options], [position]) -> string | true | nil","stripped_doc":"","type":"Function"},"getHumanReadable":{"def":"hs.fs.xattr.getHumanReadable(path, attribute, [options], [position]) -> string | true | nil","desc":"A wrapper to [hs.fs.xattr.get](#get) which returns non UTF-8 data as a hexadecimal dump provided by `hs.utf8.hexDump`.","doc":"A wrapper to [hs.fs.xattr.get](#get) which returns non UTF-8 data as a hexadecimal dump provided by `hs.utf8.hexDump`.\n\nParameters:\n * `path`      - A string specifying the path to the file or directory to get the extended attribute from\n * `attribute` - A string specifying the name of the extended attribute to get the value of\n * `options`   - An optional table containing options as described in this module's documentation header. Defaults to {} (an empty array).\n * `position`  - An optional integer specifying the offset within the extended attribute. Defaults to 0. Setting this argument to a value other than 0 is only valid when `attribute` is \"com.apple.ResourceFork\".\n\nReturns:\n * if the returned data does not conform to proper UTF-8 byte sequences, passes the string through `hs.utf8.hexDump` first.  Otherwise the return values follow the description for [hs.fs.xattr.get](#get) .\n\nNotes:\n * This is provided for testing and debugging purposes; in general you probably want [hs.fs.xattr.get](#get) once you know how to properly understand the data returned for the attribute.\n * This is similar to the long format option in the command line `xattr` command.","examples":[],"file":"extensions/fs/fs.lua","lineno":"11","name":"getHumanReadable","notes":[" * This is provided for testing and debugging purposes; in general you probably want [hs.fs.xattr.get](#get) once you know how to properly understand the data returned for the attribute."," * This is similar to the long format option in the command line `xattr` command."],"parameters":[" * `path`      - A string specifying the path to the file or directory to get the extended attribute from"," * `attribute` - A string specifying the name of the extended attribute to get the value of"," * `options`   - An optional table containing options as described in this module's documentation header. Defaults to {} (an empty array)."," * `position`  - An optional integer specifying the offset within the extended attribute. Defaults to 0. Setting this argument to a value other than 0 is only valid when `attribute` is \"com.apple.ResourceFork\"."],"returns":[" * if the returned data does not conform to proper UTF-8 byte sequences, passes the string through `hs.utf8.hexDump` first.  Otherwise the return values follow the description for [hs.fs.xattr.get](#get) ."],"signature":"hs.fs.xattr.getHumanReadable(path, attribute, [options], [position]) -> string | true | nil","stripped_doc":"","type":"Function"},"list":{"def":"hs.fs.xattr.list(path, [options]) -> table","desc":"Returns a list of the extended attributes currently defined for the specified file or directory","doc":"Returns a list of the extended attributes currently defined for the specified file or directory\n\nParameters:\n * `path`      - A string specifying the path to the file or directory to get the list of extended attributes for\n * `options`   - An optional table containing options as described in this module's documentation header. Defaults to {} (an empty array).\n\nReturns:\n * a table containing an array of strings identifying the extended attributes currently defined for the file or directory; note that the order of the attributes is nondeterministic and is not guaranteed to be the same for future queries.  Throws a Lua error on failure with a description of the reason for the failure.","examples":[],"file":"extensions/fs/libfs_xattr.m","lineno":"208","name":"list","notes":[],"parameters":[" * `path`      - A string specifying the path to the file or directory to get the list of extended attributes for"," * `options`   - An optional table containing options as described in this module's documentation header. Defaults to {} (an empty array)."],"returns":[" * a table containing an array of strings identifying the extended attributes currently defined for the file or directory; note that the order of the attributes is nondeterministic and is not guaranteed to be the same for future queries.  Throws a Lua error on failure with a description of the reason for the failure."],"signature":"hs.fs.xattr.list(path, [options]) -> table","stripped_doc":"","type":"Function"},"remove":{"def":"hs.fs.xattr.remove(path, attribute, [options]) -> boolean","desc":"Removes the specified extended attribute from the file or directory at the path specified.","doc":"Removes the specified extended attribute from the file or directory at the path specified.\n\nParameters:\n * `path`      - A string specifying the path to the file or directory to remove the extended attribute from\n * `attribute` - A string specifying the name of the extended attribute to remove\n * `options`   - An optional table containing options as described in this module's documentation header. Defaults to {} (an empty array).\n\nReturns:\n * True if the operation succeeds; otherwise throws a Lua error with a description of reason for failure.","examples":[],"file":"extensions/fs/libfs_xattr.m","lineno":"126","name":"remove","notes":[],"parameters":[" * `path`      - A string specifying the path to the file or directory to remove the extended attribute from"," * `attribute` - A string specifying the name of the extended attribute to remove"," * `options`   - An optional table containing options as described in this module's documentation header. Defaults to {} (an empty array)."],"returns":[" * True if the operation succeeds; otherwise throws a Lua error with a description of reason for failure."],"signature":"hs.fs.xattr.remove(path, attribute, [options]) -> boolean","stripped_doc":"","type":"Function"},"set":{"def":"hs.fs.xattr.set(path, attribute, value, [options], [position]) -> boolean","desc":"Set the extended attribute to the value provided for the path specified.","doc":"Set the extended attribute to the value provided for the path specified.\n\nParameters:\n * `path`      - A string specifying the path to the file or directory to set the extended attribute for\n * `attribute` - A string specifying the name of the extended attribute to set\n * `value`     - A string containing the value to set the extended attribute to. This value is treated as a raw sequence of bytes and does not have to conform to property UTF-8 byte sequences.\n * `options`   - An optional table containing options as described in this module's documentation header. Defaults to {} (an empty array).\n * `position`  - An optional integer specifying the offset within the extended attribute. Defaults to 0. Setting this argument to a value other than 0 is only valid when `attribute` is \"com.apple.ResourceFork\".\n\nReturns:\n * True if the operation succeeds; otherwise throws a Lua error with a description of reason for failure.","examples":[],"file":"extensions/fs/libfs_xattr.m","lineno":"87","name":"set","notes":[],"parameters":[" * `path`      - A string specifying the path to the file or directory to set the extended attribute for"," * `attribute` - A string specifying the name of the extended attribute to set"," * `value`     - A string containing the value to set the extended attribute to. This value is treated as a raw sequence of bytes and does not have to conform to property UTF-8 byte sequences."," * `options`   - An optional table containing options as described in this module's documentation header. Defaults to {} (an empty array)."," * `position`  - An optional integer specifying the offset within the extended attribute. Defaults to 0. Setting this argument to a value other than 0 is only valid when `attribute` is \"com.apple.ResourceFork\"."],"returns":[" * True if the operation succeeds; otherwise throws a Lua error with a description of reason for failure."],"signature":"hs.fs.xattr.set(path, attribute, value, [options], [position]) -> boolean","stripped_doc":"","type":"Function"}}
