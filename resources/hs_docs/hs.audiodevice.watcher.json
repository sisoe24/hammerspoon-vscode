{"isRunning":{"def":"hs.audiodevice.watcher.isRunning() -> boolean","desc":"Gets the status of the audio device watcher","doc":"Gets the status of the audio device watcher\n\nParameters:\n * None\n\nReturns:\n * A boolean, true if the watcher is running, false if not","examples":[],"file":"extensions/audiodevice/libaudiodevice_watcher.m","lineno":"198","name":"isRunning","notes":[],"parameters":[" * None"],"returns":[" * A boolean, true if the watcher is running, false if not"],"signature":"hs.audiodevice.watcher.isRunning() -> boolean","stripped_doc":"","type":"Function"},"setCallback":{"def":"hs.audiodevice.watcher.setCallback(fn)","desc":"Sets the callback function for the audio device watcher","doc":"Sets the callback function for the audio device watcher\n\nParameters:\n * fn - A callback function, or nil to remove a previously set callback. The callback function should accept a single argument (see Notes below)\n\nReturns:\n * None\n\nNotes:\n * This watcher will call the callback when various audio device related events occur (e.g. an audio device appears/disappears, a system default audio device setting changes, etc)\n * To watch for changes within an audio device, see `hs.audiodevice:newWatcher()`\n * The callback function argument is a string which may be one of the following strings, but might also be a different string entirely:\n  * dIn  - Default audio input device setting changed (Note that there is a space character after `dIn`, because these values always have to be four characters long)\n  * dOut - Default audio output device setting changed\n  * sOut - Default system audio output setting changed (i.e. the device that system sound effects use. This may also be triggered by dOut, depending on the user's settings)\n  * dev# - An audio device appeared or disappeared\n * The callback will be called for each individual audio device event received from the OS, so you may receive multiple events for a single physical action (e.g. unplugging the default audio device will cause `dOut` and `dev#` events, and possibly `sOut` too)\n * Passing nil will cause the watcher to stop if it is already running","examples":[],"file":"extensions/audiodevice/libaudiodevice_watcher.m","lineno":"77","name":"setCallback","notes":[" * This watcher will call the callback when various audio device related events occur (e.g. an audio device appears/disappears, a system default audio device setting changes, etc)"," * To watch for changes within an audio device, see `hs.audiodevice:newWatcher()`"," * The callback function argument is a string which may be one of the following strings, but might also be a different string entirely:","  * dIn  - Default audio input device setting changed (Note that there is a space character after `dIn`, because these values always have to be four characters long)","  * dOut - Default audio output device setting changed","  * sOut - Default system audio output setting changed (i.e. the device that system sound effects use. This may also be triggered by dOut, depending on the user's settings)","  * dev# - An audio device appeared or disappeared"," * The callback will be called for each individual audio device event received from the OS, so you may receive multiple events for a single physical action (e.g. unplugging the default audio device will cause `dOut` and `dev#` events, and possibly `sOut` too)"," * Passing nil will cause the watcher to stop if it is already running"],"parameters":[" * fn - A callback function, or nil to remove a previously set callback. The callback function should accept a single argument (see Notes below)"],"returns":[" * None"],"signature":"hs.audiodevice.watcher.setCallback(fn)","stripped_doc":"","type":"Function"},"start":{"def":"hs.audiodevice.watcher.start()","desc":"Starts the audio device watcher","doc":"Starts the audio device watcher\n\nParameters:\n * None\n\nReturns:\n * None","examples":[],"file":"extensions/audiodevice/libaudiodevice_watcher.m","lineno":"128","name":"start","notes":[],"parameters":[" * None"],"returns":[" * None"],"signature":"hs.audiodevice.watcher.start()","stripped_doc":"","type":"Function"},"stop":{"def":"hs.audiodevice.watcher.stop() -> hs.audiodevice.watcher","desc":"Stops the audio device watcher","doc":"Stops the audio device watcher\n\nParameters:\n * None\n\nReturns:\n * The `hs.audiodevice.watcher` object","examples":[],"file":"extensions/audiodevice/libaudiodevice_watcher.m","lineno":"166","name":"stop","notes":[],"parameters":[" * None"],"returns":[" * The `hs.audiodevice.watcher` object"],"signature":"hs.audiodevice.watcher.stop() -> hs.audiodevice.watcher","stripped_doc":"","type":"Function"}}