{"addWatcher":{"def":"hs.axuielement.observer:addWatcher(element, notification) -> observerObject","desc":"Registers the specified notification for the specified accesibility element with the observer.","doc":"Registers the specified notification for the specified accesibility element with the observer.\n\nParameters:\n * `element`      - the `hs.axuielement` representing an accessibility element of the application the observer was created for.\n * `notification` - a string specifying the notification.\n\nReturns:\n * the observerObject; generates an error if watcher cannot be registered\n\nNotes:\n * multiple notifications for the same accessibility element can be registered by invoking this method multiple times with the same element but different notification strings.\n * if the specified element and notification string are already registered, this method does nothing.\n * the notification string is application dependent and can be any string that the application developers choose; some common ones are found in `hs.axuielement.observer.notifications`, but the list is not exhaustive nor is an application or element required to provide them.","examples":[],"file":"extensions/axuielement/observer.m","lineno":"263","name":"addWatcher","notes":[" * multiple notifications for the same accessibility element can be registered by invoking this method multiple times with the same element but different notification strings."," * if the specified element and notification string are already registered, this method does nothing."," * the notification string is application dependent and can be any string that the application developers choose; some common ones are found in `hs.axuielement.observer.notifications`, but the list is not exhaustive nor is an application or element required to provide them."],"parameters":[" * `element`      - the `hs.axuielement` representing an accessibility element of the application the observer was created for."," * `notification` - a string specifying the notification."],"returns":[" * the observerObject; generates an error if watcher cannot be registered"],"signature":"hs.axuielement.observer:addWatcher(element, notification) -> observerObject","stripped_doc":"","type":"Method"},"callback":{"def":"hs.axuielement.observer:callback([fn]) -> observerObject | fn | nil","desc":"Get or set the callback for the observer.","doc":"Get or set the callback for the observer.\n\nParameters:\n * `fn` - a function, or an explicit nil to remove, specifying the callback function the observer will invoke when the assigned elements generate notifications.\n\nReturns:\n * If an argument is provided, the observerObject; otherwise the current value.\n\nNotes:\n * the callback should expect 4 arguments and return none. The arguments passed to the callback will be as follows:\n   * the observerObject itself\n   * the `hs.axuielement` object for the accessibility element which generated the notification\n   * a string specifying the specific notification which was received\n   * a table containing key-value pairs with more information about the notification, if the element and notification type provide it. Commonly this will be an empty table indicating that no additional detail was provided.","examples":[],"file":"extensions/axuielement/observer.m","lineno":"221","name":"callback","notes":[" * the callback should expect 4 arguments and return none. The arguments passed to the callback will be as follows:","   * the observerObject itself","   * the `hs.axuielement` object for the accessibility element which generated the notification","   * a string specifying the specific notification which was received","   * a table containing key-value pairs with more information about the notification, if the element and notification type provide it. Commonly this will be an empty table indicating that no additional detail was provided."],"parameters":[" * `fn` - a function, or an explicit nil to remove, specifying the callback function the observer will invoke when the assigned elements generate notifications."],"returns":[" * If an argument is provided, the observerObject; otherwise the current value."],"signature":"hs.axuielement.observer:callback([fn]) -> observerObject | fn | nil","stripped_doc":"","type":"Method"},"isRunning":{"def":"hs.axuielement.observer:isRunning() -> boolean","desc":"Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.","doc":"Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.\n\nParameters:\n * None\n\nReturns:\n * a boolean value indicating whether or not the observer is currently active.","examples":[],"file":"extensions/axuielement/observer.m","lineno":"202","name":"isRunning","notes":[],"parameters":[" * None"],"returns":[" * a boolean value indicating whether or not the observer is currently active."],"signature":"hs.axuielement.observer:isRunning() -> boolean","stripped_doc":"","type":"Method"},"new":{"def":"hs.axuielement.observer.new(pid) -> observerObject","desc":"Creates a new observer object for the application with the specified process ID.","doc":"Creates a new observer object for the application with the specified process ID.\n\nParameters:\n * `pid` - the process ID of the application.\n\nReturns:\n * a new observerObject; generates an error if the pid does not exist or if the object cannot be created.\n\nNotes:\n * If you already have the `hs.application` object for an application, you can get its process ID with `hs.application:pid()`\n * If you already have an `hs.axuielement` from the application you wish to observe (it doesn't have to be the application axuielement object, just one belonging to the application), you can get the process ID with `hs.axuielement:pid()`.","examples":[],"file":"extensions/axuielement/observer.m","lineno":"117","name":"new","notes":[" * If you already have the `hs.application` object for an application, you can get its process ID with `hs.application:pid()`"," * If you already have an `hs.axuielement` from the application you wish to observe (it doesn't have to be the application axuielement object, just one belonging to the application), you can get the process ID with `hs.axuielement:pid()`."],"parameters":[" * `pid` - the process ID of the application."],"returns":[" * a new observerObject; generates an error if the pid does not exist or if the object cannot be created."],"signature":"hs.axuielement.observer.new(pid) -> observerObject","stripped_doc":"","type":"Constructor"},"notifications":{"def":"hs.axuielement.observer.notifications[]","desc":"A table of common accessibility object notification names, provided for reference.","doc":"A table of common accessibility object notification names, provided for reference.\n\nNotes:\n * Notifications are application dependent and can be any string that the application developers choose; this list provides the suggested notification names found within the macOS Framework headers, but the list is not exhaustive nor is an application or element required to provide them.","file":"extensions/axuielement/observer.m","lineno":"402","name":"notifications","notes":[" * Notifications are application dependent and can be any string that the application developers choose; this list provides the suggested notification names found within the macOS Framework headers, but the list is not exhaustive nor is an application or element required to provide them."],"signature":"hs.axuielement.observer.notifications[]","stripped_doc":"","type":"Constant"},"removeWatcher":{"def":"hs.axuielement.observer:removeWatcher(element, notification) -> observerObject","desc":"Unregisters the specified notification for the specified accessibility element from the observer.","doc":"Unregisters the specified notification for the specified accessibility element from the observer.\n\nParameters:\n * `element`      - the `hs.axuielement` representing an accessibility element of the application the observer was created for.\n * `notification` - a string specifying the notification.\n\nReturns:\n * the observerObject; generates an error if watcher cannot be unregistered\n\nNotes:\n * if the specified element and notification string are not currently registered with the observer, this method does nothing.","examples":[],"file":"extensions/axuielement/observer.m","lineno":"308","name":"removeWatcher","notes":[" * if the specified element and notification string are not currently registered with the observer, this method does nothing."],"parameters":[" * `element`      - the `hs.axuielement` representing an accessibility element of the application the observer was created for."," * `notification` - a string specifying the notification."],"returns":[" * the observerObject; generates an error if watcher cannot be unregistered"],"signature":"hs.axuielement.observer:removeWatcher(element, notification) -> observerObject","stripped_doc":"","type":"Method"},"start":{"def":"hs.axuielement.observer:start() -> observerObject","desc":"Start observing the application and trigger callbacks for the elements and notifications assigned.","doc":"Start observing the application and trigger callbacks for the elements and notifications assigned.\n\nParameters:\n * None\n\nReturns:\n * the observerObject\n\nNotes:\n * This method does nothing if the observer is already running","examples":[],"file":"extensions/axuielement/observer.m","lineno":"148","name":"start","notes":[" * This method does nothing if the observer is already running"],"parameters":[" * None"],"returns":[" * the observerObject"],"signature":"hs.axuielement.observer:start() -> observerObject","stripped_doc":"","type":"Method"},"stop":{"def":"hs.axuielement.observer:stop() -> observerObject","desc":"Stop observing the application; no further callbacks will be generated.","doc":"Stop observing the application; no further callbacks will be generated.\n\nParameters:\n * None\n\nReturns:\n * the observerObject\n\nNotes:\n * This method does nothing if the observer is not currently running","examples":[],"file":"extensions/axuielement/observer.m","lineno":"175","name":"stop","notes":[" * This method does nothing if the observer is not currently running"],"parameters":[" * None"],"returns":[" * the observerObject"],"signature":"hs.axuielement.observer:stop() -> observerObject","stripped_doc":"","type":"Method"},"watching":{"def":"hs.axuielement.observer:watching([element]) -> table","desc":"Returns a table of the notifications currently registered with the observer.","doc":"Returns a table of the notifications currently registered with the observer.\n\nParameters:\n * `element` - an optional `hs.axuielement` to return a list of registered notifications for.\n\nReturns:\n * a table containing the currently registered notifications\n\nNotes:\n * If an element is specified, then the table returned will contain a list of strings specifying the specific notifications that the observer is watching that element for.\n * If no argument is specified, then the table will contain key-value pairs in which each key will be an `hs.axuielement` that is being observed and the corresponding value will be a table containing a list of strings specifying the specific notifications that the observer is watching for from from that element.","examples":[],"file":"extensions/axuielement/observer.m","lineno":"348","name":"watching","notes":[" * If an element is specified, then the table returned will contain a list of strings specifying the specific notifications that the observer is watching that element for."," * If no argument is specified, then the table will contain key-value pairs in which each key will be an `hs.axuielement` that is being observed and the corresponding value will be a table containing a list of strings specifying the specific notifications that the observer is watching for from from that element."],"parameters":[" * `element` - an optional `hs.axuielement` to return a list of registered notifications for."],"returns":[" * a table containing the currently registered notifications"],"signature":"hs.axuielement.observer:watching([element]) -> table","stripped_doc":"","type":"Method"}}