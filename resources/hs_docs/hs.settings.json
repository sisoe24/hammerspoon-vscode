{"bundleID":{"def":"hs.settings.bundleID","desc":"A string representing the ID of the bundle Hammerspoon's settings are stored in . You can use this with the command line tool `defaults` or other tools which allow access to the `User Defaults` of applications, to access these outside of Hammerspoon","doc":"A string representing the ID of the bundle Hammerspoon's settings are stored in . You can use this with the command line tool `defaults` or other tools which allow access to the `User Defaults` of applications, to access these outside of Hammerspoon","file":"extensions/settings/libsettings.m","lineno":"326","name":"bundleID","signature":"hs.settings.bundleID","stripped_doc":"","type":"Constant"},"clear":{"def":"hs.settings.clear(key) -> bool","desc":"Deletes a setting","doc":"Deletes a setting\n\nParameters:\n * key - A string containing the name of a setting\n\nReturns:\n * A boolean, true if the setting was deleted, otherwise false","examples":[],"file":"extensions/settings/libsettings.m","lineno":"179","name":"clear","notes":[],"parameters":[" * key - A string containing the name of a setting"],"returns":[" * A boolean, true if the setting was deleted, otherwise false"],"signature":"hs.settings.clear(key) -> bool","stripped_doc":"","type":"Function"},"dateFormat":{"def":"hs.settings.dateFormat","desc":"A string representing the expected format of date and time when presenting the date and time as a string to `hs.setDate()`.  e.g. `os.date(hs.settings.dateFormat)`","doc":"A string representing the expected format of date and time when presenting the date and time as a string to `hs.setDate()`.  e.g. `os.date(hs.settings.dateFormat)`","file":"extensions/settings/libsettings.m","lineno":"320","name":"dateFormat","signature":"hs.settings.dateFormat","stripped_doc":"","type":"Constant"},"get":{"def":"hs.settings.get(key) -> string or boolean or number or nil or table or binary data","desc":"Loads a setting","doc":"Loads a setting\n\nParameters:\n * key - A string containing the name of the setting\n\nReturns:\n * The value of the setting\n\nNotes:\n * This function can load all of the datatypes supported by `hs.settings.set()`, `hs.settings.setData()` and `hs.settings.setDate()`","examples":[],"file":"extensions/settings/libsettings.m","lineno":"157","name":"get","notes":[" * This function can load all of the datatypes supported by `hs.settings.set()`, `hs.settings.setData()` and `hs.settings.setDate()`"],"parameters":[" * key - A string containing the name of the setting"],"returns":[" * The value of the setting"],"signature":"hs.settings.get(key) -> string or boolean or number or nil or table or binary data","stripped_doc":"","type":"Function"},"getKeys":{"def":"hs.settings.getKeys() -> table","desc":"Gets all of the previously stored setting names","doc":"Gets all of the previously stored setting names\n\nParameters:\n * None\n\nReturns:\n * A table containing all of the settings keys in Hammerspoon's settings\n\nNotes:\n * Use `ipairs(hs.settings.getKeys())` to iterate over all available settings\n * Use `hs.settings.getKeys()[\"someKey\"]` to test for the existence of a particular key","examples":[],"file":"extensions/settings/libsettings.m","lineno":"200","name":"getKeys","notes":[" * Use `ipairs(hs.settings.getKeys())` to iterate over all available settings"," * Use `hs.settings.getKeys()[\"someKey\"]` to test for the existence of a particular key"],"parameters":[" * None"],"returns":[" * A table containing all of the settings keys in Hammerspoon's settings"],"signature":"hs.settings.getKeys() -> table","stripped_doc":"","type":"Function"},"set":{"def":"hs.settings.set(key[, val])","desc":"Saves a setting with common datatypes","doc":"Saves a setting with common datatypes\n\nParameters:\n * key - A string containing the name of the setting\n * val - An optional value for the setting. Valid datatypes are:\n   * string\n   * number\n   * boolean\n   * nil\n   * table (which may contain any of the same valid datatypes)\n\nReturns:\n * None\n\nNotes:\n * If no val parameter is provided, it is assumed to be nil\n * This function cannot set dates or raw data types, see `hs.settings.setDate()` and `hs.settings.setData()`\n * Assigning a nil value is equivalent to clearing the value with `hs.settings.clear`","examples":[],"file":"extensions/settings/libsettings.m","lineno":"49","name":"set","notes":[" * If no val parameter is provided, it is assumed to be nil"," * This function cannot set dates or raw data types, see `hs.settings.setDate()` and `hs.settings.setData()`"," * Assigning a nil value is equivalent to clearing the value with `hs.settings.clear`"],"parameters":[" * key - A string containing the name of the setting"," * val - An optional value for the setting. Valid datatypes are:\n   * string\n   * number\n   * boolean\n   * nil\n   * table (which may contain any of the same valid datatypes)"],"returns":[" * None"],"signature":"hs.settings.set(key[, val])","stripped_doc":"","type":"Function"},"setData":{"def":"hs.settings.setData(key, val)","desc":"Saves a setting with raw binary data","doc":"Saves a setting with raw binary data\n\nParameters:\n * key - A string containing the name of the setting\n * val - Some raw binary data\n\nReturns:\n * None","examples":[],"file":"extensions/settings/libsettings.m","lineno":"91","name":"setData","notes":[],"parameters":[" * key - A string containing the name of the setting"," * val - Some raw binary data"],"returns":[" * None"],"signature":"hs.settings.setData(key, val)","stripped_doc":"","type":"Function"},"setDate":{"def":"hs.settings.setDate(key, val)","desc":"Saves a setting with a date","doc":"Saves a setting with a date\n\nParameters:\n * key - A string containing the name of the setting\n * val - A number representing seconds since `1970-01-01 00:00:00 +0000` (e.g. `os.time()`), or a string containing a date in RFC3339 format (`YYYY-MM-DD[T]HH:MM:SS[Z]`)\n\nReturns:\n * None\n\nNotes:\n * See `hs.settings.dateFormat` for a convenient representation of the RFC3339 format, to use with other time/date related functions","examples":[],"file":"extensions/settings/libsettings.m","lineno":"129","name":"setDate","notes":[" * See `hs.settings.dateFormat` for a convenient representation of the RFC3339 format, to use with other time/date related functions"],"parameters":[" * key - A string containing the name of the setting"," * val - A number representing seconds since `1970-01-01 00:00:00 +0000` (e.g. `os.time()`), or a string containing a date in RFC3339 format (`YYYY-MM-DD[T]HH:MM:SS[Z]`)"],"returns":[" * None"],"signature":"hs.settings.setDate(key, val)","stripped_doc":"","type":"Function"},"watchKey":{"def":"hs.settings.watchKey(identifier, key, [fn]) -> identifier | current value","desc":"Get or set a watcher to invoke a callback when the specified settings key changes","doc":"Get or set a watcher to invoke a callback when the specified settings key changes\n\nParameters:\n * identifier - a required string used as an identifier for this callback\n * key        - the settings key to watch for changes to\n * fn         - the callback function to be invoked when the specified key changes.  If this is an explicit nil, removes the existing callback.\n\nReturns:\n * if a callback is set or removed, returns the identifier; otherwise returns the current callback function or nil if no callback function is currently defined.\n\nNotes:\n * the identifier is required so that multiple callbacks for the same key can be registered by separate modules; it's value doesn't affect what is being watched but does need to be unique between multiple watchers of the same key.\n * Does not work with keys that include a period (.) in the key name because KVO uses dot notation to specify a sequence of properties.  If you know of a way to escape periods so that they are watchable as NSUSerDefault key names, please file an issue and share!","examples":[],"file":"extensions/settings/libsettings.m","lineno":"230","name":"watchKey","notes":[" * the identifier is required so that multiple callbacks for the same key can be registered by separate modules; it's value doesn't affect what is being watched but does need to be unique between multiple watchers of the same key."," * Does not work with keys that include a period (.) in the key name because KVO uses dot notation to specify a sequence of properties.  If you know of a way to escape periods so that they are watchable as NSUSerDefault key names, please file an issue and share!"],"parameters":[" * identifier - a required string used as an identifier for this callback"," * key        - the settings key to watch for changes to"," * fn         - the callback function to be invoked when the specified key changes.  If this is an explicit nil, removes the existing callback."],"returns":[" * if a callback is set or removed, returns the identifier; otherwise returns the current callback function or nil if no callback function is currently defined."],"signature":"hs.settings.watchKey(identifier, key, [fn]) -> identifier | current value","stripped_doc":"","type":"Function"}}
