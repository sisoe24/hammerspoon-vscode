{"hide":{"def":"hs.expose:hide()","desc":"Hides the expose, if visible, and exits the modal mode","doc":"Hides the expose, if visible, and exits the modal mode\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Call this function if you need to make sure the modal is exited without waiting for the user to press `esc`","examples":[],"file":"extensions/expose/expose.lua","lineno":"603","name":"hide","notes":[" * Call this function if you need to make sure the modal is exited without waiting for the user to press `esc`"],"parameters":[" * None"],"returns":[" * None"],"signature":"hs.expose:hide()","stripped_doc":"","type":"Method"},"new":{"def":"hs.expose.new([windowfilter[, uiPrefs][, logname, [loglevel]]]) -> hs.expose object","desc":"Creates a new hs.expose instance; it can use a windowfilter to determine which windows to show","doc":"Creates a new hs.expose instance; it can use a windowfilter to determine which windows to show\n\nParameters:\n * windowfilter - (optional) if omitted or nil, use the default windowfilter; otherwise it must be a windowfilter\n   instance or constructor table\n * uiPrefs - (optional) a table to override UI preferences for this instance; its keys and values\n   must follow the conventions described in `hs.expose.ui`; this parameter allows you to have multiple\n   expose instances with different behaviour (for example, with and without thumbnails and/or titles)\n   using different hotkeys\n * logname - (optional) name of the `hs.logger` instance for the new expose; if omitted, the class logger will be used\n * loglevel - (optional) log level for the `hs.logger` instance for the new expose\n\nReturns:\n * the new instance\n\nNotes:\n  * by default expose will show invisible windows and (unlike the OSX expose) windows from other spaces; use\n    `hs.expose.ui` or the `uiPrefs` parameter to change these behaviours.","examples":[],"file":"extensions/expose/expose.lua","lineno":"1020","name":"new","notes":["  * by default expose will show invisible windows and (unlike the OSX expose) windows from other spaces; use","    `hs.expose.ui` or the `uiPrefs` parameter to change these behaviours."],"parameters":[" * windowfilter - (optional) if omitted or nil, use the default windowfilter; otherwise it must be a windowfilter instance or constructor table"," * uiPrefs - (optional) a table to override UI preferences for this instance; its keys and values must follow the conventions described in `hs.expose.ui`; this parameter allows you to have multiple expose instances with different behaviour (for example, with and without thumbnails and/or titles) using different hotkeys"," * logname - (optional) name of the `hs.logger` instance for the new expose; if omitted, the class logger will be used"," * loglevel - (optional) log level for the `hs.logger` instance for the new expose"],"returns":[" * the new instance"],"signature":"hs.expose.new([windowfilter[, uiPrefs][, logname, [loglevel]]]) -> hs.expose object","stripped_doc":"","type":"Constructor"},"show":{"def":"hs.expose:show([activeApplication])","desc":"Shows an expose-like screen with modal keyboard hints for switching to, closing or minimizing/unminimizing windows.","doc":"Shows an expose-like screen with modal keyboard hints for switching to, closing or minimizing/unminimizing windows.\n\nParameters:\n * activeApplication - (optional) if true, only show windows of the active application (within the\n  scope of the instance windowfilter); otherwise show all windows allowed by the instance windowfilter\n\nReturns:\n * None\n\nNotes:\n * passing `true` for `activeApplication` will simply hide hints/thumbnails for applications other\n   than the active one, without recalculating the hints layout; conversely, setting `onlyActiveApplication=true`\n   for an expose instance's `ui` will calculate an optimal layout for the current active application's windows\n * Completing a hint will exit the expose and focus the selected window.\n * Pressing esc will exit the expose and with no action taken.\n * If shift is being held when a hint is completed (the background will be red), the selected\n   window will be closed. If it's the last window of an application, the application will be closed.\n * If alt is being held when a hint is completed (the background will be blue), the selected\n   window will be minimized (if visible) or unminimized/unhidden (if minimized or hidden).","examples":[],"file":"extensions/expose/expose.lua","lineno":"618","name":"show","notes":[" * passing `true` for `activeApplication` will simply hide hints/thumbnails for applications other","   than the active one, without recalculating the hints layout; conversely, setting `onlyActiveApplication=true`","   for an expose instance's `ui` will calculate an optimal layout for the current active application's windows"," * Completing a hint will exit the expose and focus the selected window."," * Pressing esc will exit the expose and with no action taken."," * If shift is being held when a hint is completed (the background will be red), the selected","   window will be closed. If it's the last window of an application, the application will be closed."," * If alt is being held when a hint is completed (the background will be blue), the selected","   window will be minimized (if visible) or unminimized/unhidden (if minimized or hidden)."],"parameters":[" * activeApplication - (optional) if true, only show windows of the active application (within the scope of the instance windowfilter); otherwise show all windows allowed by the instance windowfilter"],"returns":[" * None"],"signature":"hs.expose:show([activeApplication])","stripped_doc":"","type":"Method"},"toggleShow":{"def":"hs.expose:toggleShow([activeApplication])","desc":"Toggles the expose - see `hs.expose:show()` and `hs.expose:hide()`","doc":"Toggles the expose - see `hs.expose:show()` and `hs.expose:hide()`\n\nParameters:\n * activeApplication - (optional) if true, only show windows of the active application (within the scope of the instance windowfilter); otherwise show all windows allowed by the instance windowfilter\n\nReturns:\n * None\n\nNotes:\n * passing `true` for `activeApplication` will simply hide hints/thumbnails for applications other than the active one, without recalculating the hints layout; conversely, setting `onlyActiveApplication=true` for an expose instance's `ui` will calculate an optimal layout for the current active application's windows\n * Completing a hint will exit the expose and focus the selected window.\n * Pressing esc will exit the expose and with no action taken.\n * If shift is being held when a hint is completed (the background will be red), the selected window will be closed. If it's the last window of an application, the application will be closed.\n * If alt is being held when a hint is completed (the background will be blue), the selected  window will be minimized (if visible) or unminimized/unhidden (if minimized or hidden).\n\nReturns:\n * None","examples":[],"file":"extensions/expose/expose.lua","lineno":"581","name":"toggleShow","notes":[" * passing `true` for `activeApplication` will simply hide hints/thumbnails for applications other than the active one, without recalculating the hints layout; conversely, setting `onlyActiveApplication=true` for an expose instance's `ui` will calculate an optimal layout for the current active application's windows"," * Completing a hint will exit the expose and focus the selected window."," * Pressing esc will exit the expose and with no action taken."," * If shift is being held when a hint is completed (the background will be red), the selected window will be closed. If it's the last window of an application, the application will be closed."," * If alt is being held when a hint is completed (the background will be blue), the selected  window will be minimized (if visible) or unminimized/unhidden (if minimized or hidden)."],"parameters":[" * activeApplication - (optional) if true, only show windows of the active application (within the scope of the instance windowfilter); otherwise show all windows allowed by the instance windowfilter"],"returns":[" * None"],"signature":"hs.expose:toggleShow([activeApplication])","stripped_doc":"","type":"Method"},"ui":{"def":"hs.expose.ui","desc":"Allows customization of the expose behaviour and user interface","doc":"Allows customization of the expose behaviour and user interface\n\nThis table contains variables that you can change to customize the behaviour of the expose and the look of the UI.\nTo have multiple expose instances with different behaviour/looks, use the `uiPrefs` parameter for the constructor;\nthe passed keys and values will override those in this table for that particular instance.\n\nThe default values are shown in the right hand side of the assignments below.\n\nTo represent color values, you can use:\n * a table {red=redN, green=greenN, blue=blueN, alpha=alphaN}\n * a table {redN,greenN,blueN[,alphaN]} - if omitted alphaN defaults to 1.0\nwhere redN, greenN etc. are the desired value for the color component between 0.0 and 1.0\n\n * `hs.expose.ui.textColor = {0.9,0.9,0.9}`\n * `hs.expose.ui.fontName = 'Lucida Grande'`\n * `hs.expose.ui.textSize = 40` - in screen points\n * `hs.expose.ui.highlightColor = {0.8,0.5,0,0.1}` - highlight color for candidate windows\n * `hs.expose.ui.backgroundColor = {0.30,0.03,0.03,1}`\n * `hs.expose.ui.closeModeModifier = 'shift'` - \"close mode\" engaged while pressed (or 'cmd','ctrl','alt')\n * `hs.expose.ui.closeModeBackgroundColor = {0.7,0.1,0.1,1}` - background color while \"close mode\" is engaged\n * `hs.expose.ui.minimizeModeModifier = 'alt'` - \"minimize mode\" engaged while pressed\n * `hs.expose.ui.minimizeModeBackgroundColor = {0.1,0.2,0.3,1}` - background color while \"minimize mode\" is engaged\n * `hs.expose.ui.onlyActiveApplication = false` -- only show windows of the active application\n * `hs.expose.ui.includeNonVisible = true` - include minimized and hidden windows\n * `hs.expose.ui.nonVisibleStripBackgroundColor = {0.03,0.1,0.15,1}` - contains hints for non-visible windows\n * `hs.expose.ui.nonVisibleStripPosition = 'bottom'` - set it to your Dock position ('bottom', 'left' or 'right')\n * `hs.expose.ui.nonVisibleStripWidth = 0.1` - 0..0.5, width of the strip relative to the screen\n * `hs.expose.ui.includeOtherSpaces = true` - include windows in other Mission Control Spaces\n * `hs.expose.ui.otherSpacesStripBackgroundColor = {0.1,0.1,0.1,1}`\n * `hs.expose.ui.otherSpacesStripPosition = 'top'`\n * `hs.expose.ui.otherSpacesStripWidth = 0.2`\n * `hs.expose.ui.showTitles = true` - show window titles\n * `hs.expose.ui.showThumbnails = true` - show window thumbnails\n * `hs.expose.ui.thumbnailAlpha = 0` - 0..1, opacity for thumbnails\n * `hs.expose.ui.highlightThumbnailAlpha = 1` - 0..1, opacity for thumbnails of candidate windows\n * `hs.expose.ui.highlightThumbnailStrokeWidth = 8` - thumbnail frame thickness for candidate windows\n * `hs.expose.ui.maxHintLetters = 2` - if necessary, hints longer than this will be disambiguated with digits\n * `hs.expose.ui.fitWindowsMaxIterations = 30` -- lower is faster, but higher chance of overlapping thumbnails\n * `hs.expose.ui.fitWindowsInBackground = false` -- improves responsiveness, but can affect the rest of the config","file":"extensions/expose/expose.lua","lineno":"248","name":"ui","signature":"hs.expose.ui","stripped_doc":"This table contains variables that you can change to customize the behaviour of the expose and the look of the UI.\nTo have multiple expose instances with different behaviour/looks, use the `uiPrefs` parameter for the constructor;\nthe passed keys and values will override those in this table for that particular instance.\nThe default values are shown in the right hand side of the assignments below.\nTo represent color values, you can use:\n * a table {red=redN, green=greenN, blue=blueN, alpha=alphaN}\n * a table {redN,greenN,blueN[,alphaN]} - if omitted alphaN defaults to 1.0\nwhere redN, greenN etc. are the desired value for the color component between 0.0 and 1.0\n * `hs.expose.ui.textColor = {0.9,0.9,0.9}`\n * `hs.expose.ui.fontName = 'Lucida Grande'`\n * `hs.expose.ui.textSize = 40` - in screen points\n * `hs.expose.ui.highlightColor = {0.8,0.5,0,0.1}` - highlight color for candidate windows\n * `hs.expose.ui.backgroundColor = {0.30,0.03,0.03,1}`\n * `hs.expose.ui.closeModeModifier = 'shift'` - \"close mode\" engaged while pressed (or 'cmd','ctrl','alt')\n * `hs.expose.ui.closeModeBackgroundColor = {0.7,0.1,0.1,1}` - background color while \"close mode\" is engaged\n * `hs.expose.ui.minimizeModeModifier = 'alt'` - \"minimize mode\" engaged while pressed\n * `hs.expose.ui.minimizeModeBackgroundColor = {0.1,0.2,0.3,1}` - background color while \"minimize mode\" is engaged\n * `hs.expose.ui.onlyActiveApplication = false` -- only show windows of the active application\n * `hs.expose.ui.includeNonVisible = true` - include minimized and hidden windows\n * `hs.expose.ui.nonVisibleStripBackgroundColor = {0.03,0.1,0.15,1}` - contains hints for non-visible windows\n * `hs.expose.ui.nonVisibleStripPosition = 'bottom'` - set it to your Dock position ('bottom', 'left' or 'right')\n * `hs.expose.ui.nonVisibleStripWidth = 0.1` - 0..0.5, width of the strip relative to the screen\n * `hs.expose.ui.includeOtherSpaces = true` - include windows in other Mission Control Spaces\n * `hs.expose.ui.otherSpacesStripBackgroundColor = {0.1,0.1,0.1,1}`\n * `hs.expose.ui.otherSpacesStripPosition = 'top'`\n * `hs.expose.ui.otherSpacesStripWidth = 0.2`\n * `hs.expose.ui.showTitles = true` - show window titles\n * `hs.expose.ui.showThumbnails = true` - show window thumbnails\n * `hs.expose.ui.thumbnailAlpha = 0` - 0..1, opacity for thumbnails\n * `hs.expose.ui.highlightThumbnailAlpha = 1` - 0..1, opacity for thumbnails of candidate windows\n * `hs.expose.ui.highlightThumbnailStrokeWidth = 8` - thumbnail frame thickness for candidate windows\n * `hs.expose.ui.maxHintLetters = 2` - if necessary, hints longer than this will be disambiguated with digits\n * `hs.expose.ui.fitWindowsMaxIterations = 30` -- lower is faster, but higher chance of overlapping thumbnails\n * `hs.expose.ui.fitWindowsInBackground = false` -- improves responsiveness, but can affect the rest of the config","type":"Variable"}}
