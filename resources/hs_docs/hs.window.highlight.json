{"start":{"def":"hs.window.highlight.start([windowfilterIsolate[, windowfilterOverlay]])","desc":"Starts the module","doc":"Starts the module\n\nParameters:\n * windowfilterIsolate - (optional) an `hs.window.filter` instance that automatically enable \"isolate\" mode\n   whenever one of the allowed windows is focused; alternatively, you can just provide a list of application\n   names and a windowfilter will be created for you that enables isolate mode whenever one of these apps is focused;\n   if omitted or nil, isolate mode won't be toggled automatically, but you can still toggle it manually via\n   `hs.window.higlight.toggleIsolate()`\n * windowfilterOverlay - (optional) an `hs.window.filter` instance that determines which windows to consider\n   for \"overlay\" mode when focused; if omitted or nil, the default windowfilter will be used\n\nReturns:\n * None\n\nNotes:\n * overlay mode is disabled by default - see `hs.window.highlight.ui.overlayColor`","examples":[],"file":"extensions/window/window_highlight.lua","lineno":"225","name":"start","notes":[" * overlay mode is disabled by default - see `hs.window.highlight.ui.overlayColor`"],"parameters":[" * windowfilterIsolate - (optional) an `hs.window.filter` instance that automatically enable \"isolate\" mode whenever one of the allowed windows is focused; alternatively, you can just provide a list of application names and a windowfilter will be created for you that enables isolate mode whenever one of these apps is focused; if omitted or nil, isolate mode won't be toggled automatically, but you can still toggle it manually via `hs.window.higlight.toggleIsolate()`"," * windowfilterOverlay - (optional) an `hs.window.filter` instance that determines which windows to consider for \"overlay\" mode when focused; if omitted or nil, the default windowfilter will be used"],"returns":[" * None"],"signature":"hs.window.highlight.start([windowfilterIsolate[, windowfilterOverlay]])","stripped_doc":"","type":"Function"},"stop":{"def":"hs.window.highlight.stop()","desc":"Stops the module and disables focused window highlighting (both \"overlay\" and \"isolate\" mode)","doc":"Stops the module and disables focused window highlighting (both \"overlay\" and \"isolate\" mode)\n\nParameters:\n * None\n\nReturns:\n * None","examples":[],"file":"extensions/window/window_highlight.lua","lineno":"275","name":"stop","notes":[],"parameters":[" * None"],"returns":[" * None"],"signature":"hs.window.highlight.stop()","stripped_doc":"","type":"Function"},"toggleIsolate":{"def":"hs.window.highlight.toggleIsolate([v])","desc":"Sets or clears the user override for \"isolate\" mode.","doc":"Sets or clears the user override for \"isolate\" mode.\n\nParameters:\n * v - (optional) a boolean; if true, enable isolate mode; if false, disable isolate mode,\n   even when `windowfilterIsolate` passed to `.start()` would otherwise enable it; if omitted or nil,\n   toggle the override, i.e. clear it if it's currently enforced, or set it to the opposite of the current\n   isolate mode status otherwise.\n\nReturns:\n * None\n\nNotes:\n * This function should be bound to a hotkey, e.g.: `hs.hotkey.bind('ctrl-cmd','\\','Isolate',hs.window.highlight.toggleIsolate)`","examples":[],"file":"extensions/window/window_highlight.lua","lineno":"198","name":"toggleIsolate","notes":[" * This function should be bound to a hotkey, e.g.: `hs.hotkey.bind('ctrl-cmd','\\','Isolate',hs.window.highlight.toggleIsolate)`"],"parameters":[" * v - (optional) a boolean; if true, enable isolate mode; if false, disable isolate mode, even when `windowfilterIsolate` passed to `.start()` would otherwise enable it; if omitted or nil, toggle the override, i.e. clear it if it's currently enforced, or set it to the opposite of the current isolate mode status otherwise."],"returns":[" * None"],"signature":"hs.window.highlight.toggleIsolate([v])","stripped_doc":"","type":"Function"},"ui":{"def":"hs.window.highlight.ui","desc":"Allows customization of the highlight overlays and behaviour.","doc":"Allows customization of the highlight overlays and behaviour.\n\nThe default values are shown in the right hand side of the assignements below.\n\nTo represent color values, you can use:\n * a table {red=redN, green=greenN, blue=blueN, alpha=alphaN}\n * a table {redN,greenN,blueN[,alphaN]} - if omitted alphaN defaults to 1.0\nwhere redN, greenN etc. are the desired value for the color component between 0.0 and 1.0\n\nColor inversion is governed by the module `hs.redshift`. See the relevant documentation for more information.\n\n * `hs.window.highlight.ui.overlay = false` - draw overlay over the area of the screen(s) that isn't occupied by the focused window\n * `hs.window.highlight.ui.overlayColor = {0.2,0.05,0,0.25}` - overlay color\n * `hs.window.highlight.ui.overlayColorInverted = {0.8,0.9,1,0.3}` - overlay color when colors are inverted\n * `hs.window.highlight.ui.isolateColor = {0,0,0,0.95}` - overlay color for isolate mode\n * `hs.window.highlight.ui.isolateColorInverted = {1,1,1,0.95}` - overlay color for isolate mode when colors are inverted\n * `hs.window.highlight.ui.frameWidth = 10` - draw a frame around the focused window in overlay mode; 0 to disable\n * `hs.window.highlight.ui.frameColor = {0,0.6,1,0.5}` - frame color\n * `hs.window.highlight.ui.frameColorInvert = {1,0.4,0,0.5}`\n * `hs.window.highlight.ui.flashDuration = 0` - duration in seconds of a brief flash over windows as they're shown/hidden;\n   disabled if 0; if desired, 0.3 is a good value\n * `hs.window.highlight.ui.windowShownFlashColor = {0,1,0,0.8}` - flash color when a window is shown (created or unhidden)\n * `hs.window.highlight.ui.windowHiddenFlashColor = {1,0,0,0.8}` - flash color when a window is hidden (destroyed or hidden)\n * `hs.window.highlight.ui.windowShownFlashColorInvert = {1,0,1,0.8}`\n * `hs.window.highlight.ui.windowHiddenFlashColorInvert = {0,1,1,0.8}`","file":"extensions/window/window_highlight.lua","lineno":"34","name":"ui","signature":"hs.window.highlight.ui","stripped_doc":"The default values are shown in the right hand side of the assignements below.\nTo represent color values, you can use:\n * a table {red=redN, green=greenN, blue=blueN, alpha=alphaN}\n * a table {redN,greenN,blueN[,alphaN]} - if omitted alphaN defaults to 1.0\nwhere redN, greenN etc. are the desired value for the color component between 0.0 and 1.0\nColor inversion is governed by the module `hs.redshift`. See the relevant documentation for more information.\n * `hs.window.highlight.ui.overlay = false` - draw overlay over the area of the screen(s) that isn't occupied by the focused window\n * `hs.window.highlight.ui.overlayColor = {0.2,0.05,0,0.25}` - overlay color\n * `hs.window.highlight.ui.overlayColorInverted = {0.8,0.9,1,0.3}` - overlay color when colors are inverted\n * `hs.window.highlight.ui.isolateColor = {0,0,0,0.95}` - overlay color for isolate mode\n * `hs.window.highlight.ui.isolateColorInverted = {1,1,1,0.95}` - overlay color for isolate mode when colors are inverted\n * `hs.window.highlight.ui.frameWidth = 10` - draw a frame around the focused window in overlay mode; 0 to disable\n * `hs.window.highlight.ui.frameColor = {0,0.6,1,0.5}` - frame color\n * `hs.window.highlight.ui.frameColorInvert = {1,0.4,0,0.5}`\n * `hs.window.highlight.ui.flashDuration = 0` - duration in seconds of a brief flash over windows as they're shown/hidden;\n   disabled if 0; if desired, 0.3 is a good value\n * `hs.window.highlight.ui.windowShownFlashColor = {0,1,0,0.8}` - flash color when a window is shown (created or unhidden)\n * `hs.window.highlight.ui.windowHiddenFlashColor = {1,0,0,0.8}` - flash color when a window is hidden (destroyed or hidden)\n * `hs.window.highlight.ui.windowShownFlashColorInvert = {1,0,1,0.8}`\n * `hs.window.highlight.ui.windowHiddenFlashColorInvert = {0,1,1,0.8}`","type":"Variable"}}