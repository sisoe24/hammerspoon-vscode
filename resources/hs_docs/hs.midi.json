{"callback":{"def":"hs.midi:callback(callbackFn)","desc":"Sets or removes a callback function for the `hs.midi` object.","doc":"Sets or removes a callback function for the `hs.midi` object.\n\nParameters:\n * `callbackFn` - a function to set as the callback for this `hs.midi` object.  If the value provided is `nil`, any currently existing callback function is removed.\n\nReturns:\n * The `hs.midi` object\n\nNotes:\n * Most MIDI keyboards produce a `noteOn` when you press a key, then `noteOff` when you release. However, some MIDI keyboards will return a `noteOn` with 0 `velocity` instead of `noteOff`, so you will recieve two `noteOn` commands for every key press/release.\n * The callback function should expect 5 arguments and should not return anything:\n   * `object`       - The `hs.midi` object.\n   * `deviceName`   - The device name as a string.\n   * `commandType`  - Type of MIDI message as defined as a string. See `hs.midi.commandTypes[]` for a list of possibilities.\n   * `description`  - Description of the event as a string. This is only really useful for debugging.\n   * `metadata`     - A table of data for the MIDI command (see below).\n\n * The `metadata` table will return the following, depending on the `commandType` for the callback:\n\n   * `noteOff` - Note off command:\n     * note                - The note number for the command. Must be between 0 and 127.\n     * velocity            - The velocity for the command. Must be between 0 and 127.\n     * channel             - The channel for the command. Must be a number between 15.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n   * `noteOn` - Note on command:\n     * note                - The note number for the command. Must be between 0 and 127.\n     * velocity            - The velocity for the command. Must be between 0 and 127.\n     * channel             - The channel for the command. Must be a number between 15.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n   * `polyphonicKeyPressure` - Polyphonic key pressure command:\n     * note                - The note number for the command. Must be between 0 and 127.\n     * pressure            - Key pressure of the polyphonic key pressure message. In the range 0-127.\n     * channel             - The channel for the command. Must be a number between 15.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n   * `controlChange` - Control change command. This is the most common command sent by MIDI controllers:\n     * controllerNumber    - The MIDI control number for the command.\n     * controllerValue     - The controllerValue of the command. Only the lower 7-bits of this are used.\n     * channel             - The channel for the command. Must be a number between 15.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * fourteenBitValue    - The 14-bit value of the command.\n     * fourteenBitCommand  - `true` if the command contains 14-bit value data otherwise, `false`.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n   * `programChange` - Program change command:\n     * programNumber       - The program (aka patch) number. From 0-127.\n     * channel             - The channel for the command. Must be a number between 15.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n   * `channelPressure` - Channel pressure command:\n     * pressure            - Key pressure of the channel pressure message. In the range 0-127.\n     * channel             - The channel for the command. Must be a number between 15.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n   * `pitchWheelChange` - Pitch wheel change command:\n     * pitchChange         -  A 14-bit value indicating the pitch bend. Center is 0x2000 (8192). Valid range is from 0-16383.\n     * channel             - The channel for the command. Must be a number between 15.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n   * `systemMessage` - System message command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n   * `systemExclusive` - System message command:\n     * manufacturerID      - The manufacturer ID for the command. This is used by devices to determine if the message is one they support.\n     * sysexChannel        - The channel of the message. Only valid for universal exclusive messages, will always be 0 for non-universal messages.\n     * sysexData           - The system exclusive data for the message. For universal messages subID's are included in sysexData, for non-universal messages, any device specific information (such as modelID, versionID or whatever manufactures decide to include) will be included in sysexData.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n   * `systemTimecodeQuarterFrame` - System exclusive (SysEx) command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n   * `systemSongPositionPointer` - System song position pointer command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n   * `systemSongSelect` - System song select command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n   * `systemTuneRequest` - System tune request command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n   * `systemTimingClock` - System timing clock command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n   * `systemStartSequence` - System timing clock command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n   * `systemContinueSequence` - System start sequence command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n   * `systemStopSequence` -  System continue sequence command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n   * `systemKeepAlive` - System keep alive message:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n\n * Example Usage:\n   ```lua\n   midiDevice = hs.midi.new(hs.midi.devices()[3])\n   midiDevice:callback(function(object, deviceName, commandType, description, metadata)\n              print(\"object: \" .. tostring(object))\n              print(\"deviceName: \" .. deviceName)\n              print(\"commandType: \" .. commandType)\n              print(\"description: \" .. description)\n              print(\"metadata: \" .. hs.inspect(metadata))\n              end)```","examples":[],"file":"extensions/midi/libmidi.m","lineno":"447","name":"callback","notes":[" * Most MIDI keyboards produce a `noteOn` when you press a key, then `noteOff` when you release. However, some MIDI keyboards will return a `noteOn` with 0 `velocity` instead of `noteOff`, so you will recieve two `noteOn` commands for every key press/release."," * The callback function should expect 5 arguments and should not return anything:","   * `object`       - The `hs.midi` object.","   * `deviceName`   - The device name as a string.","   * `commandType`  - Type of MIDI message as defined as a string. See `hs.midi.commandTypes[]` for a list of possibilities.","   * `description`  - Description of the event as a string. This is only really useful for debugging.","   * `metadata`     - A table of data for the MIDI command (see below).",""," * The `metadata` table will return the following, depending on the `commandType` for the callback:","","   * `noteOff` - Note off command:","     * note                - The note number for the command. Must be between 0 and 127.","     * velocity            - The velocity for the command. Must be between 0 and 127.","     * channel             - The channel for the command. Must be a number between 15.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.","","   * `noteOn` - Note on command:","     * note                - The note number for the command. Must be between 0 and 127.","     * velocity            - The velocity for the command. Must be between 0 and 127.","     * channel             - The channel for the command. Must be a number between 15.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.","","   * `polyphonicKeyPressure` - Polyphonic key pressure command:","     * note                - The note number for the command. Must be between 0 and 127.","     * pressure            - Key pressure of the polyphonic key pressure message. In the range 0-127.","     * channel             - The channel for the command. Must be a number between 15.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.","","   * `controlChange` - Control change command. This is the most common command sent by MIDI controllers:","     * controllerNumber    - The MIDI control number for the command.","     * controllerValue     - The controllerValue of the command. Only the lower 7-bits of this are used.","     * channel             - The channel for the command. Must be a number between 15.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * fourteenBitValue    - The 14-bit value of the command.","     * fourteenBitCommand  - `true` if the command contains 14-bit value data otherwise, `false`.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.","","   * `programChange` - Program change command:","     * programNumber       - The program (aka patch) number. From 0-127.","     * channel             - The channel for the command. Must be a number between 15.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.","","   * `channelPressure` - Channel pressure command:","     * pressure            - Key pressure of the channel pressure message. In the range 0-127.","     * channel             - The channel for the command. Must be a number between 15.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.","","   * `pitchWheelChange` - Pitch wheel change command:","     * pitchChange         -  A 14-bit value indicating the pitch bend. Center is 0x2000 (8192). Valid range is from 0-16383.","     * channel             - The channel for the command. Must be a number between 15.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.","","   * `systemMessage` - System message command:","     * dataByte1           - Data Byte 1 as integer.","     * dataByte2           - Data Byte 2 as integer.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.","","   * `systemExclusive` - System message command:","     * manufacturerID      - The manufacturer ID for the command. This is used by devices to determine if the message is one they support.","     * sysexChannel        - The channel of the message. Only valid for universal exclusive messages, will always be 0 for non-universal messages.","     * sysexData           - The system exclusive data for the message. For universal messages subID's are included in sysexData, for non-universal messages, any device specific information (such as modelID, versionID or whatever manufactures decide to include) will be included in sysexData.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.","","   * `systemTimecodeQuarterFrame` - System exclusive (SysEx) command:","     * dataByte1           - Data Byte 1 as integer.","     * dataByte2           - Data Byte 2 as integer.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.","","   * `systemSongPositionPointer` - System song position pointer command:","     * dataByte1           - Data Byte 1 as integer.","     * dataByte2           - Data Byte 2 as integer.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.","","   * `systemSongSelect` - System song select command:","     * dataByte1           - Data Byte 1 as integer.","     * dataByte2           - Data Byte 2 as integer.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.","","   * `systemTuneRequest` - System tune request command:","     * dataByte1           - Data Byte 1 as integer.","     * dataByte2           - Data Byte 2 as integer.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.","","   * `systemTimingClock` - System timing clock command:","     * dataByte1           - Data Byte 1 as integer.","     * dataByte2           - Data Byte 2 as integer.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.","","   * `systemStartSequence` - System timing clock command:","     * dataByte1           - Data Byte 1 as integer.","     * dataByte2           - Data Byte 2 as integer.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.","","   * `systemContinueSequence` - System start sequence command:","     * dataByte1           - Data Byte 1 as integer.","     * dataByte2           - Data Byte 2 as integer.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.","","   * `systemStopSequence` -  System continue sequence command:","     * dataByte1           - Data Byte 1 as integer.","     * dataByte2           - Data Byte 2 as integer.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.","","   * `systemKeepAlive` - System keep alive message:","     * dataByte1           - Data Byte 1 as integer.","     * dataByte2           - Data Byte 2 as integer.","     * timestamp           - The timestamp for the command as a string.","     * data                - Raw MIDI Data as Hex String.","     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.",""," * Example Usage:","   ```lua","   midiDevice = hs.midi.new(hs.midi.devices()[3])","   midiDevice:callback(function(object, deviceName, commandType, description, metadata)","              print(\"object: \" .. tostring(object))","              print(\"deviceName: \" .. deviceName)","              print(\"commandType: \" .. commandType)","              print(\"description: \" .. description)","              print(\"metadata: \" .. hs.inspect(metadata))","              end)```"],"parameters":[" * `callbackFn` - a function to set as the callback for this `hs.midi` object.  If the value provided is `nil`, any currently existing callback function is removed."],"returns":[" * The `hs.midi` object"],"signature":"hs.midi:callback(callbackFn)","stripped_doc":" * The `metadata` table will return the following, depending on the `commandType` for the callback:\n   * `noteOff` - Note off command:\n     * note                - The note number for the command. Must be between 0 and 127.\n     * velocity            - The velocity for the command. Must be between 0 and 127.\n     * channel             - The channel for the command. Must be a number between 15.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n   * `noteOn` - Note on command:\n     * note                - The note number for the command. Must be between 0 and 127.\n     * velocity            - The velocity for the command. Must be between 0 and 127.\n     * channel             - The channel for the command. Must be a number between 15.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n   * `polyphonicKeyPressure` - Polyphonic key pressure command:\n     * note                - The note number for the command. Must be between 0 and 127.\n     * pressure            - Key pressure of the polyphonic key pressure message. In the range 0-127.\n     * channel             - The channel for the command. Must be a number between 15.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n   * `controlChange` - Control change command. This is the most common command sent by MIDI controllers:\n     * controllerNumber    - The MIDI control number for the command.\n     * controllerValue     - The controllerValue of the command. Only the lower 7-bits of this are used.\n     * channel             - The channel for the command. Must be a number between 15.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * fourteenBitValue    - The 14-bit value of the command.\n     * fourteenBitCommand  - `true` if the command contains 14-bit value data otherwise, `false`.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n   * `programChange` - Program change command:\n     * programNumber       - The program (aka patch) number. From 0-127.\n     * channel             - The channel for the command. Must be a number between 15.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n   * `channelPressure` - Channel pressure command:\n     * pressure            - Key pressure of the channel pressure message. In the range 0-127.\n     * channel             - The channel for the command. Must be a number between 15.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n   * `pitchWheelChange` - Pitch wheel change command:\n     * pitchChange         -  A 14-bit value indicating the pitch bend. Center is 0x2000 (8192). Valid range is from 0-16383.\n     * channel             - The channel for the command. Must be a number between 15.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n   * `systemMessage` - System message command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n   * `systemExclusive` - System message command:\n     * manufacturerID      - The manufacturer ID for the command. This is used by devices to determine if the message is one they support.\n     * sysexChannel        - The channel of the message. Only valid for universal exclusive messages, will always be 0 for non-universal messages.\n     * sysexData           - The system exclusive data for the message. For universal messages subID's are included in sysexData, for non-universal messages, any device specific information (such as modelID, versionID or whatever manufactures decide to include) will be included in sysexData.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n   * `systemTimecodeQuarterFrame` - System exclusive (SysEx) command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n   * `systemSongPositionPointer` - System song position pointer command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n   * `systemSongSelect` - System song select command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n   * `systemTuneRequest` - System tune request command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n   * `systemTimingClock` - System timing clock command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n   * `systemStartSequence` - System timing clock command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n   * `systemContinueSequence` - System start sequence command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n   * `systemStopSequence` -  System continue sequence command:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n   * `systemKeepAlive` - System keep alive message:\n     * dataByte1           - Data Byte 1 as integer.\n     * dataByte2           - Data Byte 2 as integer.\n     * timestamp           - The timestamp for the command as a string.\n     * data                - Raw MIDI Data as Hex String.\n     * isVirtual           - `true` if Virtual MIDI Source otherwise `false`.\n * Example Usage:\n   ```lua\n   midiDevice = hs.midi.new(hs.midi.devices()[3])\n   midiDevice:callback(function(object, deviceName, commandType, description, metadata)\n              print(\"object: \" .. tostring(object))\n              print(\"deviceName: \" .. deviceName)\n              print(\"commandType: \" .. commandType)\n              print(\"description: \" .. description)\n              print(\"metadata: \" .. hs.inspect(metadata))\n              end)```","type":"Method"},"commandTypes":{"def":"hs.midi.commandTypes[]","desc":"A table containing the numeric value for the possible flags returned by the `commandType` parameter of the callback function.","doc":"A table containing the numeric value for the possible flags returned by the `commandType` parameter of the callback function.\n\nDefined keys are:\n  * noteOff                       - Note off command.\n  * noteOn                        - Note on command.\n  * polyphonicKeyPressure         - Polyphonic key pressure command.\n  * controlChange                 - Control change command. This is the most common command sent by MIDI controllers.\n  * programChange                 - Program change command.\n  * channelPressure               - Channel pressure command.\n  * pitchWheelChange              - Pitch wheel change command.\n  * systemMessage                 - System message command.\n  * systemExclusive               - System message command.\n  * SystemTimecodeQuarterFrame    - System exclusive (SysEx) command.\n  * systemSongPositionPointer     - System song position pointer command.\n  * systemSongSelect              - System song select command.\n  * systemTuneRequest             - System tune request command.\n  * systemTimingClock             - System timing clock command.\n  * systemStartSequence           - System timing clock command.\n  * systemContinueSequence        - System start sequence command.\n  * systemStopSequence            - System continue sequence command.\n  * systemKeepAlive               - System keep alive message.","file":"extensions/midi/libmidi.m","lineno":"1513","name":"commandTypes","signature":"hs.midi.commandTypes[]","stripped_doc":"Defined keys are:\n  * noteOff                       - Note off command.\n  * noteOn                        - Note on command.\n  * polyphonicKeyPressure         - Polyphonic key pressure command.\n  * controlChange                 - Control change command. This is the most common command sent by MIDI controllers.\n  * programChange                 - Program change command.\n  * channelPressure               - Channel pressure command.\n  * pitchWheelChange              - Pitch wheel change command.\n  * systemMessage                 - System message command.\n  * systemExclusive               - System message command.\n  * SystemTimecodeQuarterFrame    - System exclusive (SysEx) command.\n  * systemSongPositionPointer     - System song position pointer command.\n  * systemSongSelect              - System song select command.\n  * systemTuneRequest             - System tune request command.\n  * systemTimingClock             - System timing clock command.\n  * systemStartSequence           - System timing clock command.\n  * systemContinueSequence        - System start sequence command.\n  * systemStopSequence            - System continue sequence command.\n  * systemKeepAlive               - System keep alive message.","type":"Constant"},"deviceCallback":{"def":"hs.midi.deviceCallback(callbackFn) -> none","desc":"A callback that's triggered when a physical or virtual MIDI device is added or removed from the system.","doc":"A callback that's triggered when a physical or virtual MIDI device is added or removed from the system.\n\nParameters:\n * callbackFn - the callback function to trigger.\n\nReturns:\n * None\n\nNotes:\n * The callback function should expect 2 argument and should not return anything:\n   * `devices` - A table containing the names of any physically connected MIDI devices as strings.\n   * `virtualDevices` - A table containing the names of any virtual MIDI devices as strings.\n * Example Usage:\n   ```lua\n   hs.midi.deviceCallback(function(devices, virtualDevices)\n        print(hs.inspect(devices))\n        print(hs.inspect(virtualDevices))\n   end)```","examples":[],"file":"extensions/midi/libmidi.m","lineno":"342","name":"deviceCallback","notes":[" * The callback function should expect 2 argument and should not return anything:","   * `devices` - A table containing the names of any physically connected MIDI devices as strings.","   * `virtualDevices` - A table containing the names of any virtual MIDI devices as strings."," * Example Usage:","   ```lua","   hs.midi.deviceCallback(function(devices, virtualDevices)","        print(hs.inspect(devices))","        print(hs.inspect(virtualDevices))","   end)```"],"parameters":[" * callbackFn - the callback function to trigger."],"returns":[" * None"],"signature":"hs.midi.deviceCallback(callbackFn) -> none","stripped_doc":"","type":"Function"},"devices":{"def":"hs.midi.devices() -> table","desc":"Returns a table of currently connected physical MIDI devices.","doc":"Returns a table of currently connected physical MIDI devices.\n\nParameters:\n * None\n\nReturns:\n * A table containing the names of any physically connected MIDI devices as strings.","examples":[],"file":"extensions/midi/libmidi.m","lineno":"300","name":"devices","notes":[],"parameters":[" * None"],"returns":[" * A table containing the names of any physically connected MIDI devices as strings."],"signature":"hs.midi.devices() -> table","stripped_doc":"","type":"Function"},"displayName":{"def":"hs.midi:displayName() -> string","desc":"Returns the display name of a `hs.midi` object.","doc":"Returns the display name of a `hs.midi` object.\n\nParameters:\n * None\n\nReturns:\n * The name as a string.","examples":[],"file":"extensions/midi/libmidi.m","lineno":"1423","name":"displayName","notes":[],"parameters":[" * None"],"returns":[" * The name as a string."],"signature":"hs.midi:displayName() -> string","stripped_doc":"","type":"Method"},"identityRequest":{"def":"hs.midi:identityRequest() -> none","desc":"Sends an Identity Request message to the `hs.midi` device. You can use `hs.midi:callback()` to receive the `systemExclusive` response.","doc":"Sends an Identity Request message to the `hs.midi` device. You can use `hs.midi:callback()` to receive the `systemExclusive` response.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Example Usage:\n  ```lua\n  midiDevice = hs.midi.new(hs.midi.devices()[3])\n  midiDevice:callback(function(object, deviceName, commandType, description, metadata)\n                        print(\"object: \" .. tostring(object))\n                        print(\"deviceName: \" .. deviceName)\n                        print(\"commandType: \" .. commandType)\n                        print(\"description: \" .. description)\n                        print(\"metadata: \" .. hs.inspect(metadata))\n                      end)\n  midiDevice:identityRequest()```","examples":[],"file":"extensions/midi/libmidi.m","lineno":"1343","name":"identityRequest","notes":[" * Example Usage:","  ```lua","  midiDevice = hs.midi.new(hs.midi.devices()[3])","  midiDevice:callback(function(object, deviceName, commandType, description, metadata)","                        print(\"object: \" .. tostring(object))","                        print(\"deviceName: \" .. deviceName)","                        print(\"commandType: \" .. commandType)","                        print(\"description: \" .. description)","                        print(\"metadata: \" .. hs.inspect(metadata))","                      end)","  midiDevice:identityRequest()```"],"parameters":[" * None"],"returns":[" * None"],"signature":"hs.midi:identityRequest() -> none","stripped_doc":"","type":"Method"},"isOnline":{"def":"hs.midi:isOnline() -> boolean","desc":"Returns the online status of a `hs.midi` object.","doc":"Returns the online status of a `hs.midi` object.\n\nParameters:\n * None\n\nReturns:\n * `true` if online, otherwise `false`","examples":[],"file":"extensions/midi/libmidi.m","lineno":"1477","name":"isOnline","notes":[],"parameters":[" * None"],"returns":[" * `true` if online, otherwise `false`"],"signature":"hs.midi:isOnline() -> boolean","stripped_doc":"","type":"Method"},"isVirtual":{"def":"hs.midi:isVirtual() -> boolean","desc":"Returns `true` if an `hs.midi` object is virtual, otherwise `false`.","doc":"Returns `true` if an `hs.midi` object is virtual, otherwise `false`.\n\nParameters:\n * None\n\nReturns:\n * `true` if virtual, otherwise `false`","examples":[],"file":"extensions/midi/libmidi.m","lineno":"1494","name":"isVirtual","notes":[],"parameters":[" * None"],"returns":[" * `true` if virtual, otherwise `false`"],"signature":"hs.midi:isVirtual() -> boolean","stripped_doc":"","type":"Method"},"manufacturer":{"def":"hs.midi:manufacturer() -> string","desc":"Returns the manufacturer name of a `hs.midi` object.","doc":"Returns the manufacturer name of a `hs.midi` object.\n\nParameters:\n * None\n\nReturns:\n * The manufacturer name as a string.","examples":[],"file":"extensions/midi/libmidi.m","lineno":"1459","name":"manufacturer","notes":[],"parameters":[" * None"],"returns":[" * The manufacturer name as a string."],"signature":"hs.midi:manufacturer() -> string","stripped_doc":"","type":"Method"},"model":{"def":"hs.midi:model() -> string","desc":"Returns the model name of a `hs.midi` object.","doc":"Returns the model name of a `hs.midi` object.\n\nParameters:\n * None\n\nReturns:\n * The model name as a string.","examples":[],"file":"extensions/midi/libmidi.m","lineno":"1441","name":"model","notes":[],"parameters":[" * None"],"returns":[" * The model name as a string."],"signature":"hs.midi:model() -> string","stripped_doc":"","type":"Method"},"name":{"def":"hs.midi:name() -> string","desc":"Returns the name of a `hs.midi` object.","doc":"Returns the name of a `hs.midi` object.\n\nParameters:\n * None\n\nReturns:\n * The name as a string.","examples":[],"file":"extensions/midi/libmidi.m","lineno":"1405","name":"name","notes":[],"parameters":[" * None"],"returns":[" * The name as a string."],"signature":"hs.midi:name() -> string","stripped_doc":"","type":"Method"},"new":{"def":"hs.midi.new(deviceName) -> `hs.midi` object","desc":"Creates a new `hs.midi` object.","doc":"Creates a new `hs.midi` object.\n\nParameters:\n * deviceName - A string containing the device name of the MIDI device. A valid device name can be found by checking `hs.midi.devices()` and/or `hs.midi.virtualSources()`.\n\nReturns:\n * An `hs.midi` object or `nil` if an error occured.\n\nNotes:\n * Example Usage:\n   `hs.midi.new(hs.midi.devices()[1])`","examples":[],"file":"extensions/midi/libmidi.m","lineno":"391","name":"new","notes":[" * Example Usage:","   `hs.midi.new(hs.midi.devices()[1])`"],"parameters":[" * deviceName - A string containing the device name of the MIDI device. A valid device name can be found by checking `hs.midi.devices()` and/or `hs.midi.virtualSources()`."],"returns":[" * An `hs.midi` object or `nil` if an error occured."],"signature":"hs.midi.new(deviceName) -> `hs.midi` object","stripped_doc":"","type":"Constructor"},"newVirtualSource":{"def":"hs.midi.newVirtualSource(virtualSource) -> `hs.midi` object","desc":"Creates a new `hs.midi` object.","doc":"Creates a new `hs.midi` object.\n\nParameters:\n * virtualSource - A string containing the virtual source name of the MIDI device. A valid virtual source name can be found by checking `hs.midi.virtualSources()`.\n\nReturns:\n * An `hs.midi` object or `nil` if an error occured.\n\nNotes:\n * Example Usage:\n   `hs.midi.new(hs.midi.virtualSources()[1])`","examples":[],"file":"extensions/midi/libmidi.m","lineno":"418","name":"newVirtualSource","notes":[" * Example Usage:","   `hs.midi.new(hs.midi.virtualSources()[1])`"],"parameters":[" * virtualSource - A string containing the virtual source name of the MIDI device. A valid virtual source name can be found by checking `hs.midi.virtualSources()`."],"returns":[" * An `hs.midi` object or `nil` if an error occured."],"signature":"hs.midi.newVirtualSource(virtualSource) -> `hs.midi` object","stripped_doc":"","type":"Constructor"},"sendCommand":{"def":"hs.midi:sendCommand(commandType, metadata) -> boolean","desc":"Sends a command to the `hs.midi` object.","doc":"Sends a command to the `hs.midi` object.\n\nParameters:\n * `commandType`    - The type of command you want to send as a string. See `hs.midi.commandTypes[]`.\n * `metadata`       - A table of data for the MIDI command (see notes below).\n\nReturns:\n * `true` if successful, otherwise `false`\n\nNotes:\n * The `metadata` table can accept following, depending on the `commandType` supplied:\n\n   * `noteOff` - Note off command:\n     * note                - The note number for the command. Must be between 0 and 127. Defaults to 0.\n     * velocity            - The velocity for the command. Must be between 0 and 127. Defaults to 0.\n     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.\n\n   * `noteOn` - Note on command:\n     * note                - The note number for the command. Must be between 0 and 127. Defaults to 0.\n     * velocity            - The velocity for the command. Must be between 0 and 127. Defaults to 0.\n     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.\n\n   * `polyphonicKeyPressure` - Polyphonic key pressure command:\n     * note                - The note number for the command. Must be between 0 and 127. Defaults to 0.\n     * pressure            - Key pressure of the polyphonic key pressure message. In the range 0-127. Defaults to 0.\n     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.\n\n   * `controlChange` - Control change command. This is the most common command sent by MIDI controllers:\n     * controllerNumber    - The MIDI control number for the command. Defaults to 0.\n     * controllerValue     - The controllerValue of the command. Only the lower 7-bits of this are used. Defaults to 0.\n     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.\n     * fourteenBitValue    - The 14-bit value of the command. Must be between 0 and 16383. Defaults to 0. `fourteenBitCommand` must be `true`.\n     * fourteenBitCommand  - `true` if the command contains 14-bit value data otherwise, `false`. `controllerValue` will be ignored if this is set to `true`.\n\n   * `programChange` - Program change command:\n     * programNumber       - The program (aka patch) number. From 0-127. Defaults to 0.\n     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.\n\n   * `channelPressure` - Channel pressure command:\n     * pressure            - Key pressure of the channel pressure message. In the range 0-127. Defaults to 0.\n     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.\n\n   * `pitchWheelChange` - Pitch wheel change command:\n     * pitchChange         -  A 14-bit value indicating the pitch bend. Center is 0x2000 (8192). Valid range is from 0-16383. Defaults to 0.\n     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.\n\n * Example Usage:\n    ```lua\n    midiDevice = hs.midi.new(hs.midi.devices()[1])\n    midiDevice:sendCommand(\"noteOn\", {\n        [\"note\"] = 72,\n        [\"velocity\"] = 50,\n        [\"channel\"] = 0,\n    })\n    hs.timer.usleep(500000)\n    midiDevice:sendCommand(\"noteOn\", {\n        [\"note\"] = 74,\n        [\"velocity\"] = 50,\n        [\"channel\"] = 0,\n    })\n    hs.timer.usleep(500000)\n    midiDevice:sendCommand(\"noteOn\", {\n        [\"note\"] = 76,\n        [\"velocity\"] = 50,\n        [\"channel\"] = 0,\n    })\n    midiDevice:sendCommand(\"pitchWheelChange\", {\n        [\"pitchChange\"] = 1000,\n        [\"channel\"] = 0,\n    })\n    hs.timer.usleep(100000)\n    midiDevice:sendCommand(\"pitchWheelChange\", {\n        [\"pitchChange\"] = 2000,\n        [\"channel\"] = 0,\n    })\n    hs.timer.usleep(100000)\n    midiDevice:sendCommand(\"pitchWheelChange\", {\n        [\"pitchChange\"] = 3000,\n        [\"channel\"] = 0,\n    })```","examples":[],"file":"extensions/midi/libmidi.m","lineno":"1033","name":"sendCommand","notes":[" * The `metadata` table can accept following, depending on the `commandType` supplied:","","   * `noteOff` - Note off command:","     * note                - The note number for the command. Must be between 0 and 127. Defaults to 0.","     * velocity            - The velocity for the command. Must be between 0 and 127. Defaults to 0.","     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.","","   * `noteOn` - Note on command:","     * note                - The note number for the command. Must be between 0 and 127. Defaults to 0.","     * velocity            - The velocity for the command. Must be between 0 and 127. Defaults to 0.","     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.","","   * `polyphonicKeyPressure` - Polyphonic key pressure command:","     * note                - The note number for the command. Must be between 0 and 127. Defaults to 0.","     * pressure            - Key pressure of the polyphonic key pressure message. In the range 0-127. Defaults to 0.","     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.","","   * `controlChange` - Control change command. This is the most common command sent by MIDI controllers:","     * controllerNumber    - The MIDI control number for the command. Defaults to 0.","     * controllerValue     - The controllerValue of the command. Only the lower 7-bits of this are used. Defaults to 0.","     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.","     * fourteenBitValue    - The 14-bit value of the command. Must be between 0 and 16383. Defaults to 0. `fourteenBitCommand` must be `true`.","     * fourteenBitCommand  - `true` if the command contains 14-bit value data otherwise, `false`. `controllerValue` will be ignored if this is set to `true`.","","   * `programChange` - Program change command:","     * programNumber       - The program (aka patch) number. From 0-127. Defaults to 0.","     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.","","   * `channelPressure` - Channel pressure command:","     * pressure            - Key pressure of the channel pressure message. In the range 0-127. Defaults to 0.","     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.","","   * `pitchWheelChange` - Pitch wheel change command:","     * pitchChange         -  A 14-bit value indicating the pitch bend. Center is 0x2000 (8192). Valid range is from 0-16383. Defaults to 0.","     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.",""," * Example Usage:","    ```lua","    midiDevice = hs.midi.new(hs.midi.devices()[1])","    midiDevice:sendCommand(\"noteOn\", {","        [\"note\"] = 72,","        [\"velocity\"] = 50,","        [\"channel\"] = 0,","    })","    hs.timer.usleep(500000)","    midiDevice:sendCommand(\"noteOn\", {","        [\"note\"] = 74,","        [\"velocity\"] = 50,","        [\"channel\"] = 0,","    })","    hs.timer.usleep(500000)","    midiDevice:sendCommand(\"noteOn\", {","        [\"note\"] = 76,","        [\"velocity\"] = 50,","        [\"channel\"] = 0,","    })","    midiDevice:sendCommand(\"pitchWheelChange\", {","        [\"pitchChange\"] = 1000,","        [\"channel\"] = 0,","    })","    hs.timer.usleep(100000)","    midiDevice:sendCommand(\"pitchWheelChange\", {","        [\"pitchChange\"] = 2000,","        [\"channel\"] = 0,","    })","    hs.timer.usleep(100000)","    midiDevice:sendCommand(\"pitchWheelChange\", {","        [\"pitchChange\"] = 3000,","        [\"channel\"] = 0,","    })```"],"parameters":[" * `commandType`    - The type of command you want to send as a string. See `hs.midi.commandTypes[]`."," * `metadata`       - A table of data for the MIDI command (see notes below)."],"returns":[" * `true` if successful, otherwise `false`"],"signature":"hs.midi:sendCommand(commandType, metadata) -> boolean","stripped_doc":"   * `noteOff` - Note off command:\n     * note                - The note number for the command. Must be between 0 and 127. Defaults to 0.\n     * velocity            - The velocity for the command. Must be between 0 and 127. Defaults to 0.\n     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.\n   * `noteOn` - Note on command:\n     * note                - The note number for the command. Must be between 0 and 127. Defaults to 0.\n     * velocity            - The velocity for the command. Must be between 0 and 127. Defaults to 0.\n     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.\n   * `polyphonicKeyPressure` - Polyphonic key pressure command:\n     * note                - The note number for the command. Must be between 0 and 127. Defaults to 0.\n     * pressure            - Key pressure of the polyphonic key pressure message. In the range 0-127. Defaults to 0.\n     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.\n   * `controlChange` - Control change command. This is the most common command sent by MIDI controllers:\n     * controllerNumber    - The MIDI control number for the command. Defaults to 0.\n     * controllerValue     - The controllerValue of the command. Only the lower 7-bits of this are used. Defaults to 0.\n     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.\n     * fourteenBitValue    - The 14-bit value of the command. Must be between 0 and 16383. Defaults to 0. `fourteenBitCommand` must be `true`.\n     * fourteenBitCommand  - `true` if the command contains 14-bit value data otherwise, `false`. `controllerValue` will be ignored if this is set to `true`.\n   * `programChange` - Program change command:\n     * programNumber       - The program (aka patch) number. From 0-127. Defaults to 0.\n     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.\n   * `channelPressure` - Channel pressure command:\n     * pressure            - Key pressure of the channel pressure message. In the range 0-127. Defaults to 0.\n     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.\n   * `pitchWheelChange` - Pitch wheel change command:\n     * pitchChange         -  A 14-bit value indicating the pitch bend. Center is 0x2000 (8192). Valid range is from 0-16383. Defaults to 0.\n     * channel             - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels.\n * Example Usage:\n    ```lua\n    midiDevice = hs.midi.new(hs.midi.devices()[1])\n    midiDevice:sendCommand(\"noteOn\", {\n        [\"note\"] = 72,\n        [\"velocity\"] = 50,\n        [\"channel\"] = 0,\n    })\n    hs.timer.usleep(500000)\n    midiDevice:sendCommand(\"noteOn\", {\n        [\"note\"] = 74,\n        [\"velocity\"] = 50,\n        [\"channel\"] = 0,\n    })\n    hs.timer.usleep(500000)\n    midiDevice:sendCommand(\"noteOn\", {\n        [\"note\"] = 76,\n        [\"velocity\"] = 50,\n        [\"channel\"] = 0,\n    })\n    midiDevice:sendCommand(\"pitchWheelChange\", {\n        [\"pitchChange\"] = 1000,\n        [\"channel\"] = 0,\n    })\n    hs.timer.usleep(100000)\n    midiDevice:sendCommand(\"pitchWheelChange\", {\n        [\"pitchChange\"] = 2000,\n        [\"channel\"] = 0,\n    })\n    hs.timer.usleep(100000)\n    midiDevice:sendCommand(\"pitchWheelChange\", {\n        [\"pitchChange\"] = 3000,\n        [\"channel\"] = 0,\n    })```","type":"Method"},"sendSysex":{"def":"hs.midi:sendSysex(command) -> none","desc":"Sends a System Exclusive Command to the `hs.midi` object.","doc":"Sends a System Exclusive Command to the `hs.midi` object.\n\nParameters:\n * `command` - The system exclusive command you wish to send as a string. White spaces in the string will be ignored.\n\nReturns:\n * None\n\nNotes:\n * Example Usage:\n   ```lua\n   midiDevice:sendSysex(\"f07e7f06 01f7\")```","examples":[],"file":"extensions/midi/libmidi.m","lineno":"1011","name":"sendSysex","notes":[" * Example Usage:","   ```lua","   midiDevice:sendSysex(\"f07e7f06 01f7\")```"],"parameters":[" * `command` - The system exclusive command you wish to send as a string. White spaces in the string will be ignored."],"returns":[" * None"],"signature":"hs.midi:sendSysex(command) -> none","stripped_doc":"","type":"Method"},"synthesize":{"def":"hs.midi:synthesize([value]) -> boolean","desc":"Set or display whether or not the MIDI device should synthesize audio on your computer.","doc":"Set or display whether or not the MIDI device should synthesize audio on your computer.\n\nParameters:\n * [value] - `true` if you want to synthesize audio, otherwise `false`.\n\nReturns:\n * `true` if enabled otherwise `false`","examples":[],"file":"extensions/midi/libmidi.m","lineno":"1377","name":"synthesize","notes":[],"parameters":[" * [value] - `true` if you want to synthesize audio, otherwise `false`."],"returns":[" * `true` if enabled otherwise `false`"],"signature":"hs.midi:synthesize([value]) -> boolean","stripped_doc":"","type":"Method"},"virtualSources":{"def":"hs.midi.virtualSources() -> table","desc":"Returns a table of currently available Virtual MIDI sources. This includes devices, such as Native Instruments controllers which present as virtual endpoints rather than physical devices.","doc":"Returns a table of currently available Virtual MIDI sources. This includes devices, such as Native Instruments controllers which present as virtual endpoints rather than physical devices.\n\nParameters:\n * None\n\nReturns:\n * A table containing the names of any virtual MIDI sources as strings.","examples":[],"file":"extensions/midi/libmidi.m","lineno":"321","name":"virtualSources","notes":[],"parameters":[" * None"],"returns":[" * A table containing the names of any virtual MIDI sources as strings."],"signature":"hs.midi.virtualSources() -> table","stripped_doc":"","type":"Function"}}