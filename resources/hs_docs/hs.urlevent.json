{"bind":{"def":"hs.urlevent.bind(eventName, callback)","desc":"Registers a callback for a hammerspoon:// URL event","doc":"Registers a callback for a hammerspoon:// URL event\n\nParameters:\n * eventName - A string containing the name of an event\n * callback - A function that will be called when the specified event is received, or nil to remove an existing callback\n\nReturns:\n * None\n\nNotes:\n * The callback function should accept two parameters:\n  * eventName - A string containing the name of the event\n  * params - A table containing key/value string pairs containing any URL parameters that were specified in the URL\n  * senderPID - An integer containing the PID of the sending application, if available (otherwise -1)\n * Given the URL `hammerspoon://doThingA?value=1` The event name is `doThingA` and the callback's `params` argument will be a table containing `{[\"value\"] = \"1\"}`","examples":[],"file":"extensions/urlevent/urlevent.lua","lineno":"88","name":"bind","notes":[" * The callback function should accept two parameters:","  * eventName - A string containing the name of the event","  * params - A table containing key/value string pairs containing any URL parameters that were specified in the URL","  * senderPID - An integer containing the PID of the sending application, if available (otherwise -1)"," * Given the URL `hammerspoon://doThingA?value=1` The event name is `doThingA` and the callback's `params` argument will be a table containing `{[\"value\"] = \"1\"}`"],"parameters":[" * eventName - A string containing the name of an event"," * callback - A function that will be called when the specified event is received, or nil to remove an existing callback"],"returns":[" * None"],"signature":"hs.urlevent.bind(eventName, callback)","stripped_doc":"","type":"Function"},"getAllHandlersForScheme":{"def":"hs.urlevent.getAllHandlersForScheme(scheme) -> table","desc":"Gets all of the application bundle identifiers of applications able to handle a URL scheme","doc":"Gets all of the application bundle identifiers of applications able to handle a URL scheme\n\nParameters:\n * scheme - A string containing a URL scheme (e.g. 'http')\n\nReturns:\n * A table containing the bundle identifiers of all applications that can handle the scheme","examples":[],"file":"extensions/urlevent/liburlevent.m","lineno":"269","name":"getAllHandlersForScheme","notes":[],"parameters":[" * scheme - A string containing a URL scheme (e.g. 'http')"],"returns":[" * A table containing the bundle identifiers of all applications that can handle the scheme"],"signature":"hs.urlevent.getAllHandlersForScheme(scheme) -> table","stripped_doc":"","type":"Function"},"getDefaultHandler":{"def":"hs.urlevent.getDefaultHandler(scheme) -> string","desc":"Gets the application bundle identifier of the application currently registered to handle a URL scheme","doc":"Gets the application bundle identifier of the application currently registered to handle a URL scheme\n\nParameters:\n * scheme - A string containing a URL scheme (e.g. 'http')\n\nReturns:\n * A string containing the bundle identifier of the current default application","examples":[],"file":"extensions/urlevent/liburlevent.m","lineno":"244","name":"getDefaultHandler","notes":[],"parameters":[" * scheme - A string containing a URL scheme (e.g. 'http')"],"returns":[" * A string containing the bundle identifier of the current default application"],"signature":"hs.urlevent.getDefaultHandler(scheme) -> string","stripped_doc":"","type":"Function"},"httpCallback":{"def":"hs.urlevent.httpCallback","desc":"A function that should handle http:// and https:// URL events","doc":"A function that should handle http:// and https:// URL events\n\nNotes:\n * The function should handle four arguments:\n  * scheme - A string containing the URL scheme (i.e. \"http\")\n  * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")\n  * params - A table containing the key/value pairs of all the URL parameters\n  * fullURL - A string containing the full, original URL\n  * senderPID - An integer containing the PID of the application that opened the URL, if available (otherwise -1)","file":"extensions/urlevent/urlevent.lua","lineno":"21","name":"httpCallback","notes":[" * The function should handle four arguments:","  * scheme - A string containing the URL scheme (i.e. \"http\")","  * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")","  * params - A table containing the key/value pairs of all the URL parameters","  * fullURL - A string containing the full, original URL","  * senderPID - An integer containing the PID of the application that opened the URL, if available (otherwise -1)"],"signature":"hs.urlevent.httpCallback","stripped_doc":"","type":"Variable"},"mailtoCallback":{"def":"hs.urlevent.mailtoCallback","desc":"A function that should handle mailto: URL events","doc":"A function that should handle mailto: URL events\n\nNotes:\n * The function should handle four arguments:\n  * scheme - A string containing the URI scheme (i.e. \"mailto\")\n  * host - A string containing the host requested (typically nil)\n  * params - A table containing the key/value pairs of all the URL parameters, typically empty\n  * fullURL - A string containing the full, original URI\n  * senderPID - An integer containing the PID of the application that opened the URI, if available (otherwise -1)","file":"extensions/urlevent/urlevent.lua","lineno":"34","name":"mailtoCallback","notes":[" * The function should handle four arguments:","  * scheme - A string containing the URI scheme (i.e. \"mailto\")","  * host - A string containing the host requested (typically nil)","  * params - A table containing the key/value pairs of all the URL parameters, typically empty","  * fullURL - A string containing the full, original URI","  * senderPID - An integer containing the PID of the application that opened the URI, if available (otherwise -1)"],"signature":"hs.urlevent.mailtoCallback","stripped_doc":"","type":"Variable"},"openURL":{"def":"hs.urlevent.openURL(url)","desc":"Opens a URL with the default application","doc":"Opens a URL with the default application\n\nParameters:\n * url - A string containing a URL, which must contain a scheme and '://'\n\nReturns:\n * A boolean, true if the URL was opened successfully, otherwise false","examples":[],"file":"extensions/urlevent/urlevent.lua","lineno":"109","name":"openURL","notes":[],"parameters":[" * url - A string containing a URL, which must contain a scheme and '://'"],"returns":[" * A boolean, true if the URL was opened successfully, otherwise false"],"signature":"hs.urlevent.openURL(url)","stripped_doc":"","type":"Function"},"openURLWithBundle":{"def":"hs.urlevent.openURLWithBundle(url, bundleID) -> boolean","desc":"Opens a URL with a specified application","doc":"Opens a URL with a specified application\n\nParameters:\n * url - A string containing a URL\n * bundleID - A string containing an application bundle identifier (e.g. \"com.apple.Safari\")\n\nReturns:\n * True if the application was launched successfully, otherwise false","examples":[],"file":"extensions/urlevent/liburlevent.m","lineno":"300","name":"openURLWithBundle","notes":[],"parameters":[" * url - A string containing a URL"," * bundleID - A string containing an application bundle identifier (e.g. \"com.apple.Safari\")"],"returns":[" * True if the application was launched successfully, otherwise false"],"signature":"hs.urlevent.openURLWithBundle(url, bundleID) -> boolean","stripped_doc":"","type":"Function"},"setDefaultHandler":{"def":"hs.urlevent.setDefaultHandler(scheme[, bundleID])","desc":"Sets the default system handler for URLs of a given scheme","doc":"Sets the default system handler for URLs of a given scheme\n\nParameters:\n * scheme - A string containing the URL scheme to change. This must be 'http' or 'https' (although entering either will change the handler for both)\n * bundleID - An optional string containing an application bundle identifier for the application to set as the default handler. Defaults to `org.hammerspoon.Hammerspoon`.\n\nReturns:\n * None\n\nNotes:\n * Changing the default handler for http/https URLs will display a system prompt asking the user to confirm the change","examples":[],"file":"extensions/urlevent/liburlevent.m","lineno":"196","name":"setDefaultHandler","notes":[" * Changing the default handler for http/https URLs will display a system prompt asking the user to confirm the change"],"parameters":[" * scheme - A string containing the URL scheme to change. This must be 'http' or 'https' (although entering either will change the handler for both)"," * bundleID - An optional string containing an application bundle identifier for the application to set as the default handler. Defaults to `org.hammerspoon.Hammerspoon`."],"returns":[" * None"],"signature":"hs.urlevent.setDefaultHandler(scheme[, bundleID])","stripped_doc":"","type":"Function"},"setRestoreHandler":{"def":"hs.urlevent.setRestoreHandler(scheme, bundleID)","desc":"Stores a URL handler that will be restored when Hammerspoon or reloads its config","doc":"Stores a URL handler that will be restored when Hammerspoon or reloads its config\n\nParameters:\n * scheme - A string containing the URL scheme to change. This must be 'http' (although both http:// and https:// URLs will be affected)\n * bundleID - A string containing an application bundle identifier (e.g. 'com.apple.Safari') for the application to set as the default handler when Hammerspoon exits or reloads its config\n\nReturns:\n * None\n\nNotes:\n * You don't have to call this function if you want Hammerspoon to permanently be your default handler. Only use this if you want the handler to be automatically reverted to something else when Hammerspoon exits/reloads.","examples":[],"file":"extensions/urlevent/liburlevent.m","lineno":"173","name":"setRestoreHandler","notes":[" * You don't have to call this function if you want Hammerspoon to permanently be your default handler. Only use this if you want the handler to be automatically reverted to something else when Hammerspoon exits/reloads."],"parameters":[" * scheme - A string containing the URL scheme to change. This must be 'http' (although both http:// and https:// URLs will be affected)"," * bundleID - A string containing an application bundle identifier (e.g. 'com.apple.Safari') for the application to set as the default handler when Hammerspoon exits or reloads its config"],"returns":[" * None"],"signature":"hs.urlevent.setRestoreHandler(scheme, bundleID)","stripped_doc":"","type":"Function"}}