{"COLORRAMP":{"def":"hs.redshift.COLORRAMP","desc":"A table holding the gamma values for given color temperatures; each key must be a color temperature number in K (useful values are between","doc":"A table holding the gamma values for given color temperatures; each key must be a color temperature number in K (useful values are between\n1400 and 6500), and each value must be a list of 3 gamma numbers between 0 and 1 for red, green and blue respectively.\nThe table must have at least two entries (a lower and upper bound); the actual gamma values used for a given color temperature\nare linearly interpolated between the two closest entries; linear interpolation isn't particularly precise for this use case,\nso you should provide as many values as possible.\n\nNotes:\n * `hs.inspect(hs.redshift.COLORRAMP)` from the console will show you how the table is built\n * the default ramp has entries from 1000K to 10000K every 100K","file":"extensions/redshift/redshift.lua","lineno":"342","name":"COLORRAMP","notes":[" * `hs.inspect(hs.redshift.COLORRAMP)` from the console will show you how the table is built"," * the default ramp has entries from 1000K to 10000K every 100K"],"signature":"hs.redshift.COLORRAMP","stripped_doc":"1400 and 6500), and each value must be a list of 3 gamma numbers between 0 and 1 for red, green and blue respectively.\nThe table must have at least two entries (a lower and upper bound); the actual gamma values used for a given color temperature\nare linearly interpolated between the two closest entries; linear interpolation isn't particularly precise for this use case,\nso you should provide as many values as possible.","type":"Variable"},"invertSubscribe":{"def":"hs.redshift.invertSubscribe([id,]fn)","desc":"Subscribes a callback to be notified when the color inversion status changes","doc":"Subscribes a callback to be notified when the color inversion status changes\n\nParameters:\n * id - (optional) a string identifying the requester (usually the module name); if omitted, `fn` itself will be the identifier; this identifier must be passed to `hs.redshift.invertUnsubscribe()`\n * fn - a function that will be called whenever color inversion status changes; it must accept a single parameter, a string or false as per the return value of `hs.redshift.isInverted()`\n\nReturns:\n * None\n\nNotes:\n * You can use this to dynamically adjust the UI colors in your modules or configuration, if appropriate.","examples":[],"file":"extensions/redshift/redshift.lua","lineno":"107","name":"invertSubscribe","notes":[" * You can use this to dynamically adjust the UI colors in your modules or configuration, if appropriate."],"parameters":[" * id - (optional) a string identifying the requester (usually the module name); if omitted, `fn` itself will be the identifier; this identifier must be passed to `hs.redshift.invertUnsubscribe()`"," * fn - a function that will be called whenever color inversion status changes; it must accept a single parameter, a string or false as per the return value of `hs.redshift.isInverted()`"],"returns":[" * None"],"signature":"hs.redshift.invertSubscribe([id,]fn)","stripped_doc":"","type":"Function"},"invertUnsubscribe":{"def":"hs.redshift.invertUnsubscribe(id)","desc":"Unsubscribes a previously subscribed color inversion change callback","doc":"Unsubscribes a previously subscribed color inversion change callback\n\nParameters:\n * id - a string identifying the requester or the callback function itself, depending on how you\n   called `hs.redshift.invertSubscribe()`\n\nReturns:\n * None","examples":[],"file":"extensions/redshift/redshift.lua","lineno":"128","name":"invertUnsubscribe","notes":[],"parameters":[" * id - a string identifying the requester or the callback function itself, depending on how you called `hs.redshift.invertSubscribe()`"],"returns":[" * None"],"signature":"hs.redshift.invertUnsubscribe(id)","stripped_doc":"","type":"Function"},"isInverted":{"def":"hs.redshift.isInverted() -> string or false","desc":"Checks if the colors are currently inverted","doc":"Checks if the colors are currently inverted\n\nParameters:\n * None\n\nReturns:\n * false if the colors are not currently inverted; otherwise, a string indicating the reason, one of:\n   * \"user\" for the user override (see `hs.redshift.toggleInvert()`)\n   * \"redshift-night\" if `hs.redshift.start()` was called with `invertAtNight` set to true,\n     and it's currently night time\n   * the ID string (usually the module name) provided to `hs.redshift.requestInvert()`, if another module requested color inversion","examples":[],"file":"extensions/redshift/redshift.lua","lineno":"144","name":"isInverted","notes":[],"parameters":[" * None"],"returns":[" * false if the colors are not currently inverted; otherwise, a string indicating the reason, one of:","   * \"user\" for the user override (see `hs.redshift.toggleInvert()`)","   * \"redshift-night\" if `hs.redshift.start()` was called with `invertAtNight` set to true,","     and it's currently night time","   * the ID string (usually the module name) provided to `hs.redshift.requestInvert()`, if another module requested color inversion"],"signature":"hs.redshift.isInverted() -> string or false","stripped_doc":"","type":"Function"},"requestInvert":{"def":"hs.redshift.requestInvert(id,v)","desc":"Sets or clears a request for color inversion","doc":"Sets or clears a request for color inversion\n\nParameters:\n * id - a string identifying the requester (usually the module name)\n * v - a boolean indicating whether to invert the colors (if true) or clear any previous requests (if false or nil)\n\nReturns:\n * None\n\nNotes:\n * you can use this function e.g. to automatically invert colors if the ambient light sensor reading drops below\n   a certain threshold (`hs.brightness.DDCauto()` can optionally do exactly that)\n * if the user's configuration doesn't explicitly start the redshift module, calling this will have no effect","examples":[],"file":"extensions/redshift/redshift.lua","lineno":"161","name":"requestInvert","notes":[" * you can use this function e.g. to automatically invert colors if the ambient light sensor reading drops below","   a certain threshold (`hs.brightness.DDCauto()` can optionally do exactly that)"," * if the user's configuration doesn't explicitly start the redshift module, calling this will have no effect"],"parameters":[" * id - a string identifying the requester (usually the module name)"," * v - a boolean indicating whether to invert the colors (if true) or clear any previous requests (if false or nil)"],"returns":[" * None"],"signature":"hs.redshift.requestInvert(id,v)","stripped_doc":"","type":"Function"},"start":{"def":"hs.redshift.start(colorTemp,nightStart,nightEnd[,transition[,invertAtNight[,windowfilterDisable[,dayColorTemp]]]])","desc":"Sets the schedule and (re)starts the module","doc":"Sets the schedule and (re)starts the module\n\nParameters:\n * colorTemp - a number indicating the desired color temperature (Kelvin) during the night cycle;\n   the recommended range is between 3600K and 1400K; lower values (minimum 1000K) result in a more pronounced adjustment\n * nightStart - a string in the format \"HH:MM\" (24-hour clock) or number of seconds after midnight\n   (see `hs.timer.seconds()`) indicating when the night cycle should start\n * nightEnd - a string in the format \"HH:MM\" (24-hour clock) or number of seconds after midnight\n   (see `hs.timer.seconds()`) indicating when the night cycle should end\n * transition - (optional) a string or number of seconds (see `hs.timer.seconds()`) indicating the duration of\n   the transition to the night color temperature and back; if omitted, defaults to 1 hour\n * invertAtNight - (optional) a boolean indicating whether the colors should be inverted (in addition to\n   the color temperature shift) during the night; if omitted, defaults to false\n * windowfilterDisable - (optional) an `hs.window.filter` instance that will disable color adjustment\n   (and color inversion) whenever any window is allowed; alternatively, you can just provide a list of application\n   names (typically media apps and/or apps for color-sensitive work) and a windowfilter will be created\n   for you that disables color adjustment whenever one of these apps is focused\n * dayColorTemp - (optional) a number indicating the desired color temperature (in Kelvin) during the day cycle;\n   you can use this to maintain some degree of \"redshift\" during the day as well, or, if desired, you can\n   specify a value higher than 6500K (up to 10000K) for more bluish colors, although that's not recommended;\n   if omitted, defaults to 6500K, which disables color adjustment and restores your screens' original color profiles\n\nReturns:\n * None","examples":[],"file":"extensions/redshift/redshift.lua","lineno":"273","name":"start","notes":[],"parameters":[" * colorTemp - a number indicating the desired color temperature (Kelvin) during the night cycle; the recommended range is between 3600K and 1400K; lower values (minimum 1000K) result in a more pronounced adjustment"," * nightStart - a string in the format \"HH:MM\" (24-hour clock) or number of seconds after midnight (see `hs.timer.seconds()`) indicating when the night cycle should start"," * nightEnd - a string in the format \"HH:MM\" (24-hour clock) or number of seconds after midnight (see `hs.timer.seconds()`) indicating when the night cycle should end"," * transition - (optional) a string or number of seconds (see `hs.timer.seconds()`) indicating the duration of the transition to the night color temperature and back; if omitted, defaults to 1 hour"," * invertAtNight - (optional) a boolean indicating whether the colors should be inverted (in addition to the color temperature shift) during the night; if omitted, defaults to false"," * windowfilterDisable - (optional) an `hs.window.filter` instance that will disable color adjustment (and color inversion) whenever any window is allowed; alternatively, you can just provide a list of application names (typically media apps and/or apps for color-sensitive work) and a windowfilter will be created for you that disables color adjustment whenever one of these apps is focused"," * dayColorTemp - (optional) a number indicating the desired color temperature (in Kelvin) during the day cycle; you can use this to maintain some degree of \"redshift\" during the day as well, or, if desired, you can specify a value higher than 6500K (up to 10000K) for more bluish colors, although that's not recommended; if omitted, defaults to 6500K, which disables color adjustment and restores your screens' original color profiles"],"returns":[" * None"],"signature":"hs.redshift.start(colorTemp,nightStart,nightEnd[,transition[,invertAtNight[,windowfilterDisable[,dayColorTemp]]]])","stripped_doc":"","type":"Function"},"stop":{"def":"hs.redshift.stop()","desc":"Stops the module and disables color adjustment and color inversion","doc":"Stops the module and disables color adjustment and color inversion\n\nParameters:\n * None\n\nReturns:\n * None","examples":[],"file":"extensions/redshift/redshift.lua","lineno":"243","name":"stop","notes":[],"parameters":[" * None"],"returns":[" * None"],"signature":"hs.redshift.stop()","stripped_doc":"","type":"Function"},"toggle":{"def":"hs.redshift.toggle([v])","desc":"Sets or clears the user override for color temperature adjustment.","doc":"Sets or clears the user override for color temperature adjustment.\n\nParameters:\n * v - (optional) a boolean; if true, the override will enable color temperature adjustment on the given schedule; if false, the override will disable color temperature adjustment; if omitted or nil, it will toggle the override, i.e. clear it if it's currently enforced, or set it to the opposite of the current color temperature adjustment status otherwise.\n\nReturns:\n * None\n\nNotes:\n * This function should be bound to a hotkey, e.g.: `hs.hotkey.bind('ctrl-cmd','-','Redshift',hs.redshift.toggle)`","examples":[],"file":"extensions/redshift/redshift.lua","lineno":"218","name":"toggle","notes":[" * This function should be bound to a hotkey, e.g.: `hs.hotkey.bind('ctrl-cmd','-','Redshift',hs.redshift.toggle)`"],"parameters":[" * v - (optional) a boolean; if true, the override will enable color temperature adjustment on the given schedule; if false, the override will disable color temperature adjustment; if omitted or nil, it will toggle the override, i.e. clear it if it's currently enforced, or set it to the opposite of the current color temperature adjustment status otherwise."],"returns":[" * None"],"signature":"hs.redshift.toggle([v])","stripped_doc":"","type":"Function"},"toggleInvert":{"def":"hs.redshift.toggleInvert([v])","desc":"Sets or clears the user override for color inversion.","doc":"Sets or clears the user override for color inversion.\n\nParameters:\n * v - (optional) a boolean; if true, the override will invert the colors no matter what; if false, the override will disable color inversion no matter what; if omitted or nil, it will toggle the override, i.e. clear it if it's currently enforced, or set it to the opposite of the current color inversion status otherwise.\n\nReturns:\n * None\n\nNotes:\n * This function should be bound to a hotkey, e.g.: `hs.hotkey.bind('ctrl-cmd','=','Invert',hs.redshift.toggleInvert)`","examples":[],"file":"extensions/redshift/redshift.lua","lineno":"195","name":"toggleInvert","notes":[" * This function should be bound to a hotkey, e.g.: `hs.hotkey.bind('ctrl-cmd','=','Invert',hs.redshift.toggleInvert)`"],"parameters":[" * v - (optional) a boolean; if true, the override will invert the colors no matter what; if false, the override will disable color inversion no matter what; if omitted or nil, it will toggle the override, i.e. clear it if it's currently enforced, or set it to the opposite of the current color inversion status otherwise."],"returns":[" * None"],"signature":"hs.redshift.toggleInvert([v])","stripped_doc":"","type":"Function"}}