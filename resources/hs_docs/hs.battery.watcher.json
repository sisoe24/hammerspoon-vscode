{"new":{"def":"hs.battery.watcher.new(fn) -> watcher","desc":"Creates a battery watcher","doc":"Creates a battery watcher\n\nParameters:\n * A function that will be called when the battery state changes. The function should accept no arguments.\n\nReturns:\n * An `hs.battery.watcher` object\n\nNotes:\n * Because the callback function accepts no arguments, tracking of state of changing battery attributes is the responsibility of the user (see https://github.com/Hammerspoon/hammerspoon/issues/166 for discussion)","examples":[],"file":"extensions/battery/libbattery_watcher.m","lineno":"45","name":"new","notes":[" * Because the callback function accepts no arguments, tracking of state of changing battery attributes is the responsibility of the user (see https://github.com/Hammerspoon/hammerspoon/issues/166 for discussion)"],"parameters":[" * A function that will be called when the battery state changes. The function should accept no arguments."],"returns":[" * An `hs.battery.watcher` object"],"signature":"hs.battery.watcher.new(fn) -> watcher","stripped_doc":"","type":"Constructor"},"start":{"def":"hs.battery.watcher:start() -> self","desc":"Starts the battery watcher","doc":"Starts the battery watcher\n\nParameters:\n * None\n\nReturns:\n * The `hs.battery.watcher` object","examples":[],"file":"extensions/battery/libbattery_watcher.m","lineno":"76","name":"start","notes":[],"parameters":[" * None"],"returns":[" * The `hs.battery.watcher` object"],"signature":"hs.battery.watcher:start() -> self","stripped_doc":"","type":"Method"},"stop":{"def":"hs.battery.watcher:stop() -> self","desc":"Stops the battery watcher","doc":"Stops the battery watcher\n\nParameters:\n * None\n\nReturns:\n * The `hs.battery.watcher` object","examples":[],"file":"extensions/battery/libbattery_watcher.m","lineno":"98","name":"stop","notes":[],"parameters":[" * None"],"returns":[" * The `hs.battery.watcher` object"],"signature":"hs.battery.watcher:stop() -> self","stripped_doc":"","type":"Method"}}