{"hsminweb":{"type":"Module","doc":"Minimalist Web Server for Hammerspoon\n\nThis module aims to be a minimal, but (mostly) standards-compliant web server for use within Hammerspoon.  Expanding upon the Hammerspoon module, `hs.httpserver`, this module adds support for serving static pages stored at a specified document root as well as serving dynamic content from Lua Template Files interpreted within the Hammerspoon environment and external executables which support the CGI/1.1 framework.\n\nThis module aims to provide a fully functional, and somewhat extendable, web server foundation, but will never replace a true dedicated web server application.  Some limitations include:\n * It is single threaded within the Hammerspoon environment and can only serve one resource at a time\n * As with all Hammerspoon modules, while dynamic content is being generated, Hammerspoon cannot respond to other callback functions -- a complex or time consuming script may block other Hammerspoon activity in a noticeable manner.\n * All document requests and responses are handled in memory only -- because of this, maximum resource size is limited to what you are willing to allow Hammerspoon to consume and memory limitations of your computer.\n\nWhile some of these limitations may be mitigated to an extent in the future with additional modules and additions to `hs.httpserver`, Hammerspoon's web serving capabilities will never replace a dedicated web server when volume or speed is required.\n\nAn example web site is provided in the `hsdocs` folder of the `hs.doc` module.  This web site can serve documentation for Hammerspoon dynamically generated from the json file included with the Hammerspoon application for internal documentation.  It serves as a basic example of what is possible with this module.\n\nYou can start this web server by typing the following into your Hammerspoon console:\n`require(\"hs.doc.hsdocs\").start()` and then visiting `http://localhost:12345/` with your web browser.","def":"-> hs.httpserver.hsminweb"},"getInterface":{"def":"hs.httpserver:getInterface() -> string or nil","desc":"Gets the network interface the server is configured to listen on","doc":"Gets the network interface the server is configured to listen on\n\nParameters:\n * None\n\nReturns:\n * A string containing the network interface name, or nil if the server will listen on all interfaces","examples":[],"file":"extensions/httpserver/libhttpserver.m","lineno":"647","name":"getInterface","notes":[],"parameters":[" * None"],"returns":[" * A string containing the network interface name, or nil if the server will listen on all interfaces"],"signature":"hs.httpserver:getInterface() -> string or nil","stripped_doc":"","type":"Method"},"getName":{"def":"hs.httpserver:getName() -> string","desc":"Gets the Bonjour name the server is configured to advertise itself as","doc":"Gets the Bonjour name the server is configured to advertise itself as\n\nParameters:\n * None\n\nReturns:\n * A string containing the Bonjour name of this server\n\nNotes:\n * This is not the hostname of the server, just its name in Bonjour service lists (e.g. Safari's Bonjour bookmarks menu)","examples":[],"file":"extensions/httpserver/libhttpserver.m","lineno":"689","name":"getName","notes":[" * This is not the hostname of the server, just its name in Bonjour service lists (e.g. Safari's Bonjour bookmarks menu)"],"parameters":[" * None"],"returns":[" * A string containing the Bonjour name of this server"],"signature":"hs.httpserver:getName() -> string","stripped_doc":"","type":"Method"},"getPort":{"def":"hs.httpserver:getPort() -> number","desc":"Gets the TCP port the server is configured to listen on","doc":"Gets the TCP port the server is configured to listen on\n\nParameters:\n * None\n\nReturns:\n * A number containing the TCP port","examples":[],"file":"extensions/httpserver/libhttpserver.m","lineno":"616","name":"getPort","notes":[],"parameters":[" * None"],"returns":[" * A number containing the TCP port"],"signature":"hs.httpserver:getPort() -> number","stripped_doc":"","type":"Method"},"maxBodySize":{"def":"hs.httpserver:maxBodySize([size]) -> object | current-value","desc":"Get or set the maximum allowed body size for an incoming HTTP request.","doc":"Get or set the maximum allowed body size for an incoming HTTP request.\n\nParameters:\n * size - An optional integer value specifying the maximum body size allowed for an incoming HTTP request in bytes.  Defaults to 10485760 (10 MB).\n\nReturns:\n * If a new size is specified, returns the `hs.httpserver` object; otherwise the current value.\n\nNotes:\n * Because the Hammerspoon http server processes incoming requests completely in memory, this method puts a limit on the maximum size for a POST or PUT request.","examples":[],"file":"extensions/httpserver/libhttpserver.m","lineno":"513","name":"maxBodySize","notes":[" * Because the Hammerspoon http server processes incoming requests completely in memory, this method puts a limit on the maximum size for a POST or PUT request."],"parameters":[" * size - An optional integer value specifying the maximum body size allowed for an incoming HTTP request in bytes.  Defaults to 10485760 (10 MB)."],"returns":[" * If a new size is specified, returns the `hs.httpserver` object; otherwise the current value."],"signature":"hs.httpserver:maxBodySize([size]) -> object | current-value","stripped_doc":"","type":"Method"},"new":{"def":"hs.httpserver.new([ssl], [bonjour]) -> object","desc":"Creates a new HTTP or HTTPS server","doc":"Creates a new HTTP or HTTPS server\n\nParameters:\n * ssl     - An optional boolean. If true, the server will start using HTTPS. Defaults to false.\n * bonjour - An optional boolean. If true, the server will advertise itself with Bonjour.  Defaults to true. Note that in order to change this, you must supply a true or false value for the `ssl` argument.\n\nReturns:\n * An `hs.httpserver` object\n\nNotes:\n * By default, the server will start on a random TCP port and advertise itself with Bonjour. You can check the port with `hs.httpserver:getPort()`\n * By default, the server will listen on all network interfaces. You can override this with `hs.httpserver:setInterface()` before starting the server\n * Currently, in HTTPS mode, the server will use a self-signed certificate, which most browsers will warn about. If you want/need to be able to use `hs.httpserver` with a certificate signed by a trusted Certificate Authority, please file an bug on Hammerspoon requesting support for this.","examples":[],"file":"extensions/httpserver/libhttpserver.m","lineno":"374","name":"new","notes":[" * By default, the server will start on a random TCP port and advertise itself with Bonjour. You can check the port with `hs.httpserver:getPort()`"," * By default, the server will listen on all network interfaces. You can override this with `hs.httpserver:setInterface()` before starting the server"," * Currently, in HTTPS mode, the server will use a self-signed certificate, which most browsers will warn about. If you want/need to be able to use `hs.httpserver` with a certificate signed by a trusted Certificate Authority, please file an bug on Hammerspoon requesting support for this."],"parameters":[" * ssl     - An optional boolean. If true, the server will start using HTTPS. Defaults to false."," * bonjour - An optional boolean. If true, the server will advertise itself with Bonjour.  Defaults to true. Note that in order to change this, you must supply a true or false value for the `ssl` argument."],"returns":[" * An `hs.httpserver` object"],"signature":"hs.httpserver.new([ssl], [bonjour]) -> object","stripped_doc":"","type":"Function"},"send":{"def":"hs.httpserver:send(message) -> object","desc":"Sends a message to the websocket client","doc":"Sends a message to the websocket client\n\nParameters:\n * message - A string containing the message to send\n\nReturns:\n * The `hs.httpserver` object","examples":[],"file":"extensions/httpserver/libhttpserver.m","lineno":"446","name":"send","notes":[],"parameters":[" * message - A string containing the message to send"],"returns":[" * The `hs.httpserver` object"],"signature":"hs.httpserver:send(message) -> object","stripped_doc":"","type":"Method"},"setCallback":{"def":"hs.httpserver:setCallback([callback]) -> object","desc":"Sets the request handling callback for an HTTP server object","doc":"Sets the request handling callback for an HTTP server object\n\nParameters:\n * callback - An optional function that will be called to process each incoming HTTP request, or nil to remove an existing callback. See the notes section below for more information about this callback\n\nReturns:\n * The `hs.httpserver` object\n\nNotes:\n * The callback will be passed four arguments:\n  * A string containing the type of request (i.e. `GET`/`POST`/`DELETE`/etc)\n  * A string containing the path element of the request (e.g. `/index.html`)\n  * A table containing the request headers\n  * A string containing the raw contents of the request body, or the empty string if no body is included in the request.\n * The callback *must* return three values:\n  * A string containing the body of the response\n  * An integer containing the response code (e.g. 200 for a successful request)\n  * A table containing additional HTTP headers to set (or an empty table, `{}`, if no extra headers are required)\n\nNotes:\n * A POST request, often used by HTML forms, will store the contents of the form in the body of the request.","examples":[],"file":"extensions/httpserver/libhttpserver.m","lineno":"466","name":"setCallback","notes":[" * The callback will be passed four arguments:","  * A string containing the type of request (i.e. `GET`/`POST`/`DELETE`/etc)","  * A string containing the path element of the request (e.g. `/index.html`)","  * A table containing the request headers","  * A string containing the raw contents of the request body, or the empty string if no body is included in the request."," * The callback *must* return three values:","  * A string containing the body of the response","  * An integer containing the response code (e.g. 200 for a successful request)","  * A table containing additional HTTP headers to set (or an empty table, `{}`, if no extra headers are required)",""," * A POST request, often used by HTML forms, will store the contents of the form in the body of the request."],"parameters":[" * callback - An optional function that will be called to process each incoming HTTP request, or nil to remove an existing callback. See the notes section below for more information about this callback"],"returns":[" * The `hs.httpserver` object"],"signature":"hs.httpserver:setCallback([callback]) -> object","stripped_doc":"","type":"Method"},"setInterface":{"def":"hs.httpserver:setInterface(interface) -> object","desc":"Sets the network interface the server is configured to listen on","doc":"Sets the network interface the server is configured to listen on\n\nParameters:\n * interface - A string containing an interface name\n\nReturns:\n * The `hs.httpserver` object\n\nNotes:\n * As well as real interface names (e.g. `en0`) the following values are valid:\n  * An IP address of one of your interfaces\n  * localhost\n  * loopback\n  * nil (which means all interfaces, and is the default)","examples":[],"file":"extensions/httpserver/libhttpserver.m","lineno":"662","name":"setInterface","notes":[" * As well as real interface names (e.g. `en0`) the following values are valid:","  * An IP address of one of your interfaces","  * localhost","  * loopback","  * nil (which means all interfaces, and is the default)"],"parameters":[" * interface - A string containing an interface name"],"returns":[" * The `hs.httpserver` object"],"signature":"hs.httpserver:setInterface(interface) -> object","stripped_doc":"","type":"Method"},"setName":{"def":"hs.httpserver:setName(name) -> object","desc":"Sets the Bonjour name the server should advertise itself as","doc":"Sets the Bonjour name the server should advertise itself as\n\nParameters:\n * name - A string containing the Bonjour name for the server\n\nReturns:\n * The `hs.httpserver` object\n\nNotes:\n * This is not the hostname of the server, just its name in Bonjour service lists (e.g. Safari's Bonjour bookmarks menu)","examples":[],"file":"extensions/httpserver/libhttpserver.m","lineno":"707","name":"setName","notes":[" * This is not the hostname of the server, just its name in Bonjour service lists (e.g. Safari's Bonjour bookmarks menu)"],"parameters":[" * name - A string containing the Bonjour name for the server"],"returns":[" * The `hs.httpserver` object"],"signature":"hs.httpserver:setName(name) -> object","stripped_doc":"","type":"Method"},"setPassword":{"def":"hs.httpserver:setPassword([password]) -> object","desc":"Sets a password for an HTTP server object","doc":"Sets a password for an HTTP server object\n\nParameters:\n * password - An optional string that contains the server password, or nil to remove an existing password\n\nReturns:\n * The `hs.httpserver` object\n\nNotes:\n * It is not currently possible to set multiple passwords for different users, or passwords only on specific paths","examples":[],"file":"extensions/httpserver/libhttpserver.m","lineno":"539","name":"setPassword","notes":[" * It is not currently possible to set multiple passwords for different users, or passwords only on specific paths"],"parameters":[" * password - An optional string that contains the server password, or nil to remove an existing password"],"returns":[" * The `hs.httpserver` object"],"signature":"hs.httpserver:setPassword([password]) -> object","stripped_doc":"","type":"Method"},"setPort":{"def":"hs.httpserver:setPort(port) -> object","desc":"Sets the TCP port the server is configured to listen on","doc":"Sets the TCP port the server is configured to listen on\n\nParameters:\n * port - An integer containing a TCP port to listen on\n\nReturns:\n * The `hs.httpserver` object","examples":[],"file":"extensions/httpserver/libhttpserver.m","lineno":"631","name":"setPort","notes":[],"parameters":[" * port - An integer containing a TCP port to listen on"],"returns":[" * The `hs.httpserver` object"],"signature":"hs.httpserver:setPort(port) -> object","stripped_doc":"","type":"Method"},"start":{"def":"hs.httpserver:start() -> object","desc":"Starts an HTTP server object","doc":"Starts an HTTP server object\n\nParameters:\n * None\n\nReturns:\n * The `hs.httpserver` object","examples":[],"file":"extensions/httpserver/libhttpserver.m","lineno":"573","name":"start","notes":[],"parameters":[" * None"],"returns":[" * The `hs.httpserver` object"],"signature":"hs.httpserver:start() -> object","stripped_doc":"","type":"Method"},"stop":{"def":"hs.httpserver:stop() -> object","desc":"Stops an HTTP server object","doc":"Stops an HTTP server object\n\nParameters:\n * None\n\nReturns:\n * The `hs.httpserver` object","examples":[],"file":"extensions/httpserver/libhttpserver.m","lineno":"599","name":"stop","notes":[],"parameters":[" * None"],"returns":[" * The `hs.httpserver` object"],"signature":"hs.httpserver:stop() -> object","stripped_doc":"","type":"Method"},"websocket":{"def":"hs.httpserver:websocket(path, callback) -> object","desc":"Enables a websocket endpoint on the HTTP server","doc":"Enables a websocket endpoint on the HTTP server\n\nParameters:\n * path - A string containing the websocket path such as '/ws'\n * callback - A function returning a string for each received websocket message\n\nReturns:\n * The `hs.httpserver` object\n\nNotes:\n * The callback is passed one string parameter containing the received message\n * The callback must return a string containing the response message\n * Given a path '/mysock' and a port of 8000, the websocket URL is as follows:\n  * ws://localhost:8000/mysock\n  * wss://localhost:8000/mysock (if SSL enabled)","examples":[],"file":"extensions/httpserver/libhttpserver.m","lineno":"415","name":"websocket","notes":[" * The callback is passed one string parameter containing the received message"," * The callback must return a string containing the response message"," * Given a path '/mysock' and a port of 8000, the websocket URL is as follows:","  * ws://localhost:8000/mysock","  * wss://localhost:8000/mysock (if SSL enabled)"],"parameters":[" * path - A string containing the websocket path such as '/ws'"," * callback - A function returning a string for each received websocket message"],"returns":[" * The `hs.httpserver` object"],"signature":"hs.httpserver:websocket(path, callback) -> object","stripped_doc":"","type":"Method"}}
