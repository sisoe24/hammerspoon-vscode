{"allVolumes":{"def":"hs.fs.volume.allVolumes([showHidden]) -> table","desc":"Returns a table of information about disk volumes attached to the system","doc":"Returns a table of information about disk volumes attached to the system\n\nParameters:\n * showHidden - An optional boolean, true to show hidden volumes, false to not show hidden volumes. Defaults to false.\n\nReturns:\n * A table of information, where the keys are the paths of disk volumes\n\nNotes:\n * This is an alias for `hs.host.volumeInformation()`\n * The possible keys in the table are:\n  * NSURLVolumeTotalCapacityKey - Size of the volume in bytes\n  * NSURLVolumeAvailableCapacityKey - Available space on the volume in bytes\n  * NSURLVolumeIsAutomountedKey - Boolean indicating if the volume was automounted\n  * NSURLVolumeIsBrowsableKey - Boolean indicating if the volume can be browsed\n  * NSURLVolumeIsEjectableKey - Boolean indicating if the volume should be ejected before its media is removed\n  * NSURLVolumeIsInternalKey - Boolean indicating if the volume is an internal drive or an external drive\n  * NSURLVolumeIsLocalKey - Boolean indicating if the volume is a local or remote drive\n  * NSURLVolumeIsReadOnlyKey - Boolean indicating if the volume is read only\n  * NSURLVolumeIsRemovableKey - Boolean indicating if the volume's media can be physically ejected from the drive (e.g. a DVD)\n  * NSURLVolumeMaximumFileSizeKey - Maximum file size the volume can support, in bytes\n  * NSURLVolumeUUIDStringKey - The UUID of volume's filesystem\n  * NSURLVolumeURLForRemountingKey - For remote volumes, the network URL of the volume\n  * NSURLVolumeLocalizedNameKey - Localized version of the volume's name\n  * NSURLVolumeNameKey - The volume's name\n  * NSURLVolumeLocalizedFormatDescriptionKey - Localized description of the volume\n* Not all keys will be present for all volumes\n* The meanings of NSURLVolumeIsEjectableKey and NSURLVolumeIsRemovableKey are not generally useful for determining if a drive is removable in the modern sense (e.g. a USB drive) as much of this terminology dates back to when USB didn't exist and removable drives were things like Floppy/DVD drives. If you're trying to determine if a drive is not fixed into the computer, you may need to use a combination of these keys, but which exact combination you should use, is not consistent across macOS versions.","examples":[],"file":"extensions/fs/fs.lua","lineno":"35","name":"allVolumes","notes":[" * This is an alias for `hs.host.volumeInformation()`"," * The possible keys in the table are:","  * NSURLVolumeTotalCapacityKey - Size of the volume in bytes","  * NSURLVolumeAvailableCapacityKey - Available space on the volume in bytes","  * NSURLVolumeIsAutomountedKey - Boolean indicating if the volume was automounted","  * NSURLVolumeIsBrowsableKey - Boolean indicating if the volume can be browsed","  * NSURLVolumeIsEjectableKey - Boolean indicating if the volume should be ejected before its media is removed","  * NSURLVolumeIsInternalKey - Boolean indicating if the volume is an internal drive or an external drive","  * NSURLVolumeIsLocalKey - Boolean indicating if the volume is a local or remote drive","  * NSURLVolumeIsReadOnlyKey - Boolean indicating if the volume is read only","  * NSURLVolumeIsRemovableKey - Boolean indicating if the volume's media can be physically ejected from the drive (e.g. a DVD)","  * NSURLVolumeMaximumFileSizeKey - Maximum file size the volume can support, in bytes","  * NSURLVolumeUUIDStringKey - The UUID of volume's filesystem","  * NSURLVolumeURLForRemountingKey - For remote volumes, the network URL of the volume","  * NSURLVolumeLocalizedNameKey - Localized version of the volume's name","  * NSURLVolumeNameKey - The volume's name","  * NSURLVolumeLocalizedFormatDescriptionKey - Localized description of the volume","* Not all keys will be present for all volumes","* The meanings of NSURLVolumeIsEjectableKey and NSURLVolumeIsRemovableKey are not generally useful for determining if a drive is removable in the modern sense (e.g. a USB drive) as much of this terminology dates back to when USB didn't exist and removable drives were things like Floppy/DVD drives. If you're trying to determine if a drive is not fixed into the computer, you may need to use a combination of these keys, but which exact combination you should use, is not consistent across macOS versions."],"parameters":[" * showHidden - An optional boolean, true to show hidden volumes, false to not show hidden volumes. Defaults to false."],"returns":[" * A table of information, where the keys are the paths of disk volumes"],"signature":"hs.fs.volume.allVolumes([showHidden]) -> table","stripped_doc":"","type":"Function"},"didMount":{"def":"hs.fs.volume.didMount","desc":"A volume was mounted","doc":"A volume was mounted","file":"extensions/fs/libfs_volume.m","lineno":"12","name":"didMount","signature":"hs.fs.volume.didMount","stripped_doc":"","type":"Constant"},"didRename":{"def":"hs.fs.volume.didRename","desc":"A volume changed either its name or mountpoint (or more likely, both)","doc":"A volume changed either its name or mountpoint (or more likely, both)","file":"extensions/fs/libfs_volume.m","lineno":"24","name":"didRename","signature":"hs.fs.volume.didRename","stripped_doc":"","type":"Constant"},"didUnmount":{"def":"hs.fs.volume.didUnmount","desc":"A volume was unmounted","doc":"A volume was unmounted","file":"extensions/fs/libfs_volume.m","lineno":"16","name":"didUnmount","signature":"hs.fs.volume.didUnmount","stripped_doc":"","type":"Constant"},"eject":{"def":"hs.fs.volume.eject(path) -> boolean,string","desc":"Unmounts and ejects a volume","doc":"Unmounts and ejects a volume\n\nParameters:\n * path - An absolute path to the volume you wish to eject\n\nReturns:\n * A boolean, true if the volume was ejected, otherwise false\n * A string, empty if the volume was ejected, otherwise it will contain the error message","examples":[],"file":"extensions/fs/libfs_volume.m","lineno":"120","name":"eject","notes":[],"parameters":[" * path - An absolute path to the volume you wish to eject"],"returns":[" * A boolean, true if the volume was ejected, otherwise false"," * A string, empty if the volume was ejected, otherwise it will contain the error message"],"signature":"hs.fs.volume.eject(path) -> boolean,string","stripped_doc":"","type":"Function"},"new":{"def":"hs.fs.volume.new(fn) -> watcher","desc":"Creates a watcher object for volume events","doc":"Creates a watcher object for volume events\n\nParameters:\n * fn - A function that will be called when volume events happen. It should accept two parameters:\n  * An event type (see the constants defined above)\n  * A table that will contain relevant information\n\nReturns:\n * An `hs.fs.volume` object","examples":[],"file":"extensions/fs/libfs_volume.m","lineno":"148","name":"new","notes":[],"parameters":[" * fn - A function that will be called when volume events happen. It should accept two parameters:\n   * An event type (see the constants defined above)\n   * A table that will contain relevant information"],"returns":[" * An `hs.fs.volume` object"],"signature":"hs.fs.volume.new(fn) -> watcher","stripped_doc":"","type":"Constructor"},"start":{"def":"hs.fs.volume:start()","desc":"Starts the volume watcher","doc":"Starts the volume watcher\n\nParameters:\n * None\n\nReturns:\n * An `hs.fs.volume` object","examples":[],"file":"extensions/fs/libfs_volume.m","lineno":"208","name":"start","notes":[],"parameters":[" * None"],"returns":[" * An `hs.fs.volume` object"],"signature":"hs.fs.volume:start()","stripped_doc":"","type":"Method"},"stop":{"def":"hs.fs.volume:stop()","desc":"Stops the volume watcher","doc":"Stops the volume watcher\n\nParameters:\n * None\n\nReturns:\n * An `hs.fs.volume` object","examples":[],"file":"extensions/fs/libfs_volume.m","lineno":"232","name":"stop","notes":[],"parameters":[" * None"],"returns":[" * An `hs.fs.volume` object"],"signature":"hs.fs.volume:stop()","stripped_doc":"","type":"Method"},"willUnmount":{"def":"hs.fs.volume.willUnmount","desc":"A volume is about to be unmounted","doc":"A volume is about to be unmounted","file":"extensions/fs/libfs_volume.m","lineno":"20","name":"willUnmount","signature":"hs.fs.volume.willUnmount","stripped_doc":"","type":"Constant"}}