{"d":{"def":"hs.logger:d(...)","desc":"Logs debug info to the console","doc":"Logs debug info to the console\n\nParameters:\n * ... - one or more message strings\n\nReturns:\n * None","examples":[],"file":"extensions/logger/logger.lua","lineno":"352","name":"d","notes":[],"parameters":[" * ... - one or more message strings"],"returns":[" * None"],"signature":"hs.logger:d(...)","stripped_doc":"","type":"Method"},"defaultLogLevel":{"def":"hs.logger.defaultLogLevel","desc":"Default log level for new logger instances.","doc":"Default log level for new logger instances.\n\nThe starting value is 'warning'; set this (to e.g. 'info') at the top of your `init.lua` to affect\nall logger instances created without specifying a `loglevel` parameter","file":"extensions/logger/logger.lua","lineno":"203","name":"defaultLogLevel","signature":"hs.logger.defaultLogLevel","stripped_doc":"The starting value is 'warning'; set this (to e.g. 'info') at the top of your `init.lua` to affect\nall logger instances created without specifying a `loglevel` parameter","type":"Variable"},"df":{"def":"hs.logger:df(fmt,...)","desc":"Logs formatted debug info to the console","doc":"Logs formatted debug info to the console\n\nParameters:\n * fmt - formatting string as per string.format\n * ... - arguments to fmt\n\nReturns:\n * None","examples":[],"file":"extensions/logger/logger.lua","lineno":"362","name":"df","notes":[],"parameters":[" * fmt - formatting string as per string.format"," * ... - arguments to fmt"],"returns":[" * None"],"signature":"hs.logger:df(fmt,...)","stripped_doc":"","type":"Method"},"e":{"def":"hs.logger:e(...)","desc":"Logs an error to the console","doc":"Logs an error to the console\n\nParameters:\n * ... - one or more message strings\n\nReturns:\n * None","examples":[],"file":"extensions/logger/logger.lua","lineno":"289","name":"e","notes":[],"parameters":[" * ... - one or more message strings"],"returns":[" * None"],"signature":"hs.logger:e(...)","stripped_doc":"","type":"Method"},"ef":{"def":"hs.logger:ef(fmt,...)","desc":"Logs a formatted error to the console","doc":"Logs a formatted error to the console\n\nParameters:\n * fmt - formatting string as per string.format\n * ... - arguments to fmt\n\nReturns:\n * None","examples":[],"file":"extensions/logger/logger.lua","lineno":"299","name":"ef","notes":[],"parameters":[" * fmt - formatting string as per string.format"," * ... - arguments to fmt"],"returns":[" * None"],"signature":"hs.logger:ef(fmt,...)","stripped_doc":"","type":"Method"},"f":{"def":"hs.logger:f(fmt,...)","desc":"Logs formatted info to the console","doc":"Logs formatted info to the console\n\nParameters:\n * fmt - formatting string as per string.format\n * ... - arguments to fmt\n\nReturns:\n * None","examples":[],"file":"extensions/logger/logger.lua","lineno":"341","name":"f","notes":[],"parameters":[" * fmt - formatting string as per string.format"," * ... - arguments to fmt"],"returns":[" * None"],"signature":"hs.logger:f(fmt,...)","stripped_doc":"","type":"Method"},"getLogLevel":{"def":"hs.logger:getLogLevel() -> number","desc":"Gets the log level of the logger instance","doc":"Gets the log level of the logger instance\n\nParameters:\n * None\n\nReturns:\n * The log level of this logger as a number between 0 and 5","examples":[],"file":"extensions/logger/logger.lua","lineno":"275","name":"getLogLevel","notes":[],"parameters":[" * None"],"returns":[" * The log level of this logger as a number between 0 and 5"],"signature":"hs.logger:getLogLevel() -> number","stripped_doc":"","type":"Method"},"history":{"def":"hs.logger.history() -> list of log entries","desc":"Returns the global log history","doc":"Returns the global log history\n\nParameters:\n * None\n\nReturns:\n * a list of (at most `hs.logger.historySize()`) log entries produced by all the logger instances, in chronological order;\n   each entry is a table with the following fields:\n   * time - timestamp in seconds since the epoch\n   * level - a number between 1 (error) and 5 (verbose)\n   * id - a string containing the id of the logger instance that produced this entry\n   * message - a string containing the logged message","examples":[],"file":"extensions/logger/logger.lua","lineno":"94","name":"history","notes":[],"parameters":[" * None"],"returns":[" * a list of (at most `hs.logger.historySize()`) log entries produced by all the logger instances, in chronological order;","   each entry is a table with the following fields:","   * time - timestamp in seconds since the epoch","   * level - a number between 1 (error) and 5 (verbose)","   * id - a string containing the id of the logger instance that produced this entry","   * message - a string containing the logged message"],"signature":"hs.logger.history() -> list of log entries","stripped_doc":"","type":"Function"},"historySize":{"def":"hs.logger.historySize([size]) -> number","desc":"Sets or gets the global log history size","doc":"Sets or gets the global log history size\n\nParameters:\n * size - (optional) the desired number of log entries to keep in the history;\n   if omitted, will return the current size; the starting value is 0 (disabled)\n\nReturns:\n * the current or new history size\n\nNotes:\n * if you change history size (other than from 0) after creating any logger instances, things will likely break","examples":[],"file":"extensions/logger/logger.lua","lineno":"69","name":"historySize","notes":[" * if you change history size (other than from 0) after creating any logger instances, things will likely break"],"parameters":[" * size - (optional) the desired number of log entries to keep in the history; if omitted, will return the current size; the starting value is 0 (disabled)"],"returns":[" * the current or new history size"],"signature":"hs.logger.historySize([size]) -> number","stripped_doc":"","type":"Function"},"i":{"def":"hs.logger:i(...)","desc":"Logs info to the console","doc":"Logs info to the console\n\nParameters:\n * ... - one or more message strings\n\nReturns:\n * None","examples":[],"file":"extensions/logger/logger.lua","lineno":"331","name":"i","notes":[],"parameters":[" * ... - one or more message strings"],"returns":[" * None"],"signature":"hs.logger:i(...)","stripped_doc":"","type":"Method"},"level":{"def":"hs.logger.level","desc":"The log level of the logger instance, as a number between 0 and 5","doc":"The log level of the logger instance, as a number between 0 and 5","file":"extensions/logger/logger.lua","lineno":"285","name":"level","signature":"hs.logger.level","stripped_doc":"","type":"Field"},"new":{"def":"hs.logger.new(id, loglevel) -> logger","desc":"Creates a new logger instance","doc":"Creates a new logger instance\n\nParameters:\n * id - a string identifier for the instance (usually the module name)\n * loglevel - (optional) can be 'nothing', 'error', 'warning', 'info', 'debug', or 'verbose', or a corresponding number\n   between 0 and 5; uses `hs.logger.defaultLogLevel` if omitted\n\nReturns:\n * the new logger instance\n\nNotes:\n * the logger instance created by this method is not a regular object, but a plain table with \"static\" functions;\n   therefore, do not use the colon syntax for so-called \"methods\" in this module (as in `mylogger:setLogLevel(3)`);\n   you must instead use the regular dot syntax: `mylogger.setLogLevel(3)`\n\nExample:\n```lua\nlocal log = hs.logger.new('mymodule','debug')\nlog.i('Initializing') -- will print \"[mymodule] Initializing\" to the console```","examples":[],"file":"extensions/logger/logger.lua","lineno":"211","name":"new","notes":[" * the logger instance created by this method is not a regular object, but a plain table with \"static\" functions;","   therefore, do not use the colon syntax for so-called \"methods\" in this module (as in `mylogger:setLogLevel(3)`);","   you must instead use the regular dot syntax: `mylogger.setLogLevel(3)`","","Example:","```lua","local log = hs.logger.new('mymodule','debug')","log.i('Initializing') -- will print \"[mymodule] Initializing\" to the console```"],"parameters":[" * id - a string identifier for the instance (usually the module name)"," * loglevel - (optional) can be 'nothing', 'error', 'warning', 'info', 'debug', or 'verbose', or a corresponding number between 0 and 5; uses `hs.logger.defaultLogLevel` if omitted"],"returns":[" * the new logger instance"],"signature":"hs.logger.new(id, loglevel) -> logger","stripped_doc":"Example:\n```lua\nlocal log = hs.logger.new('mymodule','debug')\nlog.i('Initializing') -- will print \"[mymodule] Initializing\" to the console```","type":"Function"},"printHistory":{"def":"hs.logger.printHistory([entries[, level[, filter[, caseSensitive]]]])","desc":"Prints the global log history to the console","doc":"Prints the global log history to the console\n\nParameters:\n * entries - (optional) the maximum number of entries to print; if omitted, all entries in the history will be printed\n * level - (optional) the desired log level (see `hs.logger:setLogLevel()`); if omitted, defaults to `verbose`\n * filter - (optional) a string to filter the entries (by logger id or message) via `string.find` plain matching\n * caseSensitive - (optional) if true, filtering is case sensitive\n\nReturns:\n * None","examples":[],"file":"extensions/logger/logger.lua","lineno":"139","name":"printHistory","notes":[],"parameters":[" * entries - (optional) the maximum number of entries to print; if omitted, all entries in the history will be printed"," * level - (optional) the desired log level (see `hs.logger:setLogLevel()`); if omitted, defaults to `verbose`"," * filter - (optional) a string to filter the entries (by logger id or message) via `string.find` plain matching"," * caseSensitive - (optional) if true, filtering is case sensitive"],"returns":[" * None"],"signature":"hs.logger.printHistory([entries[, level[, filter[, caseSensitive]]]])","stripped_doc":"","type":"Function"},"setGlobalLogLevel":{"def":"hs.logger.setGlobalLogLevel(lvl)","desc":"Sets the log level for all logger instances (including objects' loggers)","doc":"Sets the log level for all logger instances (including objects' loggers)\n\nParameters:\n * lvl\n\nReturns:\n * None","examples":[],"file":"extensions/logger/logger.lua","lineno":"30","name":"setGlobalLogLevel","notes":[],"parameters":[" * lvl"],"returns":[" * None"],"signature":"hs.logger.setGlobalLogLevel(lvl)","stripped_doc":"","type":"Function"},"setLogLevel":{"def":"hs.logger:setLogLevel(loglevel)","desc":"Sets the log level of the logger instance","doc":"Sets the log level of the logger instance\n\nParameters:\n * loglevel - can be 'nothing', 'error', 'warning', 'info', 'debug', or 'verbose'; or a corresponding number between 0 and 5\n\nReturns:\n * None","examples":[],"file":"extensions/logger/logger.lua","lineno":"265","name":"setLogLevel","notes":[],"parameters":[" * loglevel - can be 'nothing', 'error', 'warning', 'info', 'debug', or 'verbose'; or a corresponding number between 0 and 5"],"returns":[" * None"],"signature":"hs.logger:setLogLevel(loglevel)","stripped_doc":"","type":"Method"},"setModulesLogLevel":{"def":"hs.logger.setModulesLogLevel(lvl)","desc":"Sets the log level for all currently loaded modules","doc":"Sets the log level for all currently loaded modules\n\nParameters:\n * lvl\n\nReturns:\n * None\n\nNotes:\n * This function only affects *module*-level loggers, object instances with their own loggers (e.g. windowfilters) won't be affected;\n   you can use `hs.logger.setGlobalLogLevel()` for those","examples":[],"file":"extensions/logger/logger.lua","lineno":"46","name":"setModulesLogLevel","notes":[" * This function only affects *module*-level loggers, object instances with their own loggers (e.g. windowfilters) won't be affected;","   you can use `hs.logger.setGlobalLogLevel()` for those"],"parameters":[" * lvl"],"returns":[" * None"],"signature":"hs.logger.setModulesLogLevel(lvl)","stripped_doc":"","type":"Function"},"v":{"def":"hs.logger:v(...)","desc":"Logs verbose info to the console","doc":"Logs verbose info to the console\n\nParameters:\n * ... - one or more message strings\n\nReturns:\n * None","examples":[],"file":"extensions/logger/logger.lua","lineno":"373","name":"v","notes":[],"parameters":[" * ... - one or more message strings"],"returns":[" * None"],"signature":"hs.logger:v(...)","stripped_doc":"","type":"Method"},"vf":{"def":"hs.logger:vf(fmt,...)","desc":"Logs formatted verbose info to the console","doc":"Logs formatted verbose info to the console\n\nParameters:\n * fmt - formatting string as per string.format\n * ... - arguments to fmt\n\nReturns:\n * None","examples":[],"file":"extensions/logger/logger.lua","lineno":"383","name":"vf","notes":[],"parameters":[" * fmt - formatting string as per string.format"," * ... - arguments to fmt"],"returns":[" * None"],"signature":"hs.logger:vf(fmt,...)","stripped_doc":"","type":"Method"},"w":{"def":"hs.logger:w(...)","desc":"Logs a warning to the console","doc":"Logs a warning to the console\n\nParameters:\n * ... - one or more message strings\n\nReturns:\n * None","examples":[],"file":"extensions/logger/logger.lua","lineno":"310","name":"w","notes":[],"parameters":[" * ... - one or more message strings"],"returns":[" * None"],"signature":"hs.logger:w(...)","stripped_doc":"","type":"Method"},"wf":{"def":"hs.logger:wf(fmt,...)","desc":"Logs a formatted warning to the console","doc":"Logs a formatted warning to the console\n\nParameters:\n * fmt - formatting string as per string.format\n * ... - arguments to fmt\n\nReturns:\n * None","examples":[],"file":"extensions/logger/logger.lua","lineno":"320","name":"wf","notes":[],"parameters":[" * fmt - formatting string as per string.format"," * ... - arguments to fmt"],"returns":[" * None"],"signature":"hs.logger:wf(fmt,...)","stripped_doc":"","type":"Method"}}