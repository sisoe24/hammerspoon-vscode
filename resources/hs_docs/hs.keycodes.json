{"currentLayout":{"def":"hs.keycodes.currentLayout() -> string","desc":"Gets the name of the current keyboard layout","doc":"Gets the name of the current keyboard layout\n\nParameters:\n * None\n\nReturns:\n * A string containing the name of the current keyboard layout","examples":[],"file":"extensions/keycodes/libkeycodes.m","lineno":"370","name":"currentLayout","notes":[],"parameters":[" * None"],"returns":[" * A string containing the name of the current keyboard layout"],"signature":"hs.keycodes.currentLayout() -> string","stripped_doc":"","type":"Function"},"currentLayoutIcon":{"def":"hs.keycodes.currentLayoutIcon() -> hs.image object","desc":"Gets the icon of the current keyboard layout","doc":"Gets the icon of the current keyboard layout\n\nParameters:\n * None\n\nReturns:\n * An hs.image object containing the icon, if available","examples":[],"file":"extensions/keycodes/libkeycodes.m","lineno":"387","name":"currentLayoutIcon","notes":[],"parameters":[" * None"],"returns":[" * An hs.image object containing the icon, if available"],"signature":"hs.keycodes.currentLayoutIcon() -> hs.image object","stripped_doc":"","type":"Function"},"currentMethod":{"def":"hs.keycodes.currentMethod() -> string","desc":"Get current input method","doc":"Get current input method\n\nParameters:\n * None\n\nReturns:\n * Name of current input method, or nil","examples":[],"file":"extensions/keycodes/libkeycodes.m","lineno":"472","name":"currentMethod","notes":[],"parameters":[" * None"],"returns":[" * Name of current input method, or nil"],"signature":"hs.keycodes.currentMethod() -> string","stripped_doc":"","type":"Function"},"currentSourceID":{"def":"hs.keycodes.currentSourceID([sourceID]) -> string | boolean","desc":"Get or set the source id for the keyboard input source","doc":"Get or set the source id for the keyboard input source\n\nParameters:\n * sourceID - an optional string specifying the input source to set for keyboard input\n\nReturns:\n * If no parameter is provided, returns a string containing the source id for the current keyboard layout or input method; if a parameter is provided, returns true or false specifying whether or not the input source was able to be changed.","examples":[],"file":"extensions/keycodes/libkeycodes.m","lineno":"334","name":"currentSourceID","notes":[],"parameters":[" * sourceID - an optional string specifying the input source to set for keyboard input"],"returns":[" * If no parameter is provided, returns a string containing the source id for the current keyboard layout or input method; if a parameter is provided, returns true or false specifying whether or not the input source was able to be changed."],"signature":"hs.keycodes.currentSourceID([sourceID]) -> string | boolean","stripped_doc":"","type":"Function"},"iconForLayoutOrMethod":{"def":"hs.keycodes.iconForLayoutOrMethod(sourceName) -> hs.image object","desc":"Gets an hs.image object for a given keyboard layout or input method","doc":"Gets an hs.image object for a given keyboard layout or input method\n\nParameters:\n * sourceName - A string containing the name of an input method or keyboard layout\n\nReturns:\n * An hs.image object, or nil if no image could be found\n\nNotes:\n * Not all layouts/methods have icons, so you should assume this will return nil at some point","examples":[],"file":"extensions/keycodes/libkeycodes.m","lineno":"566","name":"iconForLayoutOrMethod","notes":[" * Not all layouts/methods have icons, so you should assume this will return nil at some point"],"parameters":[" * sourceName - A string containing the name of an input method or keyboard layout"],"returns":[" * An hs.image object, or nil if no image could be found"],"signature":"hs.keycodes.iconForLayoutOrMethod(sourceName) -> hs.image object","stripped_doc":"","type":"Function"},"inputSourceChanged":{"def":"hs.keycodes.inputSourceChanged(fn)","desc":"Sets the function to be called when your input source (i.e. qwerty, dvorak, colemac) changes.","doc":"Sets the function to be called when your input source (i.e. qwerty, dvorak, colemac) changes.\n\nParameters:\n * fn - A function that will be called when the input source changes. No arguments are supplied to the function.\n\nReturns:\n * None\n\nNotes:\n * This may be helpful for rebinding your hotkeys to appropriate keys in the new layout\n * Setting this will un-set functions previously registered by this function.","examples":[],"file":"extensions/keycodes/keycodes.lua","lineno":"87","name":"inputSourceChanged","notes":[" * This may be helpful for rebinding your hotkeys to appropriate keys in the new layout"," * Setting this will un-set functions previously registered by this function."],"parameters":[" * fn - A function that will be called when the input source changes. No arguments are supplied to the function."],"returns":[" * None"],"signature":"hs.keycodes.inputSourceChanged(fn)","stripped_doc":"","type":"Function"},"layouts":{"def":"hs.keycodes.layouts([sourceID]) -> table","desc":"Gets all of the enabled keyboard layouts that the keyboard input source can be switched to","doc":"Gets all of the enabled keyboard layouts that the keyboard input source can be switched to\n\nParameters:\n * sourceID - an optional boolean, default false, indicating whether the keyboard layout names should be returned (false) or their source IDs (true).\n\nReturns:\n * A table containing a list of keyboard layouts enabled in System Preferences\n\nNotes:\n * Only those layouts which can be explicitly switched to will be included in the table.  Keyboard layouts which are part of input methods are not included.  See `hs.keycodes.methods`.","examples":[],"file":"extensions/keycodes/libkeycodes.m","lineno":"404","name":"layouts","notes":[" * Only those layouts which can be explicitly switched to will be included in the table.  Keyboard layouts which are part of input methods are not included.  See `hs.keycodes.methods`."],"parameters":[" * sourceID - an optional boolean, default false, indicating whether the keyboard layout names should be returned (false) or their source IDs (true)."],"returns":[" * A table containing a list of keyboard layouts enabled in System Preferences"],"signature":"hs.keycodes.layouts([sourceID]) -> table","stripped_doc":"","type":"Function"},"map":{"def":"hs.keycodes.map","desc":"A mapping from string representation of a key to its keycode, and vice versa.","doc":"A mapping from string representation of a key to its keycode, and vice versa.\n\nNotes:\n * For example: keycodes[1] == \"s\", and keycodes[\"s\"] == 1, and so on.\n * This is primarily used by the hs.eventtap and hs.hotkey extensions.\n * Valid strings are any single-character string, or any of the following strings:\n  * f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15,\n  * f16, f17, f18, f19, f20, pad., pad*, pad+, pad/, pad-, pad=,\n  * pad0, pad1, pad2, pad3, pad4, pad5, pad6, pad7, pad8, pad9,\n  * padclear, padenter, return, tab, space, delete, escape, help,\n  * home, pageup, forwarddelete, end, pagedown, left, right, down, up,\n  * shift, rightshift, cmd, rightcmd, alt, rightalt, ctrl, rightctrl,\n  * capslock, fn","file":"extensions/keycodes/keycodes.lua","lineno":"67","name":"map","notes":[" * For example: keycodes[1] == \"s\", and keycodes[\"s\"] == 1, and so on."," * This is primarily used by the hs.eventtap and hs.hotkey extensions."," * Valid strings are any single-character string, or any of the following strings:","  * f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15,","  * f16, f17, f18, f19, f20, pad., pad*, pad+, pad/, pad-, pad=,","  * pad0, pad1, pad2, pad3, pad4, pad5, pad6, pad7, pad8, pad9,","  * padclear, padenter, return, tab, space, delete, escape, help,","  * home, pageup, forwarddelete, end, pagedown, left, right, down, up,","  * shift, rightshift, cmd, rightcmd, alt, rightalt, ctrl, rightctrl,","  * capslock, fn"],"signature":"hs.keycodes.map","stripped_doc":"","type":"Constant"},"methods":{"def":"hs.keycodes.methods([sourceID]) -> table","desc":"Gets all of the enabled input methods that the keyboard input source can be switched to","doc":"Gets all of the enabled input methods that the keyboard input source can be switched to\n\nParameters:\n * sourceID - an optional boolean, default false, indicating whether the keyboard input method names should be returned (false) or their source IDs (true).\n\nReturns:\n * A table containing a list of input methods enabled in System Preferences\n\nNotes:\n * Keyboard layouts which are not part of an input method are not included in this table.  See `hs.keycodes.layouts`.","examples":[],"file":"extensions/keycodes/libkeycodes.m","lineno":"438","name":"methods","notes":[" * Keyboard layouts which are not part of an input method are not included in this table.  See `hs.keycodes.layouts`."],"parameters":[" * sourceID - an optional boolean, default false, indicating whether the keyboard input method names should be returned (false) or their source IDs (true)."],"returns":[" * A table containing a list of input methods enabled in System Preferences"],"signature":"hs.keycodes.methods([sourceID]) -> table","stripped_doc":"","type":"Function"},"setLayout":{"def":"hs.keycodes.setLayout(layoutName) -> boolean","desc":"Changes the system keyboard layout","doc":"Changes the system keyboard layout\n\nParameters:\n * layoutName - A string containing the name of an enabled keyboard layout\n\nReturns:\n * A boolean, true if the layout was successfully changed, otherwise false","examples":[],"file":"extensions/keycodes/libkeycodes.m","lineno":"502","name":"setLayout","notes":[],"parameters":[" * layoutName - A string containing the name of an enabled keyboard layout"],"returns":[" * A boolean, true if the layout was successfully changed, otherwise false"],"signature":"hs.keycodes.setLayout(layoutName) -> boolean","stripped_doc":"","type":"Function"},"setMethod":{"def":"hs.keycodes.setMethod(methodName) -> boolean","desc":"Changes the system input method","doc":"Changes the system input method\n\nParameters:\n * methodName - A string containing the name of an enabled input method\n\nReturns:\n * A boolean, true if the method was successfully changed, otherwise false","examples":[],"file":"extensions/keycodes/libkeycodes.m","lineno":"534","name":"setMethod","notes":[],"parameters":[" * methodName - A string containing the name of an enabled input method"],"returns":[" * A boolean, true if the method was successfully changed, otherwise false"],"signature":"hs.keycodes.setMethod(methodName) -> boolean","stripped_doc":"","type":"Function"}}