{"availableLocales":{"def":"hs.host.locale.availableLocales() -> table","desc":"Returns an array table containing the identifiers for the locales available on the system.","doc":"Returns an array table containing the identifiers for the locales available on the system.\n\nParameters:\n * None\n\nReturns:\n * an array table of strings specifying the locale identifiers recognized by this system.\n\nNotes:\n * these values can be used with [hs.host.locale.details](#details) to get details for a specific locale.","examples":[],"file":"extensions/host/locale/libhost_locale.m","lineno":"172","name":"availableLocales","notes":[" * these values can be used with [hs.host.locale.details](#details) to get details for a specific locale."],"parameters":[" * None"],"returns":[" * an array table of strings specifying the locale identifiers recognized by this system."],"signature":"hs.host.locale.availableLocales() -> table","stripped_doc":"","type":"Function"},"current":{"def":"hs.host.locale.current() -> string","desc":"Returns an string specifying the user's currently selected locale identifier.","doc":"Returns an string specifying the user's currently selected locale identifier.\n\nParameters:\n * None\n\nReturns:\n * a string specifying the identifier of the user's currently selected locale.\n\nNotes:\n * this value can be used with [hs.host.locale.details](#details) to get details for the returned locale.","examples":[],"file":"extensions/host/locale/libhost_locale.m","lineno":"219","name":"current","notes":[" * this value can be used with [hs.host.locale.details](#details) to get details for the returned locale."],"parameters":[" * None"],"returns":[" * a string specifying the identifier of the user's currently selected locale."],"signature":"hs.host.locale.current() -> string","stripped_doc":"","type":"Function"},"details":{"def":"hs.host.locale.details([identifier]) -> table","desc":"Returns a table containing information about the current or specified locale.","doc":"Returns a table containing information about the current or specified locale.\n\nParameters:\n * `identifier` - an optional string, specifying the locale to display information about.  If you do not specify an identifier, information about the user's currently selected locale is returned.\n\nReturns:\n * a table containing one or more of the following key-value pairs:\n   * `alternateQuotationBeginDelimiterKey` - A string containing the alternating begin quotation symbol associated with the locale. In some locales, when quotations are nested, the quotation characters alternate.\n   * `alternateQuotationEndDelimiterKey`   - A string containing the alternate end quotation symbol associated with the locale. In some locales, when quotations are nested, the quotation characters alternate.\n   * `calendar`                            - A table containing key-value pairs describing for calendar associated with the locale. The table will contain one or more of the following pairs:\n     * `AMSymbol`                          - The AM symbol for time in the locale's calendar.\n     * `calendarIdentifier`                - A string representing the calendar identity.\n     * `eraSymbols`                        - An array table of strings specifying the names of the eras as recognized in the locale's calendar.\n     * `firstWeekday`                      - The index in `weekdaySymbols` of the first weekday in the locale's calendar.\n     * `longEraSymbols`                    - An array table of strings specifying long names of the eras as recognized in the locale's calendar.\n     * `minimumDaysInFirstWeek`            - The minimum number of days, an integer value, in the first week in the locale's calendar.\n     * `monthSymbols`                      - An array table of strings for the months of the year in the locale's calendar.\n     * `PMSymbol`                          - The PM symbol for time in the locale's calendar.\n     * `quarterSymbols`                    - An array table of strings for the quarters of the year in the locale's calendar.\n     * `shortMonthSymbols`                 - An array table of short strings for the months of the year in the locale's calendar.\n     * `shortQuarterSymbols`               - An array table of short strings for the quarters of the year in the locale's calendar.\n     * `shortStandaloneMonthSymbols`       - An array table of short standalone strings for the months of the year in the locale's calendar.\n     * `shortStandaloneQuarterSymbols`     - An array table of short standalone strings for the quarters of the year in the locale's calendar.\n     * `shortStandaloneWeekdaySymbols`     - An array table of short standalone strings for the days of the week in the locale's calendar.\n     * `shortWeekdaySymbols`               - An array table of short strings for the days of the week in the locale's calendar.\n     * `standaloneMonthSymbols`            - An array table of standalone strings for the months of the year in the locale's calendar.\n     * `standaloneQuarterSymbols`          - An array table of standalone strings for the quarters of the year in the locale's calendar.\n     * `standaloneWeekdaySymbols`          - An array table of standalone strings for the days of the week in the locale's calendar.\n     * `veryShortMonthSymbols`             - An array table of very short strings for the months of the year in the locale's calendar.\n     * `veryShortStandaloneMonthSymbols`   - An array table of very short standalone strings for the months of the year in the locale's calendar.\n     * `veryShortStandaloneWeekdaySymbols` - An array table of very short standalone strings for the days of the week in the locale's calendar.\n     * `veryShortWeekdaySymbols`           - An array table of very short strings for the days of the week in the locale's calendar.\n     * `weekdaySymbols`                    - An array table of strings for the days of the week in the locale's calendar.\n   * `collationIdentifier`                 - A string containing the collation associated with the locale.\n   * `collatorIdentifier`                  - A string containing the collation identifier for the locale.\n   * `countryCode`                         - A string containing the locale country code.\n   * `currencyCode`                        - A string containing the currency code associated with the locale.\n   * `currencySymbol`                      - A string containing the currency symbol associated with the locale.\n   * `decimalSeparator`                    - A string containing the decimal separator associated with the locale.\n   * `exemplarCharacterSet`                - An array table of strings which make up the exemplar character set for the locale.\n   * `groupingSeparator`                   - A string containing the numeric grouping separator associated with the locale.\n   * `identifier`                          - A string containing the locale identifier.\n   * `languageCode`                        - A string containing the locale language code.\n   * `measurementSystem`                   - A string containing the measurement system associated with the locale.\n   * `quotationBeginDelimiterKey`          - A string containing the begin quotation symbol associated with the locale.\n   * `quotationEndDelimiterKey`            - A string containing the end quotation symbol associated with the locale.\n   * `scriptCode`                          - A string containing the locale script code.\n   * `temperatureUnit`                     - A string containing the preferred measurement system for temperature.\n   * `timeFormatIs24Hour`                  - A boolean specifying whether time is expressed in a 24 hour format (true) or 12 hour format (false).\n   * `usesMetricSystem`                    - A boolean specifying whether or not the locale uses the metric system.\n   * `variantCode`                         - A string containing the locale variant code.\n\nNotes:\n * If you specify a locale identifier as an argument, it should be based on one of the strings returned by [hs.host.locale.availableLocales](#availableLocales). Use of an arbitrary string may produce unreliable or inconsistent results.\n\n * Apple does not provide a documented method for retrieving the users preferences with respect to `temperatureUnit` or `timeFormatIs24Hour`. The methods used to determine these values are based on code from the following sources:\n   * `temperatureUnit`    - http://stackoverflow.com/a/41263725\n   * `timeFormatIs24Hour` - http://stackoverflow.com/a/1972487\n * If you are able to identify additional locale or regional settings that are not provided by this function and have a source which describes a reliable method to retrieve this information, please submit an issue at https://github.com/Hammerspoon/hammerspoon with the details.","examples":[],"file":"extensions/host/locale/libhost_locale.m","lineno":"238","name":"details","notes":[" * If you specify a locale identifier as an argument, it should be based on one of the strings returned by [hs.host.locale.availableLocales](#availableLocales). Use of an arbitrary string may produce unreliable or inconsistent results.",""," * Apple does not provide a documented method for retrieving the users preferences with respect to `temperatureUnit` or `timeFormatIs24Hour`. The methods used to determine these values are based on code from the following sources:","   * `temperatureUnit`    - http://stackoverflow.com/a/41263725","   * `timeFormatIs24Hour` - http://stackoverflow.com/a/1972487"," * If you are able to identify additional locale or regional settings that are not provided by this function and have a source which describes a reliable method to retrieve this information, please submit an issue at https://github.com/Hammerspoon/hammerspoon with the details."],"parameters":[" * `identifier` - an optional string, specifying the locale to display information about.  If you do not specify an identifier, information about the user's currently selected locale is returned."],"returns":[" * a table containing one or more of the following key-value pairs:","   * `alternateQuotationBeginDelimiterKey` - A string containing the alternating begin quotation symbol associated with the locale. In some locales, when quotations are nested, the quotation characters alternate.","   * `alternateQuotationEndDelimiterKey`   - A string containing the alternate end quotation symbol associated with the locale. In some locales, when quotations are nested, the quotation characters alternate.","   * `calendar`                            - A table containing key-value pairs describing for calendar associated with the locale. The table will contain one or more of the following pairs:","     * `AMSymbol`                          - The AM symbol for time in the locale's calendar.","     * `calendarIdentifier`                - A string representing the calendar identity.","     * `eraSymbols`                        - An array table of strings specifying the names of the eras as recognized in the locale's calendar.","     * `firstWeekday`                      - The index in `weekdaySymbols` of the first weekday in the locale's calendar.","     * `longEraSymbols`                    - An array table of strings specifying long names of the eras as recognized in the locale's calendar.","     * `minimumDaysInFirstWeek`            - The minimum number of days, an integer value, in the first week in the locale's calendar.","     * `monthSymbols`                      - An array table of strings for the months of the year in the locale's calendar.","     * `PMSymbol`                          - The PM symbol for time in the locale's calendar.","     * `quarterSymbols`                    - An array table of strings for the quarters of the year in the locale's calendar.","     * `shortMonthSymbols`                 - An array table of short strings for the months of the year in the locale's calendar.","     * `shortQuarterSymbols`               - An array table of short strings for the quarters of the year in the locale's calendar.","     * `shortStandaloneMonthSymbols`       - An array table of short standalone strings for the months of the year in the locale's calendar.","     * `shortStandaloneQuarterSymbols`     - An array table of short standalone strings for the quarters of the year in the locale's calendar.","     * `shortStandaloneWeekdaySymbols`     - An array table of short standalone strings for the days of the week in the locale's calendar.","     * `shortWeekdaySymbols`               - An array table of short strings for the days of the week in the locale's calendar.","     * `standaloneMonthSymbols`            - An array table of standalone strings for the months of the year in the locale's calendar.","     * `standaloneQuarterSymbols`          - An array table of standalone strings for the quarters of the year in the locale's calendar.","     * `standaloneWeekdaySymbols`          - An array table of standalone strings for the days of the week in the locale's calendar.","     * `veryShortMonthSymbols`             - An array table of very short strings for the months of the year in the locale's calendar.","     * `veryShortStandaloneMonthSymbols`   - An array table of very short standalone strings for the months of the year in the locale's calendar.","     * `veryShortStandaloneWeekdaySymbols` - An array table of very short standalone strings for the days of the week in the locale's calendar.","     * `veryShortWeekdaySymbols`           - An array table of very short strings for the days of the week in the locale's calendar.","     * `weekdaySymbols`                    - An array table of strings for the days of the week in the locale's calendar.","   * `collationIdentifier`                 - A string containing the collation associated with the locale.","   * `collatorIdentifier`                  - A string containing the collation identifier for the locale.","   * `countryCode`                         - A string containing the locale country code.","   * `currencyCode`                        - A string containing the currency code associated with the locale.","   * `currencySymbol`                      - A string containing the currency symbol associated with the locale.","   * `decimalSeparator`                    - A string containing the decimal separator associated with the locale.","   * `exemplarCharacterSet`                - An array table of strings which make up the exemplar character set for the locale.","   * `groupingSeparator`                   - A string containing the numeric grouping separator associated with the locale.","   * `identifier`                          - A string containing the locale identifier.","   * `languageCode`                        - A string containing the locale language code.","   * `measurementSystem`                   - A string containing the measurement system associated with the locale.","   * `quotationBeginDelimiterKey`          - A string containing the begin quotation symbol associated with the locale.","   * `quotationEndDelimiterKey`            - A string containing the end quotation symbol associated with the locale.","   * `scriptCode`                          - A string containing the locale script code.","   * `temperatureUnit`                     - A string containing the preferred measurement system for temperature.","   * `timeFormatIs24Hour`                  - A boolean specifying whether time is expressed in a 24 hour format (true) or 12 hour format (false).","   * `usesMetricSystem`                    - A boolean specifying whether or not the locale uses the metric system.","   * `variantCode`                         - A string containing the locale variant code."],"signature":"hs.host.locale.details([identifier]) -> table","stripped_doc":" * Apple does not provide a documented method for retrieving the users preferences with respect to `temperatureUnit` or `timeFormatIs24Hour`. The methods used to determine these values are based on code from the following sources:\n   * `temperatureUnit`    - http://stackoverflow.com/a/41263725\n   * `timeFormatIs24Hour` - http://stackoverflow.com/a/1972487\n * If you are able to identify additional locale or regional settings that are not provided by this function and have a source which describes a reliable method to retrieve this information, please submit an issue at https://github.com/Hammerspoon/hammerspoon with the details.","type":"Function"},"localizedString":{"def":"hs.host.locale.localizedString(localeCode[, baseLocaleCode]) -> string | nil, string | nil","desc":"Returns the localized string for a specific language code.","doc":"Returns the localized string for a specific language code.\n\nParameters:\n * `localeCode` - The locale code for the locale you want to return the localized string of.\n * `baseLocaleCode` - An optional string, specifying the locale to use for the string. If you do not specify a `baseLocaleCode`, the user's currently selected locale is used.\n\nReturns:\n * A string containing the localized string or `nil ` if either the `localeCode` or `baseLocaleCode` is invalid. For example, if the `localeCode` is \"de_CH\", this will return \"German\".\n * A string containing the localized string including the dialect or `nil ` if either the `localeCode` or `baseLocaleCode` is invalid. For example, if the `localeCode` is \"de_CH\", this will return \"German (Switzerland)\".\n\nNotes:\n * The `localeCode` and optional `baseLocaleCode` must be one of the strings returned by [hs.host.locale.availableLocales](#availableLocales).","examples":[],"file":"extensions/host/locale/libhost_locale.m","lineno":"317","name":"localizedString","notes":[" * The `localeCode` and optional `baseLocaleCode` must be one of the strings returned by [hs.host.locale.availableLocales](#availableLocales)."],"parameters":[" * `localeCode` - The locale code for the locale you want to return the localized string of."," * `baseLocaleCode` - An optional string, specifying the locale to use for the string. If you do not specify a `baseLocaleCode`, the user's currently selected locale is used."],"returns":[" * A string containing the localized string or `nil ` if either the `localeCode` or `baseLocaleCode` is invalid. For example, if the `localeCode` is \"de_CH\", this will return \"German\"."," * A string containing the localized string including the dialect or `nil ` if either the `localeCode` or `baseLocaleCode` is invalid. For example, if the `localeCode` is \"de_CH\", this will return \"German (Switzerland)\"."],"signature":"hs.host.locale.localizedString(localeCode[, baseLocaleCode]) -> string | nil, string | nil","stripped_doc":"","type":"Function"},"preferredLanguages":{"def":"hs.host.locale.preferredLanguages() -> table","desc":"Returns the user's language preference order as an array of strings.","doc":"Returns the user's language preference order as an array of strings.\n\nParameters:\n * None\n\nReturns:\n * an array table of strings specifying the user's preferred languages as string identifiers.","examples":[],"file":"extensions/host/locale/libhost_locale.m","lineno":"197","name":"preferredLanguages","notes":[],"parameters":[" * None"],"returns":[" * an array table of strings specifying the user's preferred languages as string identifiers."],"signature":"hs.host.locale.preferredLanguages() -> table","stripped_doc":"","type":"Function"},"registerCallback":{"def":"hs.host.locale.registerCallback(function) -> uuidString","desc":"Registers a function to be invoked when anything in the user's locale settings change","doc":"Registers a function to be invoked when anything in the user's locale settings change\n\nParameters:\n * `fn` - the function to be invoked when a setting changes\n\nReturns:\n * a uuid string which can be used to unregister a callback function when you no longer require notification of changes\n\nNotes:\n * The callback function will not receive any arguments and should return none.  You can retrieve the new locale settings with [hs.host.locale.localeInformation](#localeInformation) and check its keys to determine if the change is of interest.\n\n * Any change made within the Language and Region settings panel will trigger this callback, even changes which are not reflected in the locale information provided by [hs.host.locale.localeInformation](#localeInformation).","examples":[],"file":"extensions/host/locale/host_locale.lua","lineno":"28","name":"registerCallback","notes":[" * The callback function will not receive any arguments and should return none.  You can retrieve the new locale settings with [hs.host.locale.localeInformation](#localeInformation) and check its keys to determine if the change is of interest.",""," * Any change made within the Language and Region settings panel will trigger this callback, even changes which are not reflected in the locale information provided by [hs.host.locale.localeInformation](#localeInformation)."],"parameters":[" * `fn` - the function to be invoked when a setting changes"],"returns":[" * a uuid string which can be used to unregister a callback function when you no longer require notification of changes"],"signature":"hs.host.locale.registerCallback(function) -> uuidString","stripped_doc":" * Any change made within the Language and Region settings panel will trigger this callback, even changes which are not reflected in the locale information provided by [hs.host.locale.localeInformation](#localeInformation).","type":"Function"},"unregisterCallback":{"def":"hs.host.locale.unregisterCallback(uuidString) -> boolean","desc":"Unregister a callback function when you no longer care about changes to the user's locale","doc":"Unregister a callback function when you no longer care about changes to the user's locale\n\nParameters:\n * `uuidString` - the uuidString returned by [hs.host.locale.registerCallback](#registerCallback) when you registered the callback function\n\nReturns:\n * true if the callback was successfully unregistered or false if it was not, usually because the uuidString does not correspond to a current callback function.","examples":[],"file":"extensions/host/locale/host_locale.lua","lineno":"52","name":"unregisterCallback","notes":[],"parameters":[" * `uuidString` - the uuidString returned by [hs.host.locale.registerCallback](#registerCallback) when you registered the callback function"],"returns":[" * true if the callback was successfully unregistered or false if it was not, usually because the uuidString does not correspond to a current callback function."],"signature":"hs.host.locale.unregisterCallback(uuidString) -> boolean","stripped_doc":"","type":"Function"}}