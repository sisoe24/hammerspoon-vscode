{"addressesForHostname":{"def":"hs.network.host.addressesForHostname(name[, fn]) -> table | hostObject","desc":"Get IP addresses for the hostname specified.","doc":"Get IP addresses for the hostname specified.\n\nParameters:\n * name - the hostname to lookup IP addresses for\n * fn   - an optional callback function which, when provided, will perform the address resolution in an asynchronous, non-blocking manner.\n\nReturns:\n * If this function is called without a callback function, returns a table containing the IP addresses for the specified name.  If a callback function is specified, then a host object is returned.\n\nNotes:\n * If no callback function is provided, the resolution occurs in a blocking manner which may be noticeable when network access is slow or erratic.\n * If a callback function is provided, this function acts as a constructor, returning a host object and the callback function will be invoked when resolution is complete.  The callback function should take two parameters: the string \"addresses\", indicating that an address resolution occurred, and a table containing the IP addresses identified.\n * Generates an error if network access is currently disabled or the hostname is invalid.","examples":[],"file":"extensions/network/libnetwork_host.m","lineno":"268","name":"addressesForHostname","notes":[" * If no callback function is provided, the resolution occurs in a blocking manner which may be noticeable when network access is slow or erratic."," * If a callback function is provided, this function acts as a constructor, returning a host object and the callback function will be invoked when resolution is complete.  The callback function should take two parameters: the string \"addresses\", indicating that an address resolution occurred, and a table containing the IP addresses identified."," * Generates an error if network access is currently disabled or the hostname is invalid."],"parameters":[" * name - the hostname to lookup IP addresses for"," * fn   - an optional callback function which, when provided, will perform the address resolution in an asynchronous, non-blocking manner."],"returns":[" * If this function is called without a callback function, returns a table containing the IP addresses for the specified name.  If a callback function is specified, then a host object is returned."],"signature":"hs.network.host.addressesForHostname(name[, fn]) -> table | hostObject","stripped_doc":"","type":"Function"},"cancel":{"def":"hs.network.host:cancel() -> hostObject","desc":"Cancels an in-progress asynchronous host resolution.","doc":"Cancels an in-progress asynchronous host resolution.\n\nParameters:\n * None\n\nReturns:\n * the hostObject\n\nNotes:\n * This method has no effect if the resolution has already completed.","examples":[],"file":"extensions/network/libnetwork_host.m","lineno":"367","name":"cancel","notes":[" * This method has no effect if the resolution has already completed."],"parameters":[" * None"],"returns":[" * the hostObject"],"signature":"hs.network.host:cancel() -> hostObject","stripped_doc":"","type":"Method"},"hostnamesForAddress":{"def":"hs.network.host.hostnamesForAddress(address[, fn]) -> table | hostObject","desc":"Get hostnames for the IP address specified.","doc":"Get hostnames for the IP address specified.\n\nParameters:\n * address - a string or number representing an IPv4 or IPv6 network address to lookup hostnames for.  If the argument is a number, it is treated as the 32 bit numerical representation of an IPv4 address.\n * fn      - an optional callback function which, when provided, will perform the hostname resolution in an asynchronous, non-blocking manner.\n\nReturns:\n * If this function is called without a callback function, returns a table containing the hostnames for the specified address.  If a callback function is specified, then a host object is returned.\n\nNotes:\n * If no callback function is provided, the resolution occurs in a blocking manner which may be noticeable when network access is slow or erratic.\n * If a callback function is provided, this function acts as a constructor, returning a host object and the callback function will be invoked when resolution is complete.  The callback function should take two parameters: the string \"names\", indicating that hostname resolution occurred, and a table containing the hostnames identified.\n * Generates an error if network access is currently disabled or the IP address is invalid.","examples":[],"file":"extensions/network/libnetwork_host.m","lineno":"287","name":"hostnamesForAddress","notes":[" * If no callback function is provided, the resolution occurs in a blocking manner which may be noticeable when network access is slow or erratic."," * If a callback function is provided, this function acts as a constructor, returning a host object and the callback function will be invoked when resolution is complete.  The callback function should take two parameters: the string \"names\", indicating that hostname resolution occurred, and a table containing the hostnames identified."," * Generates an error if network access is currently disabled or the IP address is invalid."],"parameters":[" * address - a string or number representing an IPv4 or IPv6 network address to lookup hostnames for.  If the argument is a number, it is treated as the 32 bit numerical representation of an IPv4 address."," * fn      - an optional callback function which, when provided, will perform the hostname resolution in an asynchronous, non-blocking manner."],"returns":[" * If this function is called without a callback function, returns a table containing the hostnames for the specified address.  If a callback function is specified, then a host object is returned."],"signature":"hs.network.host.hostnamesForAddress(address[, fn]) -> table | hostObject","stripped_doc":"","type":"Function"},"isRunning":{"def":"hs.network.host:isRunning() -> boolean","desc":"Returns whether or not resolution is still in progress for an asynchronous query.","doc":"Returns whether or not resolution is still in progress for an asynchronous query.\n\nParameters:\n * None\n\nReturns:\n * true, if resolution is still in progress, or false if resolution has already completed.","examples":[],"file":"extensions/network/libnetwork_host.m","lineno":"350","name":"isRunning","notes":[],"parameters":[" * None"],"returns":[" * true, if resolution is still in progress, or false if resolution has already completed."],"signature":"hs.network.host:isRunning() -> boolean","stripped_doc":"","type":"Method"},"reachabilityForAddress":{"def":"hs.network.host.reachabilityForAddress(address[, fn]) -> integer | hostObject","desc":"Get the reachability status for the IP address specified.","doc":"Get the reachability status for the IP address specified.\n\nParameters:\n * address - a string or number representing an IPv4 or IPv6 network address to check the reachability for.  If the argument is a number, it is treated as the 32 bit numerical representation of an IPv4 address.\n * fn      - an optional callback function which, when provided, will determine the address reachability in an asynchronous, non-blocking manner.\n\nReturns:\n * If this function is called without a callback function, returns the numeric representation of the address reachability status.  If a callback function is specified, then a host object is returned.\n\nNotes:\n * If no callback function is provided, the resolution occurs in a blocking manner which may be noticeable when network access is slow or erratic.\n * If a callback function is provided, this function acts as a constructor, returning a host object and the callback function will be invoked when resolution is complete.  The callback function should take two parameters: the string \"reachability\", indicating that reachability was determined, and the numeric representation of the address reachability status.\n * Generates an error if network access is currently disabled or the IP address is invalid.\n * The numeric representation is made up from a combination of the flags defined in `hs.network.reachability.flags`.\n * Performs the same reachability test as `hs.network.reachability.forAddress`.","examples":[],"file":"extensions/network/libnetwork_host.m","lineno":"306","name":"reachabilityForAddress","notes":[" * If no callback function is provided, the resolution occurs in a blocking manner which may be noticeable when network access is slow or erratic."," * If a callback function is provided, this function acts as a constructor, returning a host object and the callback function will be invoked when resolution is complete.  The callback function should take two parameters: the string \"reachability\", indicating that reachability was determined, and the numeric representation of the address reachability status."," * Generates an error if network access is currently disabled or the IP address is invalid."," * The numeric representation is made up from a combination of the flags defined in `hs.network.reachability.flags`."," * Performs the same reachability test as `hs.network.reachability.forAddress`."],"parameters":[" * address - a string or number representing an IPv4 or IPv6 network address to check the reachability for.  If the argument is a number, it is treated as the 32 bit numerical representation of an IPv4 address."," * fn      - an optional callback function which, when provided, will determine the address reachability in an asynchronous, non-blocking manner."],"returns":[" * If this function is called without a callback function, returns the numeric representation of the address reachability status.  If a callback function is specified, then a host object is returned."],"signature":"hs.network.host.reachabilityForAddress(address[, fn]) -> integer | hostObject","stripped_doc":"","type":"Function"},"reachabilityForHostname":{"def":"hs.network.host.reachabilityForHostname(name[, fn]) -> integer | hostObject","desc":"Get the reachability status for the IP address specified.","doc":"Get the reachability status for the IP address specified.\n\nParameters:\n * name - the hostname to check the reachability for.  If the argument is a number, it is treated as the 32 bit numerical representation of an IPv4 address.\n * fn   - an optional callback function which, when provided, will determine the address reachability in an asynchronous, non-blocking manner.\n\nReturns:\n * If this function is called without a callback function, returns the numeric representation of the hostname reachability status.  If a callback function is specified, then a host object is returned.\n\nNotes:\n * If no callback function is provided, the resolution occurs in a blocking manner which may be noticeable when network access is slow or erratic.\n * If a callback function is provided, this function acts as a constructor, returning a host object and the callback function will be invoked when resolution is complete.  The callback function should take two parameters: the string \"reachability\", indicating that reachability was determined, and the numeric representation of the hostname reachability status.\n * Generates an error if network access is currently disabled or the IP address is invalid.\n * The numeric representation is made up from a combination of the flags defined in `hs.network.reachability.flags`.\n * Performs the same reachability test as `hs.network.reachability.forHostName`.","examples":[],"file":"extensions/network/libnetwork_host.m","lineno":"327","name":"reachabilityForHostname","notes":[" * If no callback function is provided, the resolution occurs in a blocking manner which may be noticeable when network access is slow or erratic."," * If a callback function is provided, this function acts as a constructor, returning a host object and the callback function will be invoked when resolution is complete.  The callback function should take two parameters: the string \"reachability\", indicating that reachability was determined, and the numeric representation of the hostname reachability status."," * Generates an error if network access is currently disabled or the IP address is invalid."," * The numeric representation is made up from a combination of the flags defined in `hs.network.reachability.flags`."," * Performs the same reachability test as `hs.network.reachability.forHostName`."],"parameters":[" * name - the hostname to check the reachability for.  If the argument is a number, it is treated as the 32 bit numerical representation of an IPv4 address."," * fn   - an optional callback function which, when provided, will determine the address reachability in an asynchronous, non-blocking manner."],"returns":[" * If this function is called without a callback function, returns the numeric representation of the hostname reachability status.  If a callback function is specified, then a host object is returned."],"signature":"hs.network.host.reachabilityForHostname(name[, fn]) -> integer | hostObject","stripped_doc":"","type":"Function"}}