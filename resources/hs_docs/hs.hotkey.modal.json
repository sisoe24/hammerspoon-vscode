{"bind":{"def":"hs.hotkey.modal:bind(mods, key, message, pressedfn, releasedfn, repeatfn) -> hs.hotkey.modal object","desc":"Creates a hotkey that is enabled/disabled as the modal is entered/exited","doc":"Creates a hotkey that is enabled/disabled as the modal is entered/exited\n\nParameters:\n * mods - A table or a string containing (as elements, or as substrings with any separator) the keyboard modifiers required,\n   which should be zero or more of the following:\n   * \"cmd\", \"command\" or \"⌘\"\n   * \"ctrl\", \"control\" or \"⌃\"\n   * \"alt\", \"option\" or \"⌥\"\n   * \"shift\" or \"⇧\"\n * key - A string containing the name of a keyboard key (as found in [hs.keycodes.map](hs.keycodes.html#map) ), or a raw keycode number\n * message - A string containing a message to be displayed via `hs.alert()` when the hotkey has been triggered, or nil for no alert\n * pressedfn - A function that will be called when the hotkey has been pressed, or nil\n * releasedfn - A function that will be called when the hotkey has been released, or nil\n * repeatfn - A function that will be called when a pressed hotkey is repeating, or nil\n\nReturns:\n * The `hs.hotkey.modal` object for method chaining","examples":[],"file":"extensions/hotkey/hotkey.lua","lineno":"482","name":"bind","notes":[],"parameters":[" * mods - A table or a string containing (as elements, or as substrings with any separator) the keyboard modifiers required, which should be zero or more of the following:\n   * \"cmd\", \"command\" or \"⌘\"\n   * \"ctrl\", \"control\" or \"⌃\"\n   * \"alt\", \"option\" or \"⌥\"\n   * \"shift\" or \"⇧\""," * key - A string containing the name of a keyboard key (as found in [hs.keycodes.map](hs.keycodes.html#map) ), or a raw keycode number"," * message - A string containing a message to be displayed via `hs.alert()` when the hotkey has been triggered, or nil for no alert"," * pressedfn - A function that will be called when the hotkey has been pressed, or nil"," * releasedfn - A function that will be called when the hotkey has been released, or nil"," * repeatfn - A function that will be called when a pressed hotkey is repeating, or nil"],"returns":[" * The `hs.hotkey.modal` object for method chaining"],"signature":"hs.hotkey.modal:bind(mods, key, message, pressedfn, releasedfn, repeatfn) -> hs.hotkey.modal object","stripped_doc":"","type":"Method"},"delete":{"def":"hs.hotkey.modal:delete()","desc":"Deletes a modal hotkey object without calling :exited()","doc":"Deletes a modal hotkey object without calling :exited()\n\nParameters:\n * None\n\nReturns:\n * None","examples":[],"file":"extensions/hotkey/hotkey.lua","lineno":"580","name":"delete","notes":[],"parameters":[" * None"],"returns":[" * None"],"signature":"hs.hotkey.modal:delete()","stripped_doc":"","type":"Method"},"enter":{"def":"hs.hotkey.modal:enter() -> hs.hotkey.modal object","desc":"Enters a modal state","doc":"Enters a modal state\n\nParameters:\n * None\n\nReturns:\n * The `hs.hotkey.modal` object for method chaining\n\nNotes:\n * This method will enable all of the hotkeys defined in the modal state via `hs.hotkey.modal:bind()`,\n   and disable the hotkey that entered the modal state (if one was defined)\n * If the modal state was created with a keyboard combination, this method will be called automatically","examples":[],"file":"extensions/hotkey/hotkey.lua","lineno":"506","name":"enter","notes":[" * This method will enable all of the hotkeys defined in the modal state via `hs.hotkey.modal:bind()`,","   and disable the hotkey that entered the modal state (if one was defined)"," * If the modal state was created with a keyboard combination, this method will be called automatically"],"parameters":[" * None"],"returns":[" * The `hs.hotkey.modal` object for method chaining"],"signature":"hs.hotkey.modal:enter() -> hs.hotkey.modal object","stripped_doc":"","type":"Method"},"entered":{"def":"hs.hotkey.modal:entered()","desc":"Optional callback for when a modal is entered","doc":"Optional callback for when a modal is entered\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * This is a preexisting function that you should override if you need to use it; the default implementation does nothing.","examples":[],"file":"extensions/hotkey/hotkey.lua","lineno":"452","name":"entered","notes":[" * This is a preexisting function that you should override if you need to use it; the default implementation does nothing."],"parameters":[" * None"],"returns":[" * None"],"signature":"hs.hotkey.modal:entered()","stripped_doc":"","type":"Method"},"exit":{"def":"hs.hotkey.modal:exit() -> hs.hotkey.modal object","desc":"Exits a modal state","doc":"Exits a modal state\n\nParameters:\n * None\n\nReturns:\n * The `hs.hotkey.modal` object for method chaining\n\nNotes:\n * This method will disable all of the hotkeys defined in the modal state, and enable the hotkey for entering the modal state (if one was defined)","examples":[],"file":"extensions/hotkey/hotkey.lua","lineno":"530","name":"exit","notes":[" * This method will disable all of the hotkeys defined in the modal state, and enable the hotkey for entering the modal state (if one was defined)"],"parameters":[" * None"],"returns":[" * The `hs.hotkey.modal` object for method chaining"],"signature":"hs.hotkey.modal:exit() -> hs.hotkey.modal object","stripped_doc":"","type":"Method"},"exited":{"def":"hs.hotkey.modal:exited()","desc":"Optional callback for when a modal is exited","doc":"Optional callback for when a modal is exited\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * This is a preexisting function that you should override if you need to use it; the default implementation does nothing.","examples":[],"file":"extensions/hotkey/hotkey.lua","lineno":"467","name":"exited","notes":[" * This is a preexisting function that you should override if you need to use it; the default implementation does nothing."],"parameters":[" * None"],"returns":[" * None"],"signature":"hs.hotkey.modal:exited()","stripped_doc":"","type":"Method"},"new":{"def":"hs.hotkey.modal.new(mods, key, message) -> hs.hotkey.modal object","desc":"Creates a new modal state, optionally with a global keyboard combination to trigger it","doc":"Creates a new modal state, optionally with a global keyboard combination to trigger it\n\nParameters:\n * mods - A table or a string containing (as elements, or as substrings with any separator) the keyboard modifiers required,\n   which should be zero or more of the following:\n   * \"cmd\", \"command\" or \"⌘\"\n   * \"ctrl\", \"control\" or \"⌃\"\n   * \"alt\", \"option\" or \"⌥\"\n   * \"shift\" or \"⇧\"\n * key - A string containing the name of a keyboard key (as found in [hs.keycodes.map](hs.keycodes.html#map) ), or a raw keycode number\n * message - A string containing a message to be displayed via `hs.alert()` when the hotkey has been triggered, or nil for no alert\n\nReturns:\n * A new `hs.hotkey.modal` object\n\nNotes:\n * If `key` is nil, no global hotkey will be registered (all other parameters will be ignored)","examples":[],"file":"extensions/hotkey/hotkey.lua","lineno":"552","name":"new","notes":[" * If `key` is nil, no global hotkey will be registered (all other parameters will be ignored)"],"parameters":[" * mods - A table or a string containing (as elements, or as substrings with any separator) the keyboard modifiers required, which should be zero or more of the following:\n   * \"cmd\", \"command\" or \"⌘\"\n   * \"ctrl\", \"control\" or \"⌃\"\n   * \"alt\", \"option\" or \"⌥\"\n   * \"shift\" or \"⇧\""," * key - A string containing the name of a keyboard key (as found in [hs.keycodes.map](hs.keycodes.html#map) ), or a raw keycode number"," * message - A string containing a message to be displayed via `hs.alert()` when the hotkey has been triggered, or nil for no alert"],"returns":[" * A new `hs.hotkey.modal` object"],"signature":"hs.hotkey.modal.new(mods, key, message) -> hs.hotkey.modal object","stripped_doc":"","type":"Constructor"}}
