{"close":{"def":"hs.websocket:close() -> object","desc":"Closes a websocket connection.","doc":"Closes a websocket connection.\n\nParameters:\n * None\n\nReturns:\n * The `hs.websocket` object","examples":[],"file":"extensions/websocket/libwebsocket.m","lineno":"230","name":"close","notes":[],"parameters":[" * None"],"returns":[" * The `hs.websocket` object"],"signature":"hs.websocket:close() -> object","stripped_doc":"","type":"Method"},"new":{"def":"hs.websocket.new(url, callback) -> object","desc":"Creates a new websocket connection.","doc":"Creates a new websocket connection.\n\nParameters:\n * url - The URL to the websocket\n * callback - A function that's triggered by websocket actions.\n\nReturns:\n * The `hs.websocket` object\n\nNotes:\n * The callback should accept two parameters.\n * The first paramater is a string with the following possible options:\n  * open - The websocket connection has been opened\n  * closed - The websocket connection has been closed\n  * fail - The websocket connection has failed\n  * received - The websocket has received a message\n  * pong - A pong request has been received\n * The second parameter is a string with the recieved message or an error message.\n * Given a path '/mysock' and a port of 8000, the websocket URL is as follows:\n  * ws://localhost:8000/mysock\n  * wss://localhost:8000/mysock (if SSL enabled)","examples":[],"file":"extensions/websocket/libwebsocket.m","lineno":"120","name":"new","notes":[" * The callback should accept two parameters."," * The first paramater is a string with the following possible options:","  * open - The websocket connection has been opened","  * closed - The websocket connection has been closed","  * fail - The websocket connection has failed","  * received - The websocket has received a message","  * pong - A pong request has been received"," * The second parameter is a string with the recieved message or an error message."," * Given a path '/mysock' and a port of 8000, the websocket URL is as follows:","  * ws://localhost:8000/mysock","  * wss://localhost:8000/mysock (if SSL enabled)"],"parameters":[" * url - The URL to the websocket"," * callback - A function that's triggered by websocket actions."],"returns":[" * The `hs.websocket` object"],"signature":"hs.websocket.new(url, callback) -> object","stripped_doc":"","type":"Function"},"send":{"def":"hs.websocket:send(message[, isData]) -> object","desc":"Sends a message to the websocket client.","doc":"Sends a message to the websocket client.\n\nParameters:\n * message - A string containing the message to send.\n * isData - An optional boolean that sends the message as binary data (defaults to true).\n\nReturns:\n * The `hs.websocket` object\n\nNotes:\n * Forcing a text representation by setting isData to `false` may alter the data if it\n  contains invalid UTF8 character sequences (the default string behavior is to make\n  sure everything is \"printable\" by converting invalid sequences into the Unicode\n  Invalid Character sequence).","examples":[],"file":"extensions/websocket/libwebsocket.m","lineno":"164","name":"send","notes":[" * Forcing a text representation by setting isData to `false` may alter the data if it","  contains invalid UTF8 character sequences (the default string behavior is to make","  sure everything is \"printable\" by converting invalid sequences into the Unicode","  Invalid Character sequence)."],"parameters":[" * message - A string containing the message to send."," * isData - An optional boolean that sends the message as binary data (defaults to true)."],"returns":[" * The `hs.websocket` object"],"signature":"hs.websocket:send(message[, isData]) -> object","stripped_doc":"","type":"Method"},"status":{"def":"hs.websocket:status() -> string","desc":"Gets the status of a websocket.","doc":"Gets the status of a websocket.\n\nParameters:\n * None\n\nReturns:\n * A string containing one of the following options:\n  * connecting\n  * open\n  * closing\n  * closed\n  * unknown","examples":[],"file":"extensions/websocket/libwebsocket.m","lineno":"194","name":"status","notes":[],"parameters":[" * None"],"returns":[" * A string containing one of the following options:","  * connecting","  * open","  * closing","  * closed","  * unknown"],"signature":"hs.websocket:status() -> string","stripped_doc":"","type":"Method"}}