{"callback":{"def":"hs.watchable:callback(fn) -> watchableObject","desc":"Change or remove the callback function for the watchableObject.","doc":"Change or remove the callback function for the watchableObject.\n\nParameters:\n * `fn` - a function, or an explicit nil to remove, specifying the new callback function to receive notifications for this watchableObject\n\nReturns:\n * the watchableObject\n\nNotes:\n * see [hs.watchable.watch](#watch) for a description of the arguments the callback function should expect.","examples":[],"file":"extensions/watchable/watchable.lua","lineno":"100","name":"callback","notes":[" * see [hs.watchable.watch](#watch) for a description of the arguments the callback function should expect."],"parameters":[" * `fn` - a function, or an explicit nil to remove, specifying the new callback function to receive notifications for this watchableObject"],"returns":[" * the watchableObject"],"signature":"hs.watchable:callback(fn) -> watchableObject","stripped_doc":"","type":"Method"},"change":{"def":"hs.watchable:change([key], value) -> watchableObject","desc":"Externally change the value of the key-value pair being watched by the watchableObject","doc":"Externally change the value of the key-value pair being watched by the watchableObject\n\nParameters:\n * `key`   - if the watchableObject was defined with a key of \"*\", this argument is required and specifies the specific key of the watched table to change the value of.  If a specific key was specified when the watchableObject was defined, this argument must not be provided.\n * `value` - the new value for the key.\n\nReturns:\n * the watchableObject\n\nNotes:\n * if external changes are not allowed for the specified path, this method generates an error","examples":[],"file":"extensions/watchable/watchable.lua","lineno":"144","name":"change","notes":[" * if external changes are not allowed for the specified path, this method generates an error"],"parameters":[" * `key`   - if the watchableObject was defined with a key of \"*\", this argument is required and specifies the specific key of the watched table to change the value of.  If a specific key was specified when the watchableObject was defined, this argument must not be provided."," * `value` - the new value for the key."],"returns":[" * the watchableObject"],"signature":"hs.watchable:change([key], value) -> watchableObject","stripped_doc":"","type":"Method"},"new":{"def":"hs.watchable.new(path, [externalChanges]) -> table","desc":"Creates a table that can be watched by other modules for key changes","doc":"Creates a table that can be watched by other modules for key changes\n\nParameters:\n * `path`            - the global name for this internal table that external code can refer to the table as.\n * `externalChanges` - an optional boolean, default false, specifying whether external code can make changes to keys within this table (bi-directional communication).\n\nReturns:\n * a table with metamethods which will notify external code which is registered to watch this table for key-value changes.\n\nNotes:\n * This constructor is used by code which wishes to share state information which other code may register to watch.\n\n * You may specify any string name as a path, but it must be unique -- an error will occur if the path name has already been registered.\n * All key-value pairs stored within this table are potentially watchable by external code -- if you wish to keep some data private, do not store it in this table.\n * `externalChanges` will apply to *all* keys within this table -- if you wish to only allow some keys to be externally modifiable, you will need to register separate paths.\n * If external changes are enabled, you will need to register your own watcher with [hs.watchable.watch](#watch) if action is required when external changes occur.","examples":[],"file":"extensions/watchable/watchable.lua","lineno":"188","name":"new","notes":[" * This constructor is used by code which wishes to share state information which other code may register to watch.",""," * You may specify any string name as a path, but it must be unique -- an error will occur if the path name has already been registered."," * All key-value pairs stored within this table are potentially watchable by external code -- if you wish to keep some data private, do not store it in this table."," * `externalChanges` will apply to *all* keys within this table -- if you wish to only allow some keys to be externally modifiable, you will need to register separate paths."," * If external changes are enabled, you will need to register your own watcher with [hs.watchable.watch](#watch) if action is required when external changes occur."],"parameters":[" * `path`            - the global name for this internal table that external code can refer to the table as."," * `externalChanges` - an optional boolean, default false, specifying whether external code can make changes to keys within this table (bi-directional communication)."],"returns":[" * a table with metamethods which will notify external code which is registered to watch this table for key-value changes."],"signature":"hs.watchable.new(path, [externalChanges]) -> table","stripped_doc":" * You may specify any string name as a path, but it must be unique -- an error will occur if the path name has already been registered.\n * All key-value pairs stored within this table are potentially watchable by external code -- if you wish to keep some data private, do not store it in this table.\n * `externalChanges` will apply to *all* keys within this table -- if you wish to only allow some keys to be externally modifiable, you will need to register separate paths.\n * If external changes are enabled, you will need to register your own watcher with [hs.watchable.watch](#watch) if action is required when external changes occur.","type":"Constructor"},"pause":{"def":"hs.watchable:pause() -> watchableObject","desc":"Temporarily stop notifications about the key-value pair(s) watched by this watchableObject.","doc":"Temporarily stop notifications about the key-value pair(s) watched by this watchableObject.\n\nParameters:\n * None\n\nReturns:\n * the watchableObject","examples":[],"file":"extensions/watchable/watchable.lua","lineno":"61","name":"pause","notes":[],"parameters":[" * None"],"returns":[" * the watchableObject"],"signature":"hs.watchable:pause() -> watchableObject","stripped_doc":"","type":"Method"},"release":{"def":"hs.watchable:release() -> nil","desc":"Removes the watchableObject so that key-value pairs watched by this object no longer generate notifications.","doc":"Removes the watchableObject so that key-value pairs watched by this object no longer generate notifications.\n\nParameters:\n * None\n\nReturns:\n * nil","examples":[],"file":"extensions/watchable/watchable.lua","lineno":"81","name":"release","notes":[],"parameters":[" * None"],"returns":[" * nil"],"signature":"hs.watchable:release() -> nil","stripped_doc":"","type":"Method"},"resume":{"def":"hs.watchable:resume() -> watchableObject","desc":"Resume notifications about the key-value pair(s) watched by this watchableObject which were previously paused.","doc":"Resume notifications about the key-value pair(s) watched by this watchableObject which were previously paused.\n\nParameters:\n * None\n\nReturns:\n * the watchableObject","examples":[],"file":"extensions/watchable/watchable.lua","lineno":"71","name":"resume","notes":[],"parameters":[" * None"],"returns":[" * the watchableObject"],"signature":"hs.watchable:resume() -> watchableObject","stripped_doc":"","type":"Method"},"value":{"def":"hs.watchable:value([key]) -> currentValue","desc":"Get the current value for the key-value pair being watched by the watchableObject","doc":"Get the current value for the key-value pair being watched by the watchableObject\n\nParameters:\n * `key` - if the watchableObject was defined with a key of \"*\", this argument is required and specifies the specific key of the watched table to retrieve the value for.  If a specific key was specified when the watchableObject was defined, this argument is ignored.\n\nReturns:\n * The current value for the key-value pair being watched by the watchableObject. May be nil.","examples":[],"file":"extensions/watchable/watchable.lua","lineno":"125","name":"value","notes":[],"parameters":[" * `key` - if the watchableObject was defined with a key of \"*\", this argument is required and specifies the specific key of the watched table to retrieve the value for.  If a specific key was specified when the watchableObject was defined, this argument is ignored."],"returns":[" * The current value for the key-value pair being watched by the watchableObject. May be nil."],"signature":"hs.watchable:value([key]) -> currentValue","stripped_doc":"","type":"Method"},"watch":{"def":"hs.watchable.watch(path, [key], callback) -> watchableObject","desc":"Creates a watcher that will be invoked when the specified key in the specified path is modified.","doc":"Creates a watcher that will be invoked when the specified key in the specified path is modified.\n\nParameters:\n * `path`     - a string specifying the path to watch.  If `key` is not provided, then this should be a string of the form \"path.key\" where the key will be identified as the string after the last \".\"\n * `key`      - if provided, a string specifying the specific key within the path to watch.\n * `callback` - an optional function which will be invoked when changes occur to the key specified within the path.  The function should expect the following arguments:\n   * `watcher` - the watcher object itself\n   * `path`    - the path being watched\n   * `key`     - the specific key within the path which invoked this callback\n   * `old`     - the old value for this key, may be nil\n   * `new`     - the new value for this key, may be nil\n\nReturns:\n * a watchableObject\n\nNotes:\n * This constructor is used by code which wishes to watch state information which is being shared by other code.\n\n * The callback function is invoked after the new value has already been set -- the callback is a \"didChange\" notification, not a \"willChange\" notification.\n\n * If the key (specified as a separate argument or as the final component of path) is \"*\", then all key-value pair changes that occur for the table specified by the path will invoke a callback.  This is a shortcut for watching an entire table, rather than just a specific key-value pair of the table.\n * It is possible to register a watcher for a path that has not been registered with [hs.watchable.new](#new) yet. Retrieving the current value with [hs.watchable:value](#value) in such a case will return nil.","examples":[],"file":"extensions/watchable/watchable.lua","lineno":"220","name":"watch","notes":[" * This constructor is used by code which wishes to watch state information which is being shared by other code.",""," * The callback function is invoked after the new value has already been set -- the callback is a \"didChange\" notification, not a \"willChange\" notification.",""," * If the key (specified as a separate argument or as the final component of path) is \"*\", then all key-value pair changes that occur for the table specified by the path will invoke a callback.  This is a shortcut for watching an entire table, rather than just a specific key-value pair of the table."," * It is possible to register a watcher for a path that has not been registered with [hs.watchable.new](#new) yet. Retrieving the current value with [hs.watchable:value](#value) in such a case will return nil."],"parameters":[" * `path`     - a string specifying the path to watch.  If `key` is not provided, then this should be a string of the form \"path.key\" where the key will be identified as the string after the last \".\""," * `key`      - if provided, a string specifying the specific key within the path to watch."," * `callback` - an optional function which will be invoked when changes occur to the key specified within the path.  The function should expect the following arguments:\n   * `watcher` - the watcher object itself\n   * `path`    - the path being watched\n   * `key`     - the specific key within the path which invoked this callback\n   * `old`     - the old value for this key, may be nil\n   * `new`     - the new value for this key, may be nil"],"returns":[" * a watchableObject"],"signature":"hs.watchable.watch(path, [key], callback) -> watchableObject","stripped_doc":" * The callback function is invoked after the new value has already been set -- the callback is a \"didChange\" notification, not a \"willChange\" notification.\n * If the key (specified as a separate argument or as the final component of path) is \"*\", then all key-value pair changes that occur for the table specified by the path will invoke a callback.  This is a shortcut for watching an entire table, rather than just a specific key-value pair of the table.\n * It is possible to register a watcher for a path that has not been registered with [hs.watchable.new](#new) yet. Retrieving the current value with [hs.watchable:value](#value) in such a case will return nil.","type":"Constructor"}}