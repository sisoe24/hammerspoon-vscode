{"bindHotkeysToSpec":{"def":"hs.spoons.bindHotkeysToSpec(def, map) -> none","desc":"Map a number of hotkeys according to a definition table","doc":"Map a number of hotkeys according to a definition table\n\nParameters:\n * def - table containing name-to-function definitions for the hotkeys supported by the Spoon. Each key is a hotkey name, and its value must be a function that will be called when the hotkey is invoked.\n * map - table containing name-to-hotkey definitions and an optional message to be displayed via `hs.alert()` when the hotkey has been triggered, as supported by [bindHotkeys in the Spoon API](https://github.com/Hammerspoon/hammerspoon/blob/master/SPOONS.md#hotkeys). Not all the entries in `def` must be bound, but if any keys in `map` don't have a definition, an error will be produced.\n\nReturns:\n * None","examples":[],"file":"extensions/spoons/spoons.lua","lineno":"123","name":"bindHotkeysToSpec","notes":[],"parameters":[" * def - table containing name-to-function definitions for the hotkeys supported by the Spoon. Each key is a hotkey name, and its value must be a function that will be called when the hotkey is invoked."," * map - table containing name-to-hotkey definitions and an optional message to be displayed via `hs.alert()` when the hotkey has been triggered, as supported by [bindHotkeys in the Spoon API](https://github.com/Hammerspoon/hammerspoon/blob/master/SPOONS.md#hotkeys). Not all the entries in `def` must be bound, but if any keys in `map` don't have a definition, an error will be produced."],"returns":[" * None"],"signature":"hs.spoons.bindHotkeysToSpec(def, map) -> none","stripped_doc":"","type":"Function"},"isInstalled":{"def":"hs.spoons.isInstalled(name) -> table | nil","desc":"Check if a given Spoon is installed.","doc":"Check if a given Spoon is installed.\n\nParameters:\n * name - Name of the Spoon to check.\n\nReturns:\n * If the Spoon is installed, it returns a table with the Spoon information as returned by `list()`. Returns `nil` if the Spoon is not installed.","examples":[],"file":"extensions/spoons/spoons.lua","lineno":"182","name":"isInstalled","notes":[],"parameters":[" * name - Name of the Spoon to check."],"returns":[" * If the Spoon is installed, it returns a table with the Spoon information as returned by `list()`. Returns `nil` if the Spoon is not installed."],"signature":"hs.spoons.isInstalled(name) -> table | nil","stripped_doc":"","type":"Function"},"isLoaded":{"def":"hs.spoons.isLoaded(name) -> boolean | nil","desc":"Check if a given Spoon is loaded.","doc":"Check if a given Spoon is loaded.\n\nParameters:\n * name - Name of the Spoon to check.\n\nReturns:\n * `true` if the Spoon is loaded, `nil` otherwise.","examples":[],"file":"extensions/spoons/spoons.lua","lineno":"201","name":"isLoaded","notes":[],"parameters":[" * name - Name of the Spoon to check."],"returns":[" * `true` if the Spoon is loaded, `nil` otherwise."],"signature":"hs.spoons.isLoaded(name) -> boolean | nil","stripped_doc":"","type":"Function"},"list":{"def":"hs.spoons.list() -> table","desc":"Return a list of installed/loaded Spoons","doc":"Return a list of installed/loaded Spoons\n\nParameters:\n * onlyLoaded - only return loaded Spoons (skips those that are installed but not loaded). Defaults to `false`\n\nReturns:\n * Table with a list of installed/loaded spoons (depending on the value of `onlyLoaded`). Each entry is a table with the following entries:\n   * `name` - Spoon name\n   * `loaded` - boolean indication of whether the Spoon is loaded (`true`) or only installed (`false`)\n   * `version` - Spoon version number. Available only for loaded Spoons.","examples":[],"file":"extensions/spoons/spoons.lua","lineno":"148","name":"list","notes":[],"parameters":[" * onlyLoaded - only return loaded Spoons (skips those that are installed but not loaded). Defaults to `false`"],"returns":[" * Table with a list of installed/loaded spoons (depending on the value of `onlyLoaded`). Each entry is a table with the following entries:","   * `name` - Spoon name","   * `loaded` - boolean indication of whether the Spoon is loaded (`true`) or only installed (`false`)","   * `version` - Spoon version number. Available only for loaded Spoons."],"signature":"hs.spoons.list() -> table","stripped_doc":"","type":"Function"},"newSpoon":{"def":"hs.spoons.newSpoon(name, basedir, metadata, [template]) -> string | nil","desc":"Create a skeleton for a new Spoon","doc":"Create a skeleton for a new Spoon\n\nParameters:\n * name: name of the new spoon, without the `.spoon` extension\n * basedir: (optional) directory where to create the template. Defaults to `~/.hammerspoon/Spoons`\n * metadata: (optional) table containing metadata values to be inserted in the template. Provided values are merged with the defaults. Defaults to:\n   ```\n   {\n     version = \"0.1\",\n     author = \"Your Name <your@email.org>\",\n     homepage = \"https://github.com/Hammerspoon/Spoons\",\n     license = \"MIT - https://opensource.org/licenses/MIT\",\n     download_url = \"https://github.com/Hammerspoon/Spoons/raw/master/Spoons/\"..name..\".spoon.zip\"\n   }\n   ```\n * template: (optional) absolute path of the template to use for the `init.lua` file of the new Spoon. Defaults to the `templates/init.tpl` file included with Hammerspoon.\n\nReturns:\n * The full directory path where the template was created, or `nil` if there was an error.","examples":[],"file":"extensions/spoons/spoons.lua","lineno":"40","name":"newSpoon","notes":[],"parameters":[" * name: name of the new spoon, without the `.spoon` extension"," * basedir: (optional) directory where to create the template. Defaults to `~/.hammerspoon/Spoons`"," * metadata: (optional) table containing metadata values to be inserted in the template. Provided values are merged with the defaults. Defaults to: ``` { version = \"0.1\", author = \"Your Name <your@email.org>\", homepage = \"https://github.com/Hammerspoon/Spoons\", license = \"MIT - https://opensource.org/licenses/MIT\", download_url = \"https://github.com/Hammerspoon/Spoons/raw/master/Spoons/\"..name..\".spoon.zip\" } ```"," * template: (optional) absolute path of the template to use for the `init.lua` file of the new Spoon. Defaults to the `templates/init.tpl` file included with Hammerspoon."],"returns":[" * The full directory path where the template was created, or `nil` if there was an error."],"signature":"hs.spoons.newSpoon(name, basedir, metadata, [template]) -> string | nil","stripped_doc":"","type":"Function"},"resourcePath":{"def":"hs.spoons.resourcePath(partial) -> string","desc":"Return full path of an object within a spoon directory, given its partial path.","doc":"Return full path of an object within a spoon directory, given its partial path.\n\nParameters:\n * partial - path of a file relative to the Spoon directory. For example `images/img1.png` will refer to a file within the `images` directory of the Spoon.\n\nReturns:\n * Absolute path of the file. Note: no existence or other checks are done on the path.","examples":[],"file":"extensions/spoons/spoons.lua","lineno":"110","name":"resourcePath","notes":[],"parameters":[" * partial - path of a file relative to the Spoon directory. For example `images/img1.png` will refer to a file within the `images` directory of the Spoon."],"returns":[" * Absolute path of the file. Note: no existence or other checks are done on the path."],"signature":"hs.spoons.resourcePath(partial) -> string","stripped_doc":"","type":"Function"},"scriptPath":{"def":"hs.spoons.scriptPath([n]) -> string","desc":"Return path of the current spoon.","doc":"Return path of the current spoon.\n\nParameters:\n * n - (optional) stack level for which to get the path. Defaults to 2, which will return the path of the spoon which called `scriptPath()`\n\nReturns:\n * String with the path from where the calling code was loaded.","examples":[],"file":"extensions/spoons/spoons.lua","lineno":"95","name":"scriptPath","notes":[],"parameters":[" * n - (optional) stack level for which to get the path. Defaults to 2, which will return the path of the spoon which called `scriptPath()`"],"returns":[" * String with the path from where the calling code was loaded."],"signature":"hs.spoons.scriptPath([n]) -> string","stripped_doc":"","type":"Function"},"use":{"def":"hs.spoons.use(name, arg, [noerror]) -> boolean | nil","desc":"Declaratively load and configure a Spoon","doc":"Declaratively load and configure a Spoon\n\nParameters:\n * name - the name of the Spoon to load (without the `.spoon` extension).\n * arg - if provided, can be used to specify the configuration of the Spoon. The following keys are recognized (all are optional):\n   * config - a table containing variables to be stored in the Spoon object to configure it. For example, `config = { answer = 42 }` will result in `spoon.<LoadedSpoon>.answer` being set to 42.\n   * hotkeys - a table containing hotkey bindings. If provided, will be passed as-is to the Spoon's `bindHotkeys()` method. The special string `\"default\"` can be given to use the Spoons `defaultHotkeys` variable, if it exists.\n   * fn - a function which will be called with the freshly-loaded Spoon object as its first argument.\n   * loglevel - if the Spoon has a variable called `logger`, its `setLogLevel()` method will be called with this value.\n   * start - if `true`, call the Spoon's `start()` method after configuring everything else.\n * noerror - if `true`, don't log an error if the Spoon is not installed, simply return `nil`.\n\nReturns:\n * `true` if the spoon was loaded, `nil` otherwise","examples":[],"file":"extensions/spoons/spoons.lua","lineno":"220","name":"use","notes":[],"parameters":[" * name - the name of the Spoon to load (without the `.spoon` extension)."," * arg - if provided, can be used to specify the configuration of the Spoon. The following keys are recognized (all are optional):\n   * config - a table containing variables to be stored in the Spoon object to configure it. For example, `config = { answer = 42 }` will result in `spoon.<LoadedSpoon>.answer` being set to 42.\n   * hotkeys - a table containing hotkey bindings. If provided, will be passed as-is to the Spoon's `bindHotkeys()` method. The special string `\"default\"` can be given to use the Spoons `defaultHotkeys` variable, if it exists.\n   * fn - a function which will be called with the freshly-loaded Spoon object as its first argument.\n   * loglevel - if the Spoon has a variable called `logger`, its `setLogLevel()` method will be called with this value.\n   * start - if `true`, call the Spoon's `start()` method after configuring everything else."," * noerror - if `true`, don't log an error if the Spoon is not installed, simply return `nil`."],"returns":[" * `true` if the spoon was loaded, `nil` otherwise"],"signature":"hs.spoons.use(name, arg, [noerror]) -> boolean | nil","stripped_doc":"","type":"Function"}}