{"color":{"type":"Module","doc":"A panel that allows users to select a color.","def":"-> hs.dialog.color"},"alert":{"def":"hs.dialog.alert(x, y, callbackFn, message, [informativeText], [buttonOne], [buttonTwo], [style]) -> string","desc":"Displays a simple non-blocking dialog box using `NSAlert` and a hidden `hs.webview` that's automatically destroyed when the alert is closed.","doc":"Displays a simple non-blocking dialog box using `NSAlert` and a hidden `hs.webview` that's automatically destroyed when the alert is closed.\n\nParameters:\n * x - A number containing the horizontal co-ordinate of the top-left point of the dialog box. Defaults to 1.\n * y - A number containing the vertical co-ordinate of the top-left point of the dialog box. Defaults to 1.\n * callbackFn - The callback function that's called when a button is pressed.\n * message - The message text to display.\n * [informativeText] - Optional informative text to display.\n * [buttonOne] - An optional value for the first button as a string. Defaults to \"OK\".\n * [buttonTwo] - An optional value for the second button as a string. If `nil` is used, no second button will be displayed.\n * [style] - An optional style of the dialog box as a string. Defaults to \"warning\".\n\nReturns:\n * nil\n\nNotes:\n * The optional values must be entered in order (i.e. you can't supply `style` without also supplying `buttonOne` and `buttonTwo`).\n * [style] can be \"warning\", \"informational\" or \"critical\". If something other than these string values is given, it will use \"informational\".\n * Example:\n     ```lua\n     testCallbackFn = function(result) print(\"Callback Result: \" .. result) end\n     hs.dialog.alert(100, 100, testCallbackFn, \"Message\", \"Informative Text\", \"Button One\", \"Button Two\", \"NSCriticalAlertStyle\")\n     hs.dialog.alert(200, 200, testCallbackFn, \"Message\", \"Informative Text\", \"Single Button\")```","examples":[],"file":"extensions/dialog/dialog.lua","lineno":"20","name":"alert","notes":[" * The optional values must be entered in order (i.e. you can't supply `style` without also supplying `buttonOne` and `buttonTwo`)."," * [style] can be \"warning\", \"informational\" or \"critical\". If something other than these string values is given, it will use \"informational\"."," * Example:","     ```lua","     testCallbackFn = function(result) print(\"Callback Result: \" .. result) end","     hs.dialog.alert(100, 100, testCallbackFn, \"Message\", \"Informative Text\", \"Button One\", \"Button Two\", \"NSCriticalAlertStyle\")","     hs.dialog.alert(200, 200, testCallbackFn, \"Message\", \"Informative Text\", \"Single Button\")```"],"parameters":[" * x - A number containing the horizontal co-ordinate of the top-left point of the dialog box. Defaults to 1."," * y - A number containing the vertical co-ordinate of the top-left point of the dialog box. Defaults to 1."," * callbackFn - The callback function that's called when a button is pressed."," * message - The message text to display."," * [informativeText] - Optional informative text to display."," * [buttonOne] - An optional value for the first button as a string. Defaults to \"OK\"."," * [buttonTwo] - An optional value for the second button as a string. If `nil` is used, no second button will be displayed."," * [style] - An optional style of the dialog box as a string. Defaults to \"warning\"."],"returns":[" * nil"],"signature":"hs.dialog.alert(x, y, callbackFn, message, [informativeText], [buttonOne], [buttonTwo], [style]) -> string","stripped_doc":"","type":"Function"},"blockAlert":{"def":"hs.dialog.blockAlert(message, informativeText, [buttonOne], [buttonTwo], [style]) -> string","desc":"Displays a simple dialog box using `NSAlert` that will halt Lua code processing until the alert is closed.","doc":"Displays a simple dialog box using `NSAlert` that will halt Lua code processing until the alert is closed.\n\nParameters:\n * message - The message text to display.\n * informativeText - The informative text to display.\n * [buttonOne] - An optional value for the first button as a string. Defaults to \"OK\".\n * [buttonTwo] - An optional value for the second button as a string. If `nil` is used, no second button will be displayed.\n * [style] - An optional style of the dialog box as a string. Defaults to \"informational\".\n\nReturns:\n * The value of the button as a string.\n\nNotes:\n * The optional values must be entered in order (i.e. you can't supply `style` without also supplying `buttonOne` and `buttonTwo`).\n * [style] can be \"warning\", \"informational\" or \"critical\". If something other than these string values is given, it will use \"informational\".\n * Example:\n     `hs.dialog.blockAlert(\"Message\", \"Informative Text\", \"Button One\", \"Button Two\", \"NSCriticalAlertStyle\")`","examples":[],"file":"extensions/dialog/libdialog.m","lineno":"564","name":"blockAlert","notes":[" * The optional values must be entered in order (i.e. you can't supply `style` without also supplying `buttonOne` and `buttonTwo`)."," * [style] can be \"warning\", \"informational\" or \"critical\". If something other than these string values is given, it will use \"informational\"."," * Example:","     `hs.dialog.blockAlert(\"Message\", \"Informative Text\", \"Button One\", \"Button Two\", \"NSCriticalAlertStyle\")`"],"parameters":[" * message - The message text to display."," * informativeText - The informative text to display."," * [buttonOne] - An optional value for the first button as a string. Defaults to \"OK\"."," * [buttonTwo] - An optional value for the second button as a string. If `nil` is used, no second button will be displayed."," * [style] - An optional style of the dialog box as a string. Defaults to \"informational\"."],"returns":[" * The value of the button as a string."],"signature":"hs.dialog.blockAlert(message, informativeText, [buttonOne], [buttonTwo], [style]) -> string","stripped_doc":"","type":"Function"},"chooseFileOrFolder":{"def":"hs.dialog.chooseFileOrFolder([message], [defaultPath], [canChooseFiles], [canChooseDirectories], [allowsMultipleSelection], [allowedFileTypes], [resolvesAliases]) -> string","desc":"Displays a file and/or folder selection dialog box using NSOpenPanel.","doc":"Displays a file and/or folder selection dialog box using NSOpenPanel.\n\nParameters:\n * [message] - The optional message text to display.\n * [defaultPath] - The optional path you want to dialog to open to.\n * [canChooseFiles] - Whether or not the user can select files. Defaults to `true`.\n * [canChooseDirectories] - Whether or not the user can select folders. Default to `false`.\n * [allowsMultipleSelection] - Allow multiple selections of files and/or folders. Defaults to `false`.\n * [allowedFileTypes] - An optional table of allowed file types. Defaults to `true`.\n * [resolvesAliases] - An optional boolean that indicates whether the panel resolves aliases.\n\nReturns:\n * The selected files in a table or `nil` if cancel was pressed.\n\nNotes:\n * The optional values must be entered in order (i.e. you can't supply `allowsMultipleSelection` without also supplying `canChooseFiles` and `canChooseDirectories`).\n * Example:\n     `hs.inspect(hs.dialog.chooseFileOrFolder(\"Please select a file:\", \"~/Desktop\", true, false, true, {\"jpeg\", \"pdf\"}, true))`","examples":[],"file":"extensions/dialog/libdialog.m","lineno":"327","name":"chooseFileOrFolder","notes":[" * The optional values must be entered in order (i.e. you can't supply `allowsMultipleSelection` without also supplying `canChooseFiles` and `canChooseDirectories`)."," * Example:","     `hs.inspect(hs.dialog.chooseFileOrFolder(\"Please select a file:\", \"~/Desktop\", true, false, true, {\"jpeg\", \"pdf\"}, true))`"],"parameters":[" * [message] - The optional message text to display."," * [defaultPath] - The optional path you want to dialog to open to."," * [canChooseFiles] - Whether or not the user can select files. Defaults to `true`."," * [canChooseDirectories] - Whether or not the user can select folders. Default to `false`."," * [allowsMultipleSelection] - Allow multiple selections of files and/or folders. Defaults to `false`."," * [allowedFileTypes] - An optional table of allowed file types. Defaults to `true`."," * [resolvesAliases] - An optional boolean that indicates whether the panel resolves aliases."],"returns":[" * The selected files in a table or `nil` if cancel was pressed."],"signature":"hs.dialog.chooseFileOrFolder([message], [defaultPath], [canChooseFiles], [canChooseDirectories], [allowsMultipleSelection], [allowedFileTypes], [resolvesAliases]) -> string","stripped_doc":"","type":"Function"},"textPrompt":{"def":"hs.dialog.textPrompt(message, informativeText, [defaultText], [buttonOne], [buttonTwo], [secureField]) -> string, string","desc":"Displays a simple text input dialog box.","doc":"Displays a simple text input dialog box.\n\nParameters:\n * message - The message text to display\n * informativeText - The informative text to display\n * [defaultText] - The informative text to display\n * [buttonOne] - An optional value for the first button as a string\n * [buttonTwo] - An optional value for the second button as a string\n * [secureField] - An optional boolean. If true, PasswordField instead of TextField. Defaults to false.\n\nReturns:\n * The value of the button as a string\n * The value of the text input as a string\n\nNotes:\n * `buttonOne` defaults to \"OK\" if no value is supplied.\n * `buttonOne` will also be triggered by pressing `ENTER`, whereas `buttonTwo` will be triggered by pressing `ESC`.\n * Examples:\n     `hs.dialog.textPrompt(\"Main message.\", \"Please enter something:\")`\n     `hs.dialog.textPrompt(\"Main message.\", \"Please enter something:\", \"Default Value\", \"OK\")`\n     `hs.dialog.textPrompt(\"Main message.\", \"Please enter something:\", \"Default Value\", \"OK\", \"Cancel\")`\n     `hs.dialog.textPrompt(\"Main message.\", \"Please enter something:\", \"\", \"OK\", \"Cancel\", true)`","examples":[],"file":"extensions/dialog/libdialog.m","lineno":"665","name":"textPrompt","notes":[" * `buttonOne` defaults to \"OK\" if no value is supplied."," * `buttonOne` will also be triggered by pressing `ENTER`, whereas `buttonTwo` will be triggered by pressing `ESC`."," * Examples:","     `hs.dialog.textPrompt(\"Main message.\", \"Please enter something:\")`","     `hs.dialog.textPrompt(\"Main message.\", \"Please enter something:\", \"Default Value\", \"OK\")`","     `hs.dialog.textPrompt(\"Main message.\", \"Please enter something:\", \"Default Value\", \"OK\", \"Cancel\")`","     `hs.dialog.textPrompt(\"Main message.\", \"Please enter something:\", \"\", \"OK\", \"Cancel\", true)`"],"parameters":[" * message - The message text to display"," * informativeText - The informative text to display"," * [defaultText] - The informative text to display"," * [buttonOne] - An optional value for the first button as a string"," * [buttonTwo] - An optional value for the second button as a string"," * [secureField] - An optional boolean. If true, PasswordField instead of TextField. Defaults to false."],"returns":[" * The value of the button as a string"," * The value of the text input as a string"],"signature":"hs.dialog.textPrompt(message, informativeText, [defaultText], [buttonOne], [buttonTwo], [secureField]) -> string, string","stripped_doc":"","type":"Function"},"webviewAlert":{"def":"hs.dialog.webviewAlert(webview, callbackFn, message, [informativeText], [buttonOne], [buttonTwo], [style]) -> string","desc":"Displays a simple dialog box using `NSAlert` in a `hs.webview`.","doc":"Displays a simple dialog box using `NSAlert` in a `hs.webview`.\n\nParameters:\n * webview - The `hs.webview` to display the alert on.\n * callbackFn - The callback function that's called when a button is pressed.\n * message - The message text to display.\n * [informativeText] - Optional informative text to display.\n * [buttonOne] - An optional value for the first button as a string. Defaults to \"OK\".\n * [buttonTwo] - An optional value for the second button as a string. If `nil` is used, no second button will be displayed.\n * [style] - An optional style of the dialog box as a string. Defaults to \"warning\".\n\nReturns:\n * nil\n\nNotes:\n * This alert is will prevent the user from interacting with the `hs.webview` until a button is pressed on the alert.\n * The optional values must be entered in order (i.e. you can't supply `style` without also supplying `buttonOne` and `buttonTwo`).\n * [style] can be \"warning\", \"informational\" or \"critical\". If something other than these string values is given, it will use \"informational\".\n * Example:\n     ```lua\n     testCallbackFn = function(result) print(\"Callback Result: \" .. result) end\n     testWebviewA = hs.webview.newBrowser(hs.geometry.rect(250, 250, 250, 250)):show()\n     testWebviewB = hs.webview.newBrowser(hs.geometry.rect(450, 450, 450, 450)):show()\n     hs.dialog.webviewAlert(testWebviewA, testCallbackFn, \"Message\", \"Informative Text\", \"Button One\", \"Button Two\", \"warning\")\n     hs.dialog.webviewAlert(testWebviewB, testCallbackFn, \"Message\", \"Informative Text\", \"Single Button\")```","examples":[],"file":"extensions/dialog/libdialog.m","lineno":"440","name":"webviewAlert","notes":[" * This alert is will prevent the user from interacting with the `hs.webview` until a button is pressed on the alert."," * The optional values must be entered in order (i.e. you can't supply `style` without also supplying `buttonOne` and `buttonTwo`)."," * [style] can be \"warning\", \"informational\" or \"critical\". If something other than these string values is given, it will use \"informational\"."," * Example:","     ```lua","     testCallbackFn = function(result) print(\"Callback Result: \" .. result) end","     testWebviewA = hs.webview.newBrowser(hs.geometry.rect(250, 250, 250, 250)):show()","     testWebviewB = hs.webview.newBrowser(hs.geometry.rect(450, 450, 450, 450)):show()","     hs.dialog.webviewAlert(testWebviewA, testCallbackFn, \"Message\", \"Informative Text\", \"Button One\", \"Button Two\", \"warning\")","     hs.dialog.webviewAlert(testWebviewB, testCallbackFn, \"Message\", \"Informative Text\", \"Single Button\")```"],"parameters":[" * webview - The `hs.webview` to display the alert on."," * callbackFn - The callback function that's called when a button is pressed."," * message - The message text to display."," * [informativeText] - Optional informative text to display."," * [buttonOne] - An optional value for the first button as a string. Defaults to \"OK\"."," * [buttonTwo] - An optional value for the second button as a string. If `nil` is used, no second button will be displayed."," * [style] - An optional style of the dialog box as a string. Defaults to \"warning\"."],"returns":[" * nil"],"signature":"hs.dialog.webviewAlert(webview, callbackFn, message, [informativeText], [buttonOne], [buttonTwo], [style]) -> string","stripped_doc":"","type":"Function"}}