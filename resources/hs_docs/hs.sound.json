{"currentTime":{"def":"hs.sound:currentTime([seekTime]) -> soundObject | seconds","desc":"Get or set the current seek offset within an `hs.sound` object.","doc":"Get or set the current seek offset within an `hs.sound` object.\n\nParameters:\n * seekTime - An optional number of seconds to seek to within the sound object\n\nReturns:\n * If a parameter is provided, returns the sound object; otherwise returns the current position.","examples":[],"file":"extensions/sound/libsound.m","lineno":"435","name":"currentTime","notes":[],"parameters":[" * seekTime - An optional number of seconds to seek to within the sound object"],"returns":[" * If a parameter is provided, returns the sound object; otherwise returns the current position."],"signature":"hs.sound:currentTime([seekTime]) -> soundObject | seconds","stripped_doc":"","type":"Method"},"device":{"def":"hs.sound:device([deviceUID]) -> soundObject | UID string","desc":"Get or set the playback device to use for an `hs.sound` object","doc":"Get or set the playback device to use for an `hs.sound` object\n\nParameters:\n * deviceUID - An optional string containing the UID of an `hs.audiodevice` object to use for playback of this sound. Use an explicit nil to use the system's default device\n\nReturns:\n * If a parameter is provided, returns the sound object; otherwise returns the current setting.\n\nNotes:\n * To obtain the UID of a sound device, see `hs.audiodevice:uid()`","examples":[],"file":"extensions/sound/libsound.m","lineno":"400","name":"device","notes":[" * To obtain the UID of a sound device, see `hs.audiodevice:uid()`"],"parameters":[" * deviceUID - An optional string containing the UID of an `hs.audiodevice` object to use for playback of this sound. Use an explicit nil to use the system's default device"],"returns":[" * If a parameter is provided, returns the sound object; otherwise returns the current setting."],"signature":"hs.sound:device([deviceUID]) -> soundObject | UID string","stripped_doc":"","type":"Method"},"duration":{"def":"hs.sound:duration() -> seconds","desc":"Gets the length of an `hs.sound` object","doc":"Gets the length of an `hs.sound` object\n\nParameters:\n * None\n\nReturns:\n * A number containing the length of the sound, in seconds","examples":[],"file":"extensions/sound/libsound.m","lineno":"457","name":"duration","notes":[],"parameters":[" * None"],"returns":[" * A number containing the length of the sound, in seconds"],"signature":"hs.sound:duration() -> seconds","stripped_doc":"","type":"Method"},"getAudioEffectNames":{"def":"hs.sound.getAudioEffectNames() -> table","desc":"Gets a table of installed Audio Units Effect names.","doc":"Gets a table of installed Audio Units Effect names.\n\nParameters:\n * None\n\nReturns:\n * A table containing the names of all installed Audio Units Effects.\n\nNotes:\n * Example usage: `hs.inspect(hs.audiounit.getAudioEffectNames())`","examples":[],"file":"extensions/sound/libsound.m","lineno":"62","name":"getAudioEffectNames","notes":[" * Example usage: `hs.inspect(hs.audiounit.getAudioEffectNames())`"],"parameters":[" * None"],"returns":[" * A table containing the names of all installed Audio Units Effects."],"signature":"hs.sound.getAudioEffectNames() -> table","stripped_doc":"","type":"Function"},"getByFile":{"def":"hs.sound.getByFile(path) -> sound or nil","desc":"Creates an `hs.sound` object from a file","doc":"Creates an `hs.sound` object from a file\n\nParameters:\n * path - A string containing the path to a sound file\n\nReturns:\n * An `hs.sound` object or nil if the file could not be loaded","examples":[],"file":"extensions/sound/libsound.m","lineno":"128","name":"getByFile","notes":[],"parameters":[" * path - A string containing the path to a sound file"],"returns":[" * An `hs.sound` object or nil if the file could not be loaded"],"signature":"hs.sound.getByFile(path) -> sound or nil","stripped_doc":"","type":"Constructor"},"getByName":{"def":"hs.sound.getByName(name) -> sound or nil","desc":"Creates an `hs.sound` object from a named sound","doc":"Creates an `hs.sound` object from a named sound\n\nParameters:\n * name - A string containing the name of a sound\n\nReturns:\n * An `hs.sound` object or nil if no matching sound could be found\n\nNotes:\n * Sounds can only be loaded by name if they are System Sounds (i.e. those found in ~/Library/Sounds, /Library/Sounds, /Network/Library/Sounds and /System/Library/Sounds) or are sound files that have previously been loaded and named","examples":[],"file":"extensions/sound/libsound.m","lineno":"103","name":"getByName","notes":[" * Sounds can only be loaded by name if they are System Sounds (i.e. those found in ~/Library/Sounds, /Library/Sounds, /Network/Library/Sounds and /System/Library/Sounds) or are sound files that have previously been loaded and named"],"parameters":[" * name - A string containing the name of a sound"],"returns":[" * An `hs.sound` object or nil if no matching sound could be found"],"signature":"hs.sound.getByName(name) -> sound or nil","stripped_doc":"","type":"Constructor"},"isPlaying":{"def":"hs.sound:isPlaying() -> bool","desc":"Gets the current playback state of an `hs.sound` object","doc":"Gets the current playback state of an `hs.sound` object\n\nParameters:\n * None\n\nReturns:\n * A boolean, true if the sound is currently playing, otherwise false","examples":[],"file":"extensions/sound/libsound.m","lineno":"496","name":"isPlaying","notes":[],"parameters":[" * None"],"returns":[" * A boolean, true if the sound is currently playing, otherwise false"],"signature":"hs.sound:isPlaying() -> bool","stripped_doc":"","type":"Method"},"loopSound":{"def":"hs.sound:loopSound([loop]) -> soundObject | bool","desc":"Get or set the looping behaviour of an `hs.sound` object","doc":"Get or set the looping behaviour of an `hs.sound` object\n\nParameters:\n * loop - An optional boolean, true to loop playback, false to not loop\n\nReturns:\n * If a parameter is provided, returns the sound object; otherwise returns the current setting.\n\nNotes:\n * If you have registered a callback function for completion of a sound's playback, it will not be called when the sound loops","examples":[],"file":"extensions/sound/libsound.m","lineno":"316","name":"loopSound","notes":[" * If you have registered a callback function for completion of a sound's playback, it will not be called when the sound loops"],"parameters":[" * loop - An optional boolean, true to loop playback, false to not loop"],"returns":[" * If a parameter is provided, returns the sound object; otherwise returns the current setting."],"signature":"hs.sound:loopSound([loop]) -> soundObject | bool","stripped_doc":"","type":"Method"},"name":{"def":"hs.sound:name([soundName]) -> soundObject | name string","desc":"Get or set the name of an `hs.sound` object","doc":"Get or set the name of an `hs.sound` object\n\nParameters:\n * soundName - An optional string to use as the name of the object; use an explicit nil to remove the name\n\nReturns:\n * If a parameter is provided, returns the sound object; otherwise returns the current setting.\n\nNotes:\n * If remove the sound name by specifying `nil`, the sound will automatically be set to stop when Hammerspoon is reloaded.","examples":[],"file":"extensions/sound/libsound.m","lineno":"370","name":"name","notes":[" * If remove the sound name by specifying `nil`, the sound will automatically be set to stop when Hammerspoon is reloaded."],"parameters":[" * soundName - An optional string to use as the name of the object; use an explicit nil to remove the name"],"returns":[" * If a parameter is provided, returns the sound object; otherwise returns the current setting."],"signature":"hs.sound:name([soundName]) -> soundObject | name string","stripped_doc":"","type":"Method"},"pause":{"def":"hs.sound:pause() -> soundObject | bool","desc":"Pauses an `hs.sound` object","doc":"Pauses an `hs.sound` object\n\nParameters:\n * None\n\nReturns:\n * The `hs.sound` object if the command was successful, otherwise false.","examples":[],"file":"extensions/sound/libsound.m","lineno":"253","name":"pause","notes":[],"parameters":[" * None"],"returns":[" * The `hs.sound` object if the command was successful, otherwise false."],"signature":"hs.sound:pause() -> soundObject | bool","stripped_doc":"","type":"Method"},"play":{"def":"hs.sound:play() -> soundObject | bool","desc":"Plays an `hs.sound` object","doc":"Plays an `hs.sound` object\n\nParameters:\n * None\n\nReturns:\n * The `hs.sound` object if the command was successful, otherwise false.","examples":[],"file":"extensions/sound/libsound.m","lineno":"228","name":"play","notes":[],"parameters":[" * None"],"returns":[" * The `hs.sound` object if the command was successful, otherwise false."],"signature":"hs.sound:play() -> soundObject | bool","stripped_doc":"","type":"Method"},"resume":{"def":"hs.sound:resume() -> soundObject | bool","desc":"Resumes playing a paused `hs.sound` object","doc":"Resumes playing a paused `hs.sound` object\n\nParameters:\n * None\n\nReturns:\n * The `hs.sound` object if the command was successful, otherwise false.","examples":[],"file":"extensions/sound/libsound.m","lineno":"274","name":"resume","notes":[],"parameters":[" * None"],"returns":[" * The `hs.sound` object if the command was successful, otherwise false."],"signature":"hs.sound:resume() -> soundObject | bool","stripped_doc":"","type":"Method"},"setCallback":{"def":"hs.sound:setCallback(function) -> soundObject","desc":"Set or remove the callback for receiving completion notification for the sound object.","doc":"Set or remove the callback for receiving completion notification for the sound object.\n\nParameters:\n * function - A function which should be called when the sound completes playing.  Specify an explicit nil to remove the callback function.\n\nReturns:\n * the sound object\n\nNotes:\n * the callback function should accept two parameters and return none.  The parameters passed to the callback function are:\n   * state - a boolean flag indicating if the sound completed playing.  Returns true if playback completes properly, or false if a decoding error occurs or if the sound is stopped early with `hs.sound:stop`.\n   * sound - the soundObject userdata","examples":[],"file":"extensions/sound/libsound.m","lineno":"513","name":"setCallback","notes":[" * the callback function should accept two parameters and return none.  The parameters passed to the callback function are:","   * state - a boolean flag indicating if the sound completed playing.  Returns true if playback completes properly, or false if a decoding error occurs or if the sound is stopped early with `hs.sound:stop`.","   * sound - the soundObject userdata"],"parameters":[" * function - A function which should be called when the sound completes playing.  Specify an explicit nil to remove the callback function."],"returns":[" * the sound object"],"signature":"hs.sound:setCallback(function) -> soundObject","stripped_doc":"","type":"Method"},"soundFileTypes":{"def":"hs.sound.soundFileTypes() -> table","desc":"Gets the supported sound file types","doc":"Gets the supported sound file types\n\nParameters:\n * None\n\nReturns:\n * A table containing the sound file filename extensions that are supported by the system\n\nNotes:\n * This function is unlikely to be tremendously useful, as filename extensions are essentially meaningless. The data returned by `hs.sound.soundTypes()` is far more valuable","examples":[],"file":"extensions/sound/libsound.m","lineno":"200","name":"soundFileTypes","notes":[" * This function is unlikely to be tremendously useful, as filename extensions are essentially meaningless. The data returned by `hs.sound.soundTypes()` is far more valuable"],"parameters":[" * None"],"returns":[" * A table containing the sound file filename extensions that are supported by the system"],"signature":"hs.sound.soundFileTypes() -> table","stripped_doc":"","type":"Function"},"soundTypes":{"def":"hs.sound.soundTypes() -> table","desc":"Gets the supported UTI sound file formats","doc":"Gets the supported UTI sound file formats\n\nParameters:\n * None\n\nReturns:\n * A table containing the UTI sound formats that are supported by the system","examples":[],"file":"extensions/sound/libsound.m","lineno":"184","name":"soundTypes","notes":[],"parameters":[" * None"],"returns":[" * A table containing the UTI sound formats that are supported by the system"],"signature":"hs.sound.soundTypes() -> table","stripped_doc":"","type":"Function"},"stop":{"def":"hs.sound:stop() -> soundObject | bool","desc":"Stops playing an `hs.sound` object","doc":"Stops playing an `hs.sound` object\n\nParameters:\n * None\n\nReturns:\n * The `hs.sound` object if the command was successful, otherwise false.","examples":[],"file":"extensions/sound/libsound.m","lineno":"295","name":"stop","notes":[],"parameters":[" * None"],"returns":[" * The `hs.sound` object if the command was successful, otherwise false."],"signature":"hs.sound:stop() -> soundObject | bool","stripped_doc":"","type":"Method"},"stopOnReload":{"def":"hs.sound:stopOnReload([stopOnReload]) -> soundObject | bool","desc":"Get or set whether a sound should be stopped when Hammerspoon reloads its configuration","doc":"Get or set whether a sound should be stopped when Hammerspoon reloads its configuration\n\nParameters:\n * stopOnReload - An optional boolean, true to stop playback when Hammerspoon reloads its config, false to continue playback regardless.  Defaults to true.\n\nReturns:\n * If a parameter is provided, returns the sound object; otherwise returns the current setting.\n\nNotes:\n * This method can only be used on a named `hs.sound` object, see `hs.sound:name()`","examples":[],"file":"extensions/sound/libsound.m","lineno":"341","name":"stopOnReload","notes":[" * This method can only be used on a named `hs.sound` object, see `hs.sound:name()`"],"parameters":[" * stopOnReload - An optional boolean, true to stop playback when Hammerspoon reloads its config, false to continue playback regardless.  Defaults to true."],"returns":[" * If a parameter is provided, returns the sound object; otherwise returns the current setting."],"signature":"hs.sound:stopOnReload([stopOnReload]) -> soundObject | bool","stripped_doc":"","type":"Method"},"systemSounds":{"def":"hs.sound.systemSounds() -> table","desc":"Gets a table of available system sounds","doc":"Gets a table of available system sounds\n\nParameters:\n * None\n\nReturns:\n * A table containing all of the available sound files (i.e. those found in ~/Library/Sounds, /Library/Sounds, /Network/Library/Sounds and /System/Library/Sounds)\n\nNotes:\n * The sounds listed by this function can be loaded using `hs.sound.getByName()`","examples":[],"file":"extensions/sound/libsound.m","lineno":"150","name":"systemSounds","notes":[" * The sounds listed by this function can be loaded using `hs.sound.getByName()`"],"parameters":[" * None"],"returns":[" * A table containing all of the available sound files (i.e. those found in ~/Library/Sounds, /Library/Sounds, /Network/Library/Sounds and /System/Library/Sounds)"],"signature":"hs.sound.systemSounds() -> table","stripped_doc":"","type":"Function"},"volume":{"def":"hs.sound:volume([level]) -> soundObject | number","desc":"Get or set the playback volume of an `hs.sound` object","doc":"Get or set the playback volume of an `hs.sound` object\n\nParameters:\n * level - A number between 0.0 and 1.0, representing the volume of the sound object relative to the current system volume\n\nReturns:\n * If a parameter is provided, returns the sound object; otherwise returns the current value.","examples":[],"file":"extensions/sound/libsound.m","lineno":"474","name":"volume","notes":[],"parameters":[" * level - A number between 0.0 and 1.0, representing the volume of the sound object relative to the current system volume"],"returns":[" * If a parameter is provided, returns the sound object; otherwise returns the current value."],"signature":"hs.sound:volume([level]) -> soundObject | number","stripped_doc":"","type":"Method"}}