{"flags":{"def":"hs.network.reachability.flags[]","desc":"A table containing the numeric value for the possible flags returned by the [hs.network.reachability:status](#status) method or in the `flags` parameter of the callback function.","doc":"A table containing the numeric value for the possible flags returned by the [hs.network.reachability:status](#status) method or in the `flags` parameter of the callback function.\n\n* transientConnection  - indicates if the destination is reachable through a transient connection\n* reachable            - indicates if the destination is reachable\n* connectionRequired   - indicates that a connection of some sort is required for the destination to be reachable\n* connectionOnTraffic  - indicates if the destination requires a connection which will be initiated when traffic to the destination is present\n* interventionRequired - indicates if the destination requires a connection which will require user activity to initiate\n* connectionOnDemand   - indicates if the destination requires a connection which will be initiated on demand through the CFSocketStream interface\n* isLocalAddress       - indicates if the destination is actually a local address\n* isDirect             - indicates if the destination is directly connected","file":"extensions/network/libnetwork_reachability.m","lineno":"328","name":"flags","signature":"hs.network.reachability.flags[]","stripped_doc":"* transientConnection  - indicates if the destination is reachable through a transient connection\n* reachable            - indicates if the destination is reachable\n* connectionRequired   - indicates that a connection of some sort is required for the destination to be reachable\n* connectionOnTraffic  - indicates if the destination requires a connection which will be initiated when traffic to the destination is present\n* interventionRequired - indicates if the destination requires a connection which will require user activity to initiate\n* connectionOnDemand   - indicates if the destination requires a connection which will be initiated on demand through the CFSocketStream interface\n* isLocalAddress       - indicates if the destination is actually a local address\n* isDirect             - indicates if the destination is directly connected","type":"Constant"},"forAddress":{"def":"hs.network.reachability.forAddress(address) -> reachabilityObject","desc":"Returns a reachability object for the specified network address.","doc":"Returns a reachability object for the specified network address.\n\nParameters:\n * address - a string or number representing an IPv4 or IPv6 network address to get or track reachability status for.  If the argument is a number, it is treated as the 32 bit numerical representation of an IPv4 address.\n\nReturns:\n * a reachability object for the specified network address.\n\nNotes:\n * this object will reflect reachability status for any interface available on the computer.  To check for reachability from a specific interface, use [hs.network.reachability.forAddressPair](#addressPair).","examples":[],"file":"extensions/network/libnetwork_reachability.m","lineno":"74","name":"forAddress","notes":[" * this object will reflect reachability status for any interface available on the computer.  To check for reachability from a specific interface, use [hs.network.reachability.forAddressPair](#addressPair)."],"parameters":[" * address - a string or number representing an IPv4 or IPv6 network address to get or track reachability status for.  If the argument is a number, it is treated as the 32 bit numerical representation of an IPv4 address."],"returns":[" * a reachability object for the specified network address."],"signature":"hs.network.reachability.forAddress(address) -> reachabilityObject","stripped_doc":"","type":"Constructor"},"forAddressPair":{"def":"hs.network.reachability.forAddressPair(localAddress, remoteAddress) -> reachabilityObject","desc":"Returns a reachability object for the specified network address from the specified localAddress.","doc":"Returns a reachability object for the specified network address from the specified localAddress.\n\nParameters:\n * localAddress - a string or number representing a local IPv4 or IPv6 network address. If the address specified is not present on the computer, the remote address will be unreachable.\n * remoteAddress - a string or number representing an IPv4 or IPv6 network address to get or track reachability status for.  If the argument is a number, it is treated as the 32 bit numerical representation of an IPv4 address.\n\nReturns:\n * a reachability object for the specified network address.\n\nNotes:\n * this object will reflect reachability status for a specific interface on the computer.  To check for reachability from any interface, use [hs.network.reachability.forAddress](#address).\n * this constructor can be used to test for a specific local network.","examples":[],"file":"extensions/network/libnetwork_reachability.m","lineno":"105","name":"forAddressPair","notes":[" * this object will reflect reachability status for a specific interface on the computer.  To check for reachability from any interface, use [hs.network.reachability.forAddress](#address)."," * this constructor can be used to test for a specific local network."],"parameters":[" * localAddress - a string or number representing a local IPv4 or IPv6 network address. If the address specified is not present on the computer, the remote address will be unreachable."," * remoteAddress - a string or number representing an IPv4 or IPv6 network address to get or track reachability status for.  If the argument is a number, it is treated as the 32 bit numerical representation of an IPv4 address."],"returns":[" * a reachability object for the specified network address."],"signature":"hs.network.reachability.forAddressPair(localAddress, remoteAddress) -> reachabilityObject","stripped_doc":"","type":"Constructor"},"forHostName":{"def":"hs.network.reachability.forHostName(hostName) -> reachabilityObject","desc":"Returns a reachability object for the specified host.","doc":"Returns a reachability object for the specified host.\n\nParameters:\n * hostName - a string containing the hostname of a machine to check or track the reachability status for.\n\nReturns:\n * a reachability object for the specified host.\n\nNotes:\n * this object will reflect reachability status for any interface available on the computer.\n * this constructor relies on the hostname being resolvable, possibly through DNS, Bonjour, locally defined, etc.","examples":[],"file":"extensions/network/libnetwork_reachability.m","lineno":"150","name":"forHostName","notes":[" * this object will reflect reachability status for any interface available on the computer."," * this constructor relies on the hostname being resolvable, possibly through DNS, Bonjour, locally defined, etc."],"parameters":[" * hostName - a string containing the hostname of a machine to check or track the reachability status for."],"returns":[" * a reachability object for the specified host."],"signature":"hs.network.reachability.forHostName(hostName) -> reachabilityObject","stripped_doc":"","type":"Constructor"},"internet":{"def":"hs.network.reachability.internet() -> reachabilityObject","desc":"Creates a reachability object for testing internet access","doc":"Creates a reachability object for testing internet access\n\nParameters:\n * None\n\nReturns:\n * a reachability object\n\nNotes:\n * This is equivalent to `hs.network.reachability.forAddress(\"0.0.0.0\")`\n * This constructor assumes that a default route for IPv4 traffic is sufficient to determine internet access.  If you are on an IPv6 only network which does not also provide IPv4 route mapping, you should probably use something along the lines of `hs.network.reachability.forAddress(\"::\")` instead.","examples":[],"file":"extensions/network/network_reachability.lua","lineno":"45","name":"internet","notes":[" * This is equivalent to `hs.network.reachability.forAddress(\"0.0.0.0\")`"," * This constructor assumes that a default route for IPv4 traffic is sufficient to determine internet access.  If you are on an IPv6 only network which does not also provide IPv4 route mapping, you should probably use something along the lines of `hs.network.reachability.forAddress(\"::\")` instead."],"parameters":[" * None"],"returns":[" * a reachability object"],"signature":"hs.network.reachability.internet() -> reachabilityObject","stripped_doc":"","type":"Constructor"},"linkLocal":{"def":"hs.network.reachability.linkLocal() -> reachabilityObject","desc":"Creates a reachability object for testing IPv4 link local networking","doc":"Creates a reachability object for testing IPv4 link local networking\n\nParameters:\n * None\n\nReturns:\n * a reachability object\n\nNotes:\n * This is equivalent to `hs.network.reachability.forAddress(\"169.254.0.0\")`\n * You can use this to determine if any interface has an IPv4 link local address (i.e. zero conf or local only networking) by checking the \"isDirect\" flag:\n   * `hs.network.reachability.linklocal():status() & hs.network.reachability.flags.isDirect`\n * If the internet is reachable, then this network will also be reachable by default -- use the isDirect flag to ensure that the route is local.","examples":[],"file":"extensions/network/network_reachability.lua","lineno":"63","name":"linkLocal","notes":[" * This is equivalent to `hs.network.reachability.forAddress(\"169.254.0.0\")`"," * You can use this to determine if any interface has an IPv4 link local address (i.e. zero conf or local only networking) by checking the \"isDirect\" flag:","   * `hs.network.reachability.linklocal():status() & hs.network.reachability.flags.isDirect`"," * If the internet is reachable, then this network will also be reachable by default -- use the isDirect flag to ensure that the route is local."],"parameters":[" * None"],"returns":[" * a reachability object"],"signature":"hs.network.reachability.linkLocal() -> reachabilityObject","stripped_doc":"","type":"Constructor"},"setCallback":{"def":"hs.network.reachability:setCallback(function) -> reachabilityObject","desc":"Set or remove the callback function for a reachability object","doc":"Set or remove the callback function for a reachability object\n\nParameters:\n * a function or nil to set or remove the reachability object callback function\n\nReturns:\n * the reachability object\n\nNotes:\n * The callback function will be invoked each time the status for the given reachability object changes.  The callback function should expect 2 arguments, the reachability object itself and a numeric representation of the reachability flags, and should not return anything.\n * This method just sets the callback function.  You can start or stop the watcher with [hs.network.reachability:start](#start) or [hs.network.reachability:stop](#stop)","examples":[],"file":"extensions/network/libnetwork_reachability.m","lineno":"237","name":"setCallback","notes":[" * The callback function will be invoked each time the status for the given reachability object changes.  The callback function should expect 2 arguments, the reachability object itself and a numeric representation of the reachability flags, and should not return anything."," * This method just sets the callback function.  You can start or stop the watcher with [hs.network.reachability:start](#start) or [hs.network.reachability:stop](#stop)"],"parameters":[" * a function or nil to set or remove the reachability object callback function"],"returns":[" * the reachability object"],"signature":"hs.network.reachability:setCallback(function) -> reachabilityObject","stripped_doc":"","type":"Method"},"start":{"def":"hs.network.reachability:start() -> reachabilityObject","desc":"Starts watching the reachability object for changes and invokes the callback function (if any) when a change occurs.","doc":"Starts watching the reachability object for changes and invokes the callback function (if any) when a change occurs.\n\nParameters:\n * None\n\nReturns:\n * the reachability object\n\nNotes:\n * The callback function should be specified with [hs.network.reachability:setCallback](#setCallback).","examples":[],"file":"extensions/network/libnetwork_reachability.m","lineno":"272","name":"start","notes":[" * The callback function should be specified with [hs.network.reachability:setCallback](#setCallback)."],"parameters":[" * None"],"returns":[" * the reachability object"],"signature":"hs.network.reachability:start() -> reachabilityObject","stripped_doc":"","type":"Method"},"status":{"def":"hs.network.reachability:status() -> number","desc":"Returns the reachability status for the object","doc":"Returns the reachability status for the object\n\nParameters:\n * None\n\nReturns:\n * a numeric representation of the reachability status\n\nNotes:\n * The numeric representation is made up from a combination of the flags defined in [hs.network.reachability.flags](#flags).","examples":[],"file":"extensions/network/libnetwork_reachability.m","lineno":"176","name":"status","notes":[" * The numeric representation is made up from a combination of the flags defined in [hs.network.reachability.flags](#flags)."],"parameters":[" * None"],"returns":[" * a numeric representation of the reachability status"],"signature":"hs.network.reachability:status() -> number","stripped_doc":"","type":"Method"},"statusString":{"def":"hs.network.reachability:statusString() -> string","desc":"Returns a string representation of the reachability status for the object","doc":"Returns a string representation of the reachability status for the object\n\nParameters:\n * None\n\nReturns:\n * a string representation of the reachability status for the object\n\nNotes:\n * This is included primarily for debugging, but may be more useful when you just want a quick look at the reachability status for display or testing.\n * The string will be made up of the following flags:\n   * 't'|'-' indicates if the destination is reachable through a transient connection\n   * 'R'|'-' indicates if the destination is reachable\n   * 'c'|'-' indicates that a connection of some sort is required for the destination to be reachable\n   * 'C'|'-' indicates if the destination requires a connection which will be initiated when traffic to the destination is present\n   * 'i'|'-' indicates if the destination requires a connection which will require user activity to initiate\n   * 'D'|'-' indicates if the destination requires a connection which will be initiated on demand through the CFSocketStream interface\n   * 'l'|'-' indicates if the destination is actually a local address\n   * 'd'|'-' indicates if the destination is directly connected","examples":[],"file":"extensions/network/libnetwork_reachability.m","lineno":"202","name":"statusString","notes":[" * This is included primarily for debugging, but may be more useful when you just want a quick look at the reachability status for display or testing."," * The string will be made up of the following flags:","   * 't'|'-' indicates if the destination is reachable through a transient connection","   * 'R'|'-' indicates if the destination is reachable","   * 'c'|'-' indicates that a connection of some sort is required for the destination to be reachable","   * 'C'|'-' indicates if the destination requires a connection which will be initiated when traffic to the destination is present","   * 'i'|'-' indicates if the destination requires a connection which will require user activity to initiate","   * 'D'|'-' indicates if the destination requires a connection which will be initiated on demand through the CFSocketStream interface","   * 'l'|'-' indicates if the destination is actually a local address","   * 'd'|'-' indicates if the destination is directly connected"],"parameters":[" * None"],"returns":[" * a string representation of the reachability status for the object"],"signature":"hs.network.reachability:statusString() -> string","stripped_doc":"","type":"Method"},"stop":{"def":"hs.network.reachability:stop() -> reachabilityObject","desc":"Stops watching the reachability object for changes.","doc":"Stops watching the reachability object for changes.\n\nParameters:\n * None\n\nReturns:\n * the reachability object","examples":[],"file":"extensions/network/libnetwork_reachability.m","lineno":"306","name":"stop","notes":[],"parameters":[" * None"],"returns":[" * the reachability object"],"signature":"hs.network.reachability:stop() -> reachabilityObject","stripped_doc":"","type":"Method"}}