{"ansiTerminalColors":{"def":"hs.drawing.color.ansiTerminalColors","desc":"A collection of colors representing the ANSI Terminal color sequences.  The color definitions are based upon code found at https://github.com/balthamos/geektool-3 in the /NerdTool/classes/ANSIEscapeHelper.m file.","doc":"A collection of colors representing the ANSI Terminal color sequences.  The color definitions are based upon code found at https://github.com/balthamos/geektool-3 in the /NerdTool/classes/ANSIEscapeHelper.m file.\n\nNotes:\n * This is not a constant, so you can adjust the colors at run time for your installation if desired.","file":"extensions/drawing/color/drawing_color.lua","lineno":"129","name":"ansiTerminalColors","notes":[" * This is not a constant, so you can adjust the colors at run time for your installation if desired."],"signature":"hs.drawing.color.ansiTerminalColors","stripped_doc":"","type":"Variable"},"asHSB":{"def":"hs.drawing.color.asHSB(color) -> table | string","desc":"Returns a table containing the HSB representation of the specified color.","doc":"Returns a table containing the HSB representation of the specified color.\n\nParameters:\n * color - a table specifying a color as described in the module definition (see `hs.drawing.color` in the online help or Dash documentation)\n\nReturns:\n * a table containing the hue, saturation, brightness, and alpha keys representing the specified color as HSB or a string describing the color's colorspace if conversion is not possible.\n\nNotes:\n * See also `hs.drawing.color.asRGB`","examples":[],"file":"extensions/drawing/color/libdrawing_color.m","lineno":"66","name":"asHSB","notes":[" * See also `hs.drawing.color.asRGB`"],"parameters":[" * color - a table specifying a color as described in the module definition (see `hs.drawing.color` in the online help or Dash documentation)"],"returns":[" * a table containing the hue, saturation, brightness, and alpha keys representing the specified color as HSB or a string describing the color's colorspace if conversion is not possible."],"signature":"hs.drawing.color.asHSB(color) -> table | string","stripped_doc":"","type":"Function"},"asRGB":{"def":"hs.drawing.color.asRGB(color) -> table | string","desc":"Returns a table containing the RGB representation of the specified color.","doc":"Returns a table containing the RGB representation of the specified color.\n\nParameters:\n * color - a table specifying a color as described in the module definition (see `hs.drawing.color` in the online help or Dash documentation)\n\nReturns:\n * a table containing the red, blue, green, and alpha keys representing the specified color as RGB or a string describing the color's colorspace if conversion is not possible.\n\nNotes:\n * See also `hs.drawing.color.asHSB`","examples":[],"file":"extensions/drawing/color/libdrawing_color.m","lineno":"34","name":"asRGB","notes":[" * See also `hs.drawing.color.asHSB`"],"parameters":[" * color - a table specifying a color as described in the module definition (see `hs.drawing.color` in the online help or Dash documentation)"],"returns":[" * a table containing the red, blue, green, and alpha keys representing the specified color as RGB or a string describing the color's colorspace if conversion is not possible."],"signature":"hs.drawing.color.asRGB(color) -> table | string","stripped_doc":"","type":"Function"},"colorsFor":{"def":"hs.drawing.color.colorsFor(list) -> table","desc":"Returns a table containing the colors for the specified system color list or hs.drawing.color collection.","doc":"Returns a table containing the colors for the specified system color list or hs.drawing.color collection.\n\nParameters:\n * list - the name of the list to provide colors for\n\nReturns:\n * a table whose keys are made from the colors provided by the color list or nil if the list does not exist.\n\nNotes:\n * Where possible, each color node is provided as its RGB color representation.  Where this is not possible, the color node contains the keys `list` and `name` which identify the indicated color.  This means that you can use the following wherever a color parameter is expected: `hs.drawing.color.colorsFor(list)[\"color-name\"]`\n * This function provides a tostring metatable method which allows listing the defined colors in the list in the Hammerspoon console with: `hs.drawing.colorsFor(list)`\n * See also `hs.drawing.color.lists`","examples":[],"file":"extensions/drawing/color/drawing_color.lua","lineno":"100","name":"colorsFor","notes":[" * Where possible, each color node is provided as its RGB color representation.  Where this is not possible, the color node contains the keys `list` and `name` which identify the indicated color.  This means that you can use the following wherever a color parameter is expected: `hs.drawing.color.colorsFor(list)[\"color-name\"]`"," * This function provides a tostring metatable method which allows listing the defined colors in the list in the Hammerspoon console with: `hs.drawing.colorsFor(list)`"," * See also `hs.drawing.color.lists`"],"parameters":[" * list - the name of the list to provide colors for"],"returns":[" * a table whose keys are made from the colors provided by the color list or nil if the list does not exist."],"signature":"hs.drawing.color.colorsFor(list) -> table","stripped_doc":"","type":"Function"},"definedCollections":{"def":"hs.drawing.color.definedCollections","desc":"This table contains this list of defined color collections provided by the `hs.drawing.color` module.  Collections differ from the system color lists in that you can modify the color values their members contain by modifying the table at `hs.drawing.color.<collection>.<color>` and future references to that color will reflect the new changes, thus allowing you to customize the palettes for your installation.","doc":"This table contains this list of defined color collections provided by the `hs.drawing.color` module.  Collections differ from the system color lists in that you can modify the color values their members contain by modifying the table at `hs.drawing.color.<collection>.<color>` and future references to that color will reflect the new changes, thus allowing you to customize the palettes for your installation.\n\nNotes:\n * This list is a constant, but the members it refers to are not.","file":"extensions/drawing/color/drawing_color.lua","lineno":"361","name":"definedCollections","notes":[" * This list is a constant, but the members it refers to are not."],"signature":"hs.drawing.color.definedCollections","stripped_doc":"","type":"Constant"},"hammerspoon":{"def":"hs.drawing.color.hammerspoon","desc":"This table contains a collection of various useful pre-defined colors:","doc":"This table contains a collection of various useful pre-defined colors:\n * osx_red - The same red used for OS X window close buttons\n * osx_green - The same green used for OS X window zoom buttons\n * osx_yellow - The same yellow used for OS X window minimize buttons\n\nNotes:\n * This is not a constant, so you can adjust the colors at run time for your installation if desired.\n\n * Previous versions of Hammerspoon included these colors at the `hs.drawing.color` path; for backwards compatibility, the keys of this table are replicated at that path as long as they do not conflict with any other color collection or function within the `hs.drawing.color` module.  You really should adjust your code to use the collection, as this may change in the future.","file":"extensions/drawing/color/drawing_color.lua","lineno":"330","name":"hammerspoon","notes":[" * This is not a constant, so you can adjust the colors at run time for your installation if desired.",""," * Previous versions of Hammerspoon included these colors at the `hs.drawing.color` path; for backwards compatibility, the keys of this table are replicated at that path as long as they do not conflict with any other color collection or function within the `hs.drawing.color` module.  You really should adjust your code to use the collection, as this may change in the future."],"signature":"hs.drawing.color.hammerspoon","stripped_doc":" * osx_red - The same red used for OS X window close buttons\n * osx_green - The same green used for OS X window zoom buttons\n * osx_yellow - The same yellow used for OS X window minimize buttons\n * Previous versions of Hammerspoon included these colors at the `hs.drawing.color` path; for backwards compatibility, the keys of this table are replicated at that path as long as they do not conflict with any other color collection or function within the `hs.drawing.color` module.  You really should adjust your code to use the collection, as this may change in the future.","type":"Variable"},"lists":{"def":"hs.drawing.color.lists() -> table","desc":"Returns a table containing the system color lists and hs.drawing.color collections with their defined colors.","doc":"Returns a table containing the system color lists and hs.drawing.color collections with their defined colors.\n\nParameters:\n * None\n\nReturns:\n * a table whose keys are made from the currently defined system color lists and hs.drawing.color collections.  Each color list key refers to a table whose keys make up the colors provided by the specific color list.\n\nNotes:\n * Where possible, each color node is provided as its RGB color representation.  Where this is not possible, the color node contains the keys `list` and `name` which identify the indicated color.  This means that you can use the following wherever a color parameter is expected: `hs.drawing.color.lists()[\"list-name\"][\"color-name\"]`\n * This function provides a tostring metatable method which allows listing the defined color lists in the Hammerspoon console with: `hs.drawing.color.lists()`\n * See also `hs.drawing.color.colorsFor`","examples":[],"file":"extensions/drawing/color/libdrawing_color.m","lineno":"8","name":"lists","notes":[" * Where possible, each color node is provided as its RGB color representation.  Where this is not possible, the color node contains the keys `list` and `name` which identify the indicated color.  This means that you can use the following wherever a color parameter is expected: `hs.drawing.color.lists()[\"list-name\"][\"color-name\"]`"," * This function provides a tostring metatable method which allows listing the defined color lists in the Hammerspoon console with: `hs.drawing.color.lists()`"," * See also `hs.drawing.color.colorsFor`"],"parameters":[" * None"],"returns":[" * a table whose keys are made from the currently defined system color lists and hs.drawing.color collections.  Each color list key refers to a table whose keys make up the colors provided by the specific color list."],"signature":"hs.drawing.color.lists() -> table","stripped_doc":"","type":"Function"},"x11":{"def":"hs.drawing.color.x11","desc":"A collection of colors representing the X11 color names as defined at  https://en.wikipedia.org/wiki/Web_colors#X11_color_names (names in lowercase)","doc":"A collection of colors representing the X11 color names as defined at  https://en.wikipedia.org/wiki/Web_colors#X11_color_names (names in lowercase)\n\nNotes:\n * This is not a constant, so you can adjust the colors at run time for your installation if desired.","file":"extensions/drawing/color/drawing_color.lua","lineno":"170","name":"x11","notes":[" * This is not a constant, so you can adjust the colors at run time for your installation if desired."],"signature":"hs.drawing.color.x11","stripped_doc":"","type":"Variable"}}