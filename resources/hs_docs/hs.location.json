{"geocoder":{"type":"Module","doc":"Converts between GPS coordinates and more user friendly representations like an address or points of interest.\n\nThis module converts between GPS coordinates and the user-friendly representation of that coordinate. A user-friendly representation of the coordinate typically consists of the street, city, state, and country information corresponding to the given location, but it may also contain a relevant point of interest, landmarks, or other identifying information.\n\nYour computer must have network access for the geocoder object to return detailed placemark information and is rate limited.  Geocoding requests are rate-limited, so making too many requests in a short period of time may cause some of the requests to fail with a network error.\n\nUse of this module does not require Location Services to be enabled for Hammerspoon.\n\nA `placemarkTable` is returned to the callback functions used by the constructor methods of this module.  These tables may contain one or more of the following keys:\n * `addressDictionary`     - a table containing key-value pairs for the components of the address for the placemark\n * `administrativeArea`    - a string containing the state or province associated with the placemark\n * `subAdministrativeArea` - a string containing additional administrative area information for the placemark\n * `areasOfInterest`       - a table as an array of strings describing areas of interest associated with the placemark\n * `country`               - a string containing the name of the country associated with the placemark\n * `countryCode`           - a string containing the standard abbreviation for the country associated with the placemark\n * `inlandWater`           - a string containing the name of the inland water body associated with the placemark\n * `locality`              - a string containing the city associated with the placemark\n * `subLocality`           - a string containing additional city-level information for the placemark\n * `location`              - the locationTable, as described in the `hs.location` module header, for the placemark\n * `name`                  - a string containing the name of the placemark\n * `ocean`                 - a string containing the name of the ocean associated with the placemark\n * `postalCode`            - a string containing the postal code associated with the placemark\n * `region`                - a regionTable, as described in the `hs.location` module header, specifying the he geographic region associated with the placemark\n * `thoroughfare`          - a string containing the street address associated with the placemark\n * `subThoroughfare`       - a string containing additional street-level information for the placemark\n * `timeZone`              - a string containing the time zone associated with the placemark","def":"-> hs.location.geocoder"},"addMonitoredRegion":{"def":"hs.location:addMonitoredRegion(regionTable) -> locationObject | nil","desc":"Adds a region to be monitored by Location Services","doc":"Adds a region to be monitored by Location Services\n\nParameters:\n * `regionTable` - a region table as described in the module header\n\nReturns:\n * if the region table was able to be added to Location Services for monitoring, returns the locationObject; otherwise returns nil\n\nNotes:\n * This method activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services.\n * If the `identifier` key is not provided, a new UUID string is generated and used as the identifier.\n * If the `identifier` key matches an already monitored region, this region will replace the existing one.","examples":[],"file":"extensions/location/location.lua","lineno":"358","name":"addMonitoredRegion","notes":[" * This method activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services."," * If the `identifier` key is not provided, a new UUID string is generated and used as the identifier."," * If the `identifier` key matches an already monitored region, this region will replace the existing one."],"parameters":[" * `regionTable` - a region table as described in the module header"],"returns":[" * if the region table was able to be added to Location Services for monitoring, returns the locationObject; otherwise returns nil"],"signature":"hs.location:addMonitoredRegion(regionTable) -> locationObject | nil","stripped_doc":"","type":"Method"},"authorizationStatus":{"def":"hs.location.authorizationStatus() -> string","desc":"Returns a string describing the authorization status of Hammerspoon's use of Location Services.","doc":"Returns a string describing the authorization status of Hammerspoon's use of Location Services.\n\nParameters:\n * None\n\nReturns:\n * a string matching one of the following:\n   * \"undefined\"  - The user has not yet made a choice regarding whether Hammerspoon can use location services.\n   * \"restricted\" - Hammerspoon is not authorized to use location services. The user cannot change this status, possibly due to active restrictions such as parental controls being in place.\n   * \"denied\"     - The user explicitly denied the use of location services for Hammerspoon or location services are currently disabled in System Preferences.\n   * \"authorized\" - Hammerspoon is authorized to use location services.\n\nNotes:\n * The first time you use a function which requires Location Services, you will be prompted to grant Hammerspoon access. If you wish to change this permission after the initial prompt, you may do so from the Location Services section of the Security & Privacy section in the System Preferences application.","examples":[],"file":"extensions/location/liblocation.m","lineno":"207","name":"authorizationStatus","notes":[" * The first time you use a function which requires Location Services, you will be prompted to grant Hammerspoon access. If you wish to change this permission after the initial prompt, you may do so from the Location Services section of the Security & Privacy section in the System Preferences application."],"parameters":[" * None"],"returns":[" * a string matching one of the following:","   * \"undefined\"  - The user has not yet made a choice regarding whether Hammerspoon can use location services.","   * \"restricted\" - Hammerspoon is not authorized to use location services. The user cannot change this status, possibly due to active restrictions such as parental controls being in place.","   * \"denied\"     - The user explicitly denied the use of location services for Hammerspoon or location services are currently disabled in System Preferences.","   * \"authorized\" - Hammerspoon is authorized to use location services."],"signature":"hs.location.authorizationStatus() -> string","stripped_doc":"","type":"Function"},"callback":{"def":"hs.location:callback(fn) -> locationObject","desc":"Sets or removes the callback function for this locationObject","doc":"Sets or removes the callback function for this locationObject\n\nParameters:\n * a function, or nil to remove the current function, which will be invoked as a callback for messages generated by this locationObject.  The callback function should expect 3 or 4 arguments as follows:\n   * the locationObject itself\n   * a string specifying the message generated by the locationObject:\n     * \"didChangeAuthorizationStatus\" - the user has changed the authorization status for Hammerspoon's use of Location Services.  The third argument will be a string as described in the [hs.location.authorizationStatus](#authorizationStatus) function.\n     * \"didUpdateLocations\"           - the current location has changed or been refined.  This message will only occur if location tracking has been enabled with [hs.location:startTracking](#startTracking). The third argument will be a table containing one or more locationTables as array elements.  The most recent location update is contained in the last element of the array.\n     * \"didFailWithError\"             - there was an error retrieving location information. The third argument will be a string describing the error that occurred.\n     * \"didStartMonitoringForRegion\"  - a new region has successfully been added to the regions being monitored.  The third argument will be the regionTable for the region which was just added.\n     * \"monitoringDidFailForRegion\"   - an error occurred while trying to add a new region to the list of monitored regions. The third argument will be the regionTable for the region that could not be added, and the fourth argument will be a string containing an error message describing why monitoring for the region failed.\n     * \"didEnterRegion\"               - the current location has entered a region with the `notifyOnEntry` field set to true specified with the [hs.location:addMonitoredRegion](#addMonitoredRegion) method. The third argument will be the regionTable for the region entered.\n     * \"didExitRegion\"                - the current location has exited a region with the `notifyOnExit` field set to true specified with the [hs.location:addMonitoredRegion](#addMonitoredRegion) method. The third argument will be the regionTable for the region exited.\n\nReturns:\n * the locationObject","examples":[],"file":"extensions/location/location.lua","lineno":"461","name":"callback","notes":[],"parameters":[" * a function, or nil to remove the current function, which will be invoked as a callback for messages generated by this locationObject.  The callback function should expect 3 or 4 arguments as follows:\n   * the locationObject itself\n   * a string specifying the message generated by the locationObject: * \"didChangeAuthorizationStatus\" - the user has changed the authorization status for Hammerspoon's use of Location Services.  The third argument will be a string as described in the [hs.location.authorizationStatus](#authorizationStatus) function. * \"didUpdateLocations\"           - the current location has changed or been refined.  This message will only occur if location tracking has been enabled with [hs.location:startTracking](#startTracking). The third argument will be a table containing one or more locationTables as array elements.  The most recent location update is contained in the last element of the array. * \"didFailWithError\"             - there was an error retrieving location information. The third argument will be a string describing the error that occurred. * \"didStartMonitoringForRegion\"  - a new region has successfully been added to the regions being monitored.  The third argument will be the regionTable for the region which was just added. * \"monitoringDidFailForRegion\"   - an error occurred while trying to add a new region to the list of monitored regions. The third argument will be the regionTable for the region that could not be added, and the fourth argument will be a string containing an error message describing why monitoring for the region failed. * \"didEnterRegion\"               - the current location has entered a region with the `notifyOnEntry` field set to true specified with the [hs.location:addMonitoredRegion](#addMonitoredRegion) method. The third argument will be the regionTable for the region entered. * \"didExitRegion\"                - the current location has exited a region with the `notifyOnExit` field set to true specified with the [hs.location:addMonitoredRegion](#addMonitoredRegion) method. The third argument will be the regionTable for the region exited."],"returns":[" * the locationObject"],"signature":"hs.location:callback(fn) -> locationObject","stripped_doc":"","type":"Method"},"currentRegion":{"def":"hs.location:currentRegion() -> identifier | nil","desc":"Returns the string identifier for the current region","doc":"Returns the string identifier for the current region\n\nParameters:\n * None\n\nReturns:\n * the string identifier for the region that the current location is within, or nil if the current location is not within a currently monitored region or location services cannot be enabled for Hammerspoon.\n\nNotes:\n * This method activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services.","examples":[],"file":"extensions/location/location.lua","lineno":"436","name":"currentRegion","notes":[" * This method activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services."],"parameters":[" * None"],"returns":[" * the string identifier for the region that the current location is within, or nil if the current location is not within a currently monitored region or location services cannot be enabled for Hammerspoon."],"signature":"hs.location:currentRegion() -> identifier | nil","stripped_doc":"","type":"Method"},"distance":{"def":"hs.location.distance(from, to) -> meters","desc":"Measures the distance between two points of latitude and longitude","doc":"Measures the distance between two points of latitude and longitude\n\nParameters:\n * `from` - A locationTable as described in the module header\n * `to`   - A locationTable as described in the module header\n\nReturns:\n * A number containing the distance between `from` and `to` in meters. The measurement is made by tracing a line that follows an idealised curvature of the earth\n\nNotes:\n * This function does not require Location Services to be enabled for Hammerspoon.","examples":[],"file":"extensions/location/liblocation.m","lineno":"245","name":"distance","notes":[" * This function does not require Location Services to be enabled for Hammerspoon."],"parameters":[" * `from` - A locationTable as described in the module header"," * `to`   - A locationTable as described in the module header"],"returns":[" * A number containing the distance between `from` and `to` in meters. The measurement is made by tracing a line that follows an idealised curvature of the earth"],"signature":"hs.location.distance(from, to) -> meters","stripped_doc":"","type":"Function"},"distanceFrom":{"def":"hs.location:distanceFrom(locationTable) -> distance | nil","desc":"Enable callbacks for location changes/refinements for this locationObject","doc":"Enable callbacks for location changes/refinements for this locationObject\n\nParameters:\n * None\n\nReturns:\n * the distance the specified location is from the current location in meters or nil if Location Services cannot be enabled for Hammerspoon. The measurement is made by tracing a line that follows an idealised curvature of the earth\n\nNotes:\n * This function activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services.","examples":[],"file":"extensions/location/location.lua","lineno":"300","name":"distanceFrom","notes":[" * This function activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services."],"parameters":[" * None"],"returns":[" * the distance the specified location is from the current location in meters or nil if Location Services cannot be enabled for Hammerspoon. The measurement is made by tracing a line that follows an idealised curvature of the earth"],"signature":"hs.location:distanceFrom(locationTable) -> distance | nil","stripped_doc":"","type":"Method"},"dstOffset":{"def":"hs.location.dstOffset() -> number","desc":"Returns a number giving the current daylight savings time offset","doc":"Returns a number giving the current daylight savings time offset\n\nParameters:\n * None\n\nReturns:\n * The number of minutes of daylight savings offset, zero if there is no offset\n\nNotes:\n * This value is derived from the currently configured system timezone, it does not use Location Services","examples":[],"file":"extensions/location/liblocation.m","lineno":"307","name":"dstOffset","notes":[" * This value is derived from the currently configured system timezone, it does not use Location Services"],"parameters":[" * None"],"returns":[" * The number of minutes of daylight savings offset, zero if there is no offset"],"signature":"hs.location.dstOffset() -> number","stripped_doc":"","type":"Function"},"get":{"def":"hs.location.get() -> locationTable or nil","desc":"Returns a table representing the current location","doc":"Returns a table representing the current location\n\nParameters:\n * None\n\nReturns:\n * If successful, a locationTable as described in the module header, otherwise nil.\n\nNotes:\n * This function activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services.\n * If access to Location Services is enabled for Hammerspoon, this function will return the most recent cached data for the computer's location.\n   * Internally, the Location Services cache is updated whenever additional WiFi networks are detected or lost (not necessarily joined). When update tracking is enabled with the [hs.location.start](#start) function, calculations based upon the RSSI of all currently seen networks are preformed more often to provide a more precise fix, but it's still based on the WiFi networks near you.","examples":[],"file":"extensions/location/liblocation.m","lineno":"282","name":"get","notes":[" * This function activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services."," * If access to Location Services is enabled for Hammerspoon, this function will return the most recent cached data for the computer's location.","   * Internally, the Location Services cache is updated whenever additional WiFi networks are detected or lost (not necessarily joined). When update tracking is enabled with the [hs.location.start](#start) function, calculations based upon the RSSI of all currently seen networks are preformed more often to provide a more precise fix, but it's still based on the WiFi networks near you."],"parameters":[" * None"],"returns":[" * If successful, a locationTable as described in the module header, otherwise nil."],"signature":"hs.location.get() -> locationTable or nil","stripped_doc":"","type":"Function"},"location":{"def":"hs.location:location() -> locationTable | nil","desc":"Returns the current location","doc":"Returns the current location\n\nParameters:\n * None\n\nReturns:\n * If successful, a locationTable as described in the module header, otherwise nil.\n\nNotes:\n * This function activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services.\n * If access to Location Services is enabled for Hammerspoon, this function will return the most recent cached data for the computer's location.\n   * Internally, the Location Services cache is updated whenever additional WiFi networks are detected or lost (not necessarily joined). When update tracking is enabled with the [hs.location.start](#start) function, calculations based upon the RSSI of all currently seen networks are preformed more often to provide a more precise fix, but it's still based on the WiFi networks near you.","examples":[],"file":"extensions/location/location.lua","lineno":"495","name":"location","notes":[" * This function activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services."," * If access to Location Services is enabled for Hammerspoon, this function will return the most recent cached data for the computer's location.","   * Internally, the Location Services cache is updated whenever additional WiFi networks are detected or lost (not necessarily joined). When update tracking is enabled with the [hs.location.start](#start) function, calculations based upon the RSSI of all currently seen networks are preformed more often to provide a more precise fix, but it's still based on the WiFi networks near you."],"parameters":[" * None"],"returns":[" * If successful, a locationTable as described in the module header, otherwise nil."],"signature":"hs.location:location() -> locationTable | nil","stripped_doc":"","type":"Method"},"monitoredRegions":{"def":"hs.location:monitoredRegions() -> table | nil","desc":"Returns a table containing the regionTables for the regions currently being monitored for this locationObject","doc":"Returns a table containing the regionTables for the regions currently being monitored for this locationObject\n\nParameters:\n * None\n\nReturns:\n * if Location Services can be enabled for Hammerspoon, returns a table containing regionTables for each region which is being monitored for this locationObject; otherwise nil\n\nNotes:\n * This method activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services.","examples":[],"file":"extensions/location/location.lua","lineno":"321","name":"monitoredRegions","notes":[" * This method activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services."],"parameters":[" * None"],"returns":[" * if Location Services can be enabled for Hammerspoon, returns a table containing regionTables for each region which is being monitored for this locationObject; otherwise nil"],"signature":"hs.location:monitoredRegions() -> table | nil","stripped_doc":"","type":"Method"},"new":{"def":"hs.location.new() -> locationObject","desc":"Create a new location object which can receive callbacks independent of other Hammerspoon use of Location Services.","doc":"Create a new location object which can receive callbacks independent of other Hammerspoon use of Location Services.\n\nParameters:\n * None\n\nReturns:\n * a locationObject\n\nNotes:\n * The locationObject created will receive callbacks independent of all other locationObjects and the legacy callback functions created with [hs.location.register](#register).  It can also receive callbacks for region changes which are not available through the legacy callback mechanism.","examples":[],"file":"extensions/location/location.lua","lineno":"221","name":"new","notes":[" * The locationObject created will receive callbacks independent of all other locationObjects and the legacy callback functions created with [hs.location.register](#register).  It can also receive callbacks for region changes which are not available through the legacy callback mechanism."],"parameters":[" * None"],"returns":[" * a locationObject"],"signature":"hs.location.new() -> locationObject","stripped_doc":"","type":"Constructor"},"register":{"def":"hs.location.register(tag, fn[, distance])","desc":"Registers a callback function to be called when the system location is updated","doc":"Registers a callback function to be called when the system location is updated\n\nParameters:\n * `tag`      - A string containing a unique tag, used to identify the callback later\n * `fn`       - A function to be called when the system location is updated. The function should expect a single argument which will be a locationTable as described in the module header.\n * `distance` - An optional number containing the minimum distance in meters that the system should have moved, before calling the callback. Defaults to 0\n\nReturns:\n * None","examples":[],"file":"extensions/location/location.lua","lineno":"139","name":"register","notes":[],"parameters":[" * `tag`      - A string containing a unique tag, used to identify the callback later"," * `fn`       - A function to be called when the system location is updated. The function should expect a single argument which will be a locationTable as described in the module header."," * `distance` - An optional number containing the minimum distance in meters that the system should have moved, before calling the callback. Defaults to 0"],"returns":[" * None"],"signature":"hs.location.register(tag, fn[, distance])","stripped_doc":"","type":"Function"},"removeMonitoredRegion":{"def":"hs.location:removeMonitoredRegion(identifier) -> locationObject | false | nil","desc":"Removes a monitored region from Location Services","doc":"Removes a monitored region from Location Services\n\nParameters:\n * `identifier` - a string which should contain the identifier of the region to remove from monitoring\n\nReturns:\n * if the region identifier matches a currently monitored region, returns the locationObject; if it does not match a currently monitored region, returns false; returns nil if an error occurs or if Location Services is not currently active (no function or method which activates Location Services has been invoked yet) or enabled for Hammerspoon.\n\nNotes:\n * This method activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services.\n * If the `identifier` key is not provided, a new UUID string is generated and used as the identifier.\n * If the `identifier` key matches an already monitored region, this region will replace the existing one.","examples":[],"file":"extensions/location/location.lua","lineno":"406","name":"removeMonitoredRegion","notes":[" * This method activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services."," * If the `identifier` key is not provided, a new UUID string is generated and used as the identifier."," * If the `identifier` key matches an already monitored region, this region will replace the existing one."],"parameters":[" * `identifier` - a string which should contain the identifier of the region to remove from monitoring"],"returns":[" * if the region identifier matches a currently monitored region, returns the locationObject; if it does not match a currently monitored region, returns false; returns nil if an error occurs or if Location Services is not currently active (no function or method which activates Location Services has been invoked yet) or enabled for Hammerspoon."],"signature":"hs.location:removeMonitoredRegion(identifier) -> locationObject | false | nil","stripped_doc":"","type":"Method"},"servicesEnabled":{"def":"hs.location.servicesEnabled() -> bool","desc":"Gets the state of OS X Location Services","doc":"Gets the state of OS X Location Services\n\nParameters:\n * None\n\nReturns:\n * True if Location Services are enabled, otherwise false","examples":[],"file":"extensions/location/liblocation.m","lineno":"192","name":"servicesEnabled","notes":[],"parameters":[" * None"],"returns":[" * True if Location Services are enabled, otherwise false"],"signature":"hs.location.servicesEnabled() -> bool","stripped_doc":"","type":"Function"},"start":{"def":"hs.location.start() -> boolean","desc":"Begins location tracking using OS X's Location Services so that registered callback functions can be invoked as the computer location changes.","doc":"Begins location tracking using OS X's Location Services so that registered callback functions can be invoked as the computer location changes.\n\nParameters:\n * None\n\nReturns:\n * True if the operation succeeded, otherwise false\n\nNotes:\n * This function activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services.","examples":[],"file":"extensions/location/location.lua","lineno":"179","name":"start","notes":[" * This function activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services."],"parameters":[" * None"],"returns":[" * True if the operation succeeded, otherwise false"],"signature":"hs.location.start() -> boolean","stripped_doc":"","type":"Function"},"startTracking":{"def":"hs.location:startTracking() -> locationObject","desc":"Enable callbacks for location changes/refinements for this locationObject","doc":"Enable callbacks for location changes/refinements for this locationObject\n\nParameters:\n * None\n\nReturns:\n * the locationObject\n\nNotes:\n * This function activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services.","examples":[],"file":"extensions/location/location.lua","lineno":"260","name":"startTracking","notes":[" * This function activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services."],"parameters":[" * None"],"returns":[" * the locationObject"],"signature":"hs.location:startTracking() -> locationObject","stripped_doc":"","type":"Method"},"stop":{"def":"hs.location.stop()","desc":"Stops location tracking.  Registered callback functions will cease to receive notification of location changes.","doc":"Stops location tracking.  Registered callback functions will cease to receive notification of location changes.\n\nParameters:\n * None\n\nReturns:\n * None","examples":[],"file":"extensions/location/location.lua","lineno":"201","name":"stop","notes":[],"parameters":[" * None"],"returns":[" * None"],"signature":"hs.location.stop()","stripped_doc":"","type":"Function"},"stopTracking":{"def":"hs.location:stopTracking() -> locationObject","desc":"Disable callbacks for location changes/refinements for this locationObject","doc":"Disable callbacks for location changes/refinements for this locationObject\n\nParameters:\n * None\n\nReturns:\n * the locationObject","examples":[],"file":"extensions/location/location.lua","lineno":"281","name":"stopTracking","notes":[],"parameters":[" * None"],"returns":[" * the locationObject"],"signature":"hs.location:stopTracking() -> locationObject","stripped_doc":"","type":"Method"},"sunrise":{"def":"hs.location.sunrise(latitude, longitude, offset[, date]) -> number or string","desc":"Returns the time of official sunrise for the supplied location","doc":"Returns the time of official sunrise for the supplied location\n\nParameters:\n * `latitude`  - A number containing a latitude\n * `longitude` - A number containing a longitude\n * `offset`    - A number containing the offset from UTC (in hours) for the given latitude/longitude.\n * `date`      - An optional table containing date information (equivalent to the output of ```os.date(\"*t\")```). Defaults to the current date\n\nReturns:\n * A number containing the time of sunrise (represented as seconds since the epoch) for the given date. If no date is given, the current date is used. If the sun doesn't rise on the given day, the string \"N/R\" is returned.\n\nNotes:\n * You can turn the return value into a more useful structure, with ```os.date(\"*t\", returnvalue)```\n * For compatibility with the locationTable object returned by [hs.location.get](#get), this function can also be invoked as `hs.location.sunrise(locationTable, offset[, date])`.","examples":[],"file":"extensions/location/liblocation.m","lineno":"503","name":"sunrise","notes":[" * You can turn the return value into a more useful structure, with ```os.date(\"*t\", returnvalue)```"," * For compatibility with the locationTable object returned by [hs.location.get](#get), this function can also be invoked as `hs.location.sunrise(locationTable, offset[, date])`."],"parameters":[" * `latitude`  - A number containing a latitude"," * `longitude` - A number containing a longitude"," * `offset`    - A number containing the offset from UTC (in hours) for the given latitude/longitude."," * `date`      - An optional table containing date information (equivalent to the output of ```os.date(\"*t\")```). Defaults to the current date"],"returns":[" * A number containing the time of sunrise (represented as seconds since the epoch) for the given date. If no date is given, the current date is used. If the sun doesn't rise on the given day, the string \"N/R\" is returned."],"signature":"hs.location.sunrise(latitude, longitude, offset[, date]) -> number or string","stripped_doc":"","type":"Function"},"sunset":{"def":"hs.location.sunset(latitude, longitude, offset[, date]) -> number or string","desc":"Returns the time of official sunset for the supplied location","doc":"Returns the time of official sunset for the supplied location\n\nParameters:\n * `latitude`  - A number containing a latitude\n * `longitude` - A number containing a longitude\n * `offset`    - A number containing the offset from UTC (in hours) for the given latitude/longitude.\n * `date`      - An optional table containing date information (equivalent to the output of ```os.date(\"*t\")```). Defaults to the current date\n\nReturns:\n * A number containing the time of sunset (represented as seconds since the epoch) for the given date. If no date is given, the current date is used. If the sun doesn't set on the given day, the string \"N/S\" is returned.\n\nNotes:\n * You can turn the return value into a more useful structure, with ```os.date(\"*t\", returnvalue)```\n * For compatibility with the locationTable object returned by [hs.location.get](#get), this function can also be invoked as `hs.location.sunset(locationTable, offset[, date])`.","examples":[],"file":"extensions/location/liblocation.m","lineno":"526","name":"sunset","notes":[" * You can turn the return value into a more useful structure, with ```os.date(\"*t\", returnvalue)```"," * For compatibility with the locationTable object returned by [hs.location.get](#get), this function can also be invoked as `hs.location.sunset(locationTable, offset[, date])`."],"parameters":[" * `latitude`  - A number containing a latitude"," * `longitude` - A number containing a longitude"," * `offset`    - A number containing the offset from UTC (in hours) for the given latitude/longitude."," * `date`      - An optional table containing date information (equivalent to the output of ```os.date(\"*t\")```). Defaults to the current date"],"returns":[" * A number containing the time of sunset (represented as seconds since the epoch) for the given date. If no date is given, the current date is used. If the sun doesn't set on the given day, the string \"N/S\" is returned."],"signature":"hs.location.sunset(latitude, longitude, offset[, date]) -> number or string","stripped_doc":"","type":"Function"},"unregister":{"def":"hs.location.unregister(tag)","desc":"Unregisters a callback","doc":"Unregisters a callback\n\nParameters:\n * `tag` - A string containing the unique tag a callback was registered with\n\nReturns:\n * None","examples":[],"file":"extensions/location/location.lua","lineno":"166","name":"unregister","notes":[],"parameters":[" * `tag` - A string containing the unique tag a callback was registered with"],"returns":[" * None"],"signature":"hs.location.unregister(tag)","stripped_doc":"","type":"Function"}}
