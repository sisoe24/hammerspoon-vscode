{"watcher":{"type":"Module","doc":"Watch for events on certain UI elements (including windows and applications)\n\nYou can watch the following events:\n### Application-level events\nSee hs.application.watcher for more events you can watch.\n* hs.uielement.watcher.applicationActivated: The current application switched to this one.\n* hs.uielement.watcher.applicationDeactivated: The current application is no longer this one.\n* hs.uielement.watcher.applicationHidden: The application was hidden.\n* hs.uielement.watcher.applicationShown: The application was shown.\n\n#### Focus change events\nThese events are watched on the application level, but send the relevant child element to the handler.\n* hs.uielement.watcher.mainWindowChanged: The main window of the application was changed.\n* hs.uielement.watcher.focusedWindowChanged: The focused window of the application was changed. Note that the application may not be activated itself.\n* hs.uielement.watcher.focusedElementChanged: The focused UI element of the application was changed.\n\n### Window-level events\n* hs.uielement.watcher.windowCreated: A window was created. You should watch for this event on the application, or the parent window.\n* hs.uielement.watcher.windowMoved: The window was moved.\n* hs.uielement.watcher.windowResized: The window was resized.\n* hs.uielement.watcher.windowMinimized: The window was minimized.\n* hs.uielement.watcher.windowUnminimized: The window was unminimized.\n\n### Element-level events\nThese work on all UI elements, including windows.\n* hs.uielement.watcher.elementDestroyed: The element was destroyed.\n* hs.uielement.watcher.titleChanged: The element's title was changed.","def":"-> hs.uielement.watcher"},"focusedElement":{"def":"hs.uielement.focusedElement() -> element or nil","desc":"Gets the currently focused UI element","doc":"Gets the currently focused UI element\n\nParameters:\n * None\n\nReturns:\n * An `hs.uielement` object or nil if no object could be found","examples":[],"file":"extensions/uielement/libuielement.m","lineno":"12","name":"focusedElement","notes":[],"parameters":[" * None"],"returns":[" * An `hs.uielement` object or nil if no object could be found"],"signature":"hs.uielement.focusedElement() -> element or nil","stripped_doc":"","type":"Function"},"isApplication":{"def":"hs.uielement:isApplication() -> bool","desc":"Returns whether the UI element represents an application.","doc":"Returns whether the UI element represents an application.\n\nParameters:\n * None\n\nReturns:\n * A boolean, true if the UI element is an application","examples":[],"file":"extensions/uielement/uielement.lua","lineno":"14","name":"isApplication","notes":[],"parameters":[" * None"],"returns":[" * A boolean, true if the UI element is an application"],"signature":"hs.uielement:isApplication() -> bool","stripped_doc":"","type":"Method"},"isWindow":{"def":"hs.uielement:isWindow() -> bool","desc":"Returns whether the UI element represents a window.","doc":"Returns whether the UI element represents a window.\n\nParameters:\n * None\n\nReturns:\n * A boolean, true if the UI element is a window, otherwise false","examples":[],"file":"extensions/uielement/libuielement.m","lineno":"29","name":"isWindow","notes":[],"parameters":[" * None"],"returns":[" * A boolean, true if the UI element is a window, otherwise false"],"signature":"hs.uielement:isWindow() -> bool","stripped_doc":"","type":"Method"},"newWatcher":{"def":"hs.uielement:newWatcher(handler[, userData]) -> hs.uielement.watcher or nil","desc":"Creates a new watcher","doc":"Creates a new watcher\n\nParameters:\n * A function to be called when a watched event occurs.  The function will be passed the following arguments:\n   * element: The element the event occurred on. Note this is not always the element being watched.\n   * event: The name of the event that occurred.\n   * watcher: The watcher object being created.\n   * userData: The userData you included, if any.\n * an optional userData object which will be included as the final argument to the callback function when it is called.\n\nReturns:\n * An `hs.uielement.watcher` object, or `nil` if an error occurred","examples":[],"file":"extensions/uielement/libuielement.m","lineno":"86","name":"newWatcher","notes":[],"parameters":[" * A function to be called when a watched event occurs.  The function will be passed the following arguments:\n   * element: The element the event occurred on. Note this is not always the element being watched.\n   * event: The name of the event that occurred.\n   * watcher: The watcher object being created.\n   * userData: The userData you included, if any."," * an optional userData object which will be included as the final argument to the callback function when it is called."],"returns":[" * An `hs.uielement.watcher` object, or `nil` if an error occurred"],"signature":"hs.uielement:newWatcher(handler[, userData]) -> hs.uielement.watcher or nil","stripped_doc":"","type":"Method"},"role":{"def":"hs.uielement:role() -> string","desc":"Returns the role of the element.","doc":"Returns the role of the element.\n\nParameters:\n * None\n\nReturns:\n * A string containing the role of the UI element","examples":[],"file":"extensions/uielement/libuielement.m","lineno":"47","name":"role","notes":[],"parameters":[" * None"],"returns":[" * A string containing the role of the UI element"],"signature":"hs.uielement:role() -> string","stripped_doc":"","type":"Method"},"selectedText":{"def":"hs.uielement:selectedText() -> string or nil","desc":"Returns the selected text in the element","doc":"Returns the selected text in the element\n\nParameters:\n * None\n\nReturns:\n * A string containing the selected text, or nil if none could be found\n\nNotes:\n * Many applications (e.g. Safari, Mail, Firefox) do not implement the necessary accessibility features for this to work in their web views","examples":[],"file":"extensions/uielement/libuielement.m","lineno":"65","name":"selectedText","notes":[" * Many applications (e.g. Safari, Mail, Firefox) do not implement the necessary accessibility features for this to work in their web views"],"parameters":[" * None"],"returns":[" * A string containing the selected text, or nil if none could be found"],"signature":"hs.uielement:selectedText() -> string or nil","stripped_doc":"","type":"Method"}}