{"isFinite":{"def":"hs.math.isFinite(value) -> boolean","desc":"Returns whether or not the value is a finite number","doc":"Returns whether or not the value is a finite number\n\nParameters:\n * `value` - the value to be tested\n\nReturns:\n * true if the value is a finite number, or false otherwise\n\nNotes:\n * This function returns true if the value is a number and both [hs.math.isNaN](#isNaN) and [hs.math.isInfinite](#isInfinite) return false.","examples":[],"file":"extensions/math/math.lua","lineno":"78","name":"isFinite","notes":[" * This function returns true if the value is a number and both [hs.math.isNaN](#isNaN) and [hs.math.isInfinite](#isInfinite) return false."],"parameters":[" * `value` - the value to be tested"],"returns":[" * true if the value is a finite number, or false otherwise"],"signature":"hs.math.isFinite(value) -> boolean","stripped_doc":"","type":"Function"},"isInfinite":{"def":"hs.math.isInfinite(value) -> 1, -1, false","desc":"Returns whether or not the value is the mathematical equivalent of either positive or negative \"Infinity\"","doc":"Returns whether or not the value is the mathematical equivalent of either positive or negative \"Infinity\"\n\nParameters:\n * `value` - the value to be tested\n\nReturns:\n * 1 if the value is equivalent to positive infinity, -1 if the value is equivalent to negative infinity, or false otherwise.\n\nNotes:\n * This function specifically checks if the `value` is equivalent to positive or negative infinity --- it does not do type checking. If `value` is not a numeric value (e.g. a string), it *cannot* be equivalent to positive or negative infinity and will return false.\n * Because lua treats any value other than `nil` and `false` as `true`, the return value of this function can be safely used in conditionals when you don't care about the sign of the infinite value.","examples":[],"file":"extensions/math/math.lua","lineno":"61","name":"isInfinite","notes":[" * This function specifically checks if the `value` is equivalent to positive or negative infinity --- it does not do type checking. If `value` is not a numeric value (e.g. a string), it *cannot* be equivalent to positive or negative infinity and will return false."," * Because lua treats any value other than `nil` and `false` as `true`, the return value of this function can be safely used in conditionals when you don't care about the sign of the infinite value."],"parameters":[" * `value` - the value to be tested"],"returns":[" * 1 if the value is equivalent to positive infinity, -1 if the value is equivalent to negative infinity, or false otherwise."],"signature":"hs.math.isInfinite(value) -> 1, -1, false","stripped_doc":"","type":"Function"},"isNaN":{"def":"hs.math.isNaN(value) -> boolean","desc":"Returns whether or not the value is the mathematical equivalent of \"Not-A-Number\"","doc":"Returns whether or not the value is the mathematical equivalent of \"Not-A-Number\"\n\nParameters:\n * `value` - the value to be tested\n\nReturns:\n * true if `value` is equal to the mathematical \"value\" of NaN, or false otherwise\n\nNotes:\n * Mathematical `NaN` represents an impossible value, usually the result of a calculation, yet is still considered within the domain of mathematics. The most common case is the result of `n / 0` as division by 0 is considered undefined or \"impossible\".\n * This function specifically checks if the `value` is `NaN` --- it does not do type checking. If `value` is not a numeric value (e.g. a string), it *cannot* be equivalent to `NaN` and this function will return false.","examples":[],"file":"extensions/math/math.lua","lineno":"44","name":"isNaN","notes":[" * Mathematical `NaN` represents an impossible value, usually the result of a calculation, yet is still considered within the domain of mathematics. The most common case is the result of `n / 0` as division by 0 is considered undefined or \"impossible\"."," * This function specifically checks if the `value` is `NaN` --- it does not do type checking. If `value` is not a numeric value (e.g. a string), it *cannot* be equivalent to `NaN` and this function will return false."],"parameters":[" * `value` - the value to be tested"],"returns":[" * true if `value` is equal to the mathematical \"value\" of NaN, or false otherwise"],"signature":"hs.math.isNaN(value) -> boolean","stripped_doc":"","type":"Function"},"minFloat":{"def":"hs.math.minFloat","desc":"Smallest positive floating point number representable in Hammerspoon","doc":"Smallest positive floating point number representable in Hammerspoon\n\nNotes:\n * Because specifying a delay of 0 to `hs.timer.doAfter` results in the event not triggering, use this value to indicate that the action should occur as soon as possible after the current code block has completed execution.","file":"extensions/math/math.lua","lineno":"96","name":"minFloat","notes":[" * Because specifying a delay of 0 to `hs.timer.doAfter` results in the event not triggering, use this value to indicate that the action should occur as soon as possible after the current code block has completed execution."],"signature":"hs.math.minFloat","stripped_doc":"","type":"Constant"},"randomFloat":{"def":"hs.math.randomFloat() -> number","desc":"Returns a random floating point number between 0 and 1","doc":"Returns a random floating point number between 0 and 1\n\nParameters:\n * None\n\nReturns:\n * A random number between 0 and 1","examples":[],"file":"extensions/math/libmath.m","lineno":"6","name":"randomFloat","notes":[],"parameters":[" * None"],"returns":[" * A random number between 0 and 1"],"signature":"hs.math.randomFloat() -> number","stripped_doc":"","type":"Function"},"randomFromRange":{"def":"hs.math.randomFromRange(start, end) -> integer","desc":"Returns a random integer between the start and end paramters","doc":"Returns a random integer between the start and end paramters\n\nParameters:\n * start - A number to start the range, must be greater than or equal to zero\n * end - A number to end the range, must be greater than zero and greater than `start`\n\nReturns:\n * A randomly chosen integer between `start` and `end`","examples":[],"file":"extensions/math/libmath.m","lineno":"26","name":"randomFromRange","notes":[],"parameters":[" * start - A number to start the range, must be greater than or equal to zero"," * end - A number to end the range, must be greater than zero and greater than `start`"],"returns":[" * A randomly chosen integer between `start` and `end`"],"signature":"hs.math.randomFromRange(start, end) -> integer","stripped_doc":"","type":"Function"}}