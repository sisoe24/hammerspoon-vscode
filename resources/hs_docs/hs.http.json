{"asyncGet":{"def":"hs.http.asyncGet(url, headers, callback)","desc":"Sends an HTTP GET request asynchronously","doc":"Sends an HTTP GET request asynchronously\n\nParameters:\n * url - A string containing the URL to retrieve\n * headers - A table containing string keys and values representing the request headers, or nil to add no headers\n * callback - A function to be called when the request succeeds or fails. The function will be passed three parameters:\n  * A number containing the HTTP response status\n  * A string containing the response body\n  * A table containing the response headers\n\nReturns:\n * None\n\nNotes:\n * If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials.\n * If the request fails, the callback function's first parameter will be negative and the second parameter will contain an error message. The third parameter will be nil","examples":[],"file":"extensions/http/http.lua","lineno":"76","name":"asyncGet","notes":[" * If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials."," * If the request fails, the callback function's first parameter will be negative and the second parameter will contain an error message. The third parameter will be nil"],"parameters":[" * url - A string containing the URL to retrieve"," * headers - A table containing string keys and values representing the request headers, or nil to add no headers"," * callback - A function to be called when the request succeeds or fails. The function will be passed three parameters:\n   * A number containing the HTTP response status\n   * A string containing the response body\n   * A table containing the response headers"],"returns":[" * None"],"signature":"hs.http.asyncGet(url, headers, callback)","stripped_doc":"","type":"Function"},"asyncPost":{"def":"hs.http.asyncPost(url, data, headers, callback)","desc":"Sends an HTTP POST request asynchronously","doc":"Sends an HTTP POST request asynchronously\n\nParameters:\n * url - A string containing the URL to submit to\n * data - A string containing the request body, or nil to send no body\n * headers - A table containing string keys and values representing the request headers, or nil to add no headers\n * callback - A function to be called when the request succeeds or fails. The function will be passed three parameters:\n  * A number containing the HTTP response status\n  * A string containing the response body\n  * A table containing the response headers\n\nReturns:\n * None\n\nNotes:\n * If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials.\n * If the request fails, the callback function's first parameter will be negative and the second parameter will contain an error message. The third parameter will be nil","examples":[],"file":"extensions/http/http.lua","lineno":"98","name":"asyncPost","notes":[" * If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials."," * If the request fails, the callback function's first parameter will be negative and the second parameter will contain an error message. The third parameter will be nil"],"parameters":[" * url - A string containing the URL to submit to"," * data - A string containing the request body, or nil to send no body"," * headers - A table containing string keys and values representing the request headers, or nil to add no headers"," * callback - A function to be called when the request succeeds or fails. The function will be passed three parameters:\n   * A number containing the HTTP response status\n   * A string containing the response body\n   * A table containing the response headers"],"returns":[" * None"],"signature":"hs.http.asyncPost(url, data, headers, callback)","stripped_doc":"","type":"Function"},"asyncPut":{"def":"hs.http.asyncPut(url, data, headers, callback)","desc":"Sends an HTTP PUT request asynchronously","doc":"Sends an HTTP PUT request asynchronously\n\nParameters:\n * url - A string containing the URL to submit to\n * data - A string containing the request body, or nil to send no body\n * headers - A table containing string keys and values representing the request headers, or nil to add no headers\n * callback - A function to be called when the request succeeds or fails. The function will be passed three parameters:\n  * A number containing the HTTP response status\n  * A string containing the response body\n  * A table containing the response headers\n\nReturns:\n * None\n\nNotes:\n * If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials.\n * If the request fails, the callback function's first parameter will be negative and the second parameter will contain an error message. The third parameter will be nil","examples":[],"file":"extensions/http/http.lua","lineno":"121","name":"asyncPut","notes":[" * If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials."," * If the request fails, the callback function's first parameter will be negative and the second parameter will contain an error message. The third parameter will be nil"],"parameters":[" * url - A string containing the URL to submit to"," * data - A string containing the request body, or nil to send no body"," * headers - A table containing string keys and values representing the request headers, or nil to add no headers"," * callback - A function to be called when the request succeeds or fails. The function will be passed three parameters:\n   * A number containing the HTTP response status\n   * A string containing the response body\n   * A table containing the response headers"],"returns":[" * None"],"signature":"hs.http.asyncPut(url, data, headers, callback)","stripped_doc":"","type":"Function"},"convertHtmlEntities":{"def":"hs.http.convertHtmlEntities(inString) -> outString","desc":"Convert all recognized HTML Entities in the `inString` to appropriate UTF8 byte sequences and returns the converted text.","doc":"Convert all recognized HTML Entities in the `inString` to appropriate UTF8 byte sequences and returns the converted text.\n\nParameters:\n * inString -- A string containing any number of HTML Entities (&whatever;) in the text.\n\nReturns:\n * outString -- the input string with all recognized HTML Entity sequences converted to UTF8 byte sequences.\n\nNotes:\n * Recognized HTML Entities are those registered in `hs.http.htmlEntities` or numeric entity sequences: &#n; where `n` can be any integer number.\n * This function is especially useful as a post-filter to data retrieved by the `hs.http.get` and `hs.http.asyncGet` functions.","examples":[],"file":"extensions/http/http.lua","lineno":"444","name":"convertHtmlEntities","notes":[" * Recognized HTML Entities are those registered in `hs.http.htmlEntities` or numeric entity sequences: &#n; where `n` can be any integer number."," * This function is especially useful as a post-filter to data retrieved by the `hs.http.get` and `hs.http.asyncGet` functions."],"parameters":[" * inString -- A string containing any number of HTML Entities (&whatever;) in the text."],"returns":[" * outString -- the input string with all recognized HTML Entity sequences converted to UTF8 byte sequences."],"signature":"hs.http.convertHtmlEntities(inString) -> outString","stripped_doc":"","type":"Function"},"doAsyncRequest":{"def":"hs.http.doAsyncRequest(url, method, data, headers, callback, [cachePolicy|enableRedirect])","desc":"Creates an HTTP request and executes it asynchronously","doc":"Creates an HTTP request and executes it asynchronously\n\nParameters:\n * url - A string containing the URL\n * method - A string containing the HTTP method to use (e.g. \"GET\", \"POST\", etc)\n * data - A string containing the request body, or nil to send no body\n * headers - A table containing string keys and values representing request header keys and values, or nil to add no headers\n * callback - A function to called when the response is received. The function should accept three arguments:\n  * code - A number containing the HTTP response code\n  * body - A string containing the body of the response\n  * headers - A table containing the HTTP headers of the response\n * cachePolicy - An optional string containing the cache policy (\"protocolCachePolicy\", \"ignoreLocalCache\", \"ignoreLocalAndRemoteCache\", \"returnCacheOrLoad\", \"returnCacheDontLoad\" or \"reloadRevalidatingCache\"). Defaults to `protocolCachePolicy`.\n * enableRedirect - An optional boolean to indicate whether to redirect the http request. Defaults to true.\n\nReturns:\n * None\n\nNotes:\n * If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials.\n * If the Content-Type response header begins `text/` then the response body return value is a UTF8 string. Any other content type passes the response body, unaltered, as a stream of bytes.\n * If enableRedirect is set to true, response body will be empty string. Http body will be dropped even though response has the body. This seems the limitation of 'connection:willSendRequest:redirectResponse' method.","examples":[],"file":"extensions/http/libhttp.m","lineno":"201","name":"doAsyncRequest","notes":[" * If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials."," * If the Content-Type response header begins `text/` then the response body return value is a UTF8 string. Any other content type passes the response body, unaltered, as a stream of bytes."," * If enableRedirect is set to true, response body will be empty string. Http body will be dropped even though response has the body. This seems the limitation of 'connection:willSendRequest:redirectResponse' method."],"parameters":[" * url - A string containing the URL"," * method - A string containing the HTTP method to use (e.g. \"GET\", \"POST\", etc)"," * data - A string containing the request body, or nil to send no body"," * headers - A table containing string keys and values representing request header keys and values, or nil to add no headers"," * callback - A function to called when the response is received. The function should accept three arguments:\n   * code - A number containing the HTTP response code\n   * body - A string containing the body of the response\n   * headers - A table containing the HTTP headers of the response"," * cachePolicy - An optional string containing the cache policy (\"protocolCachePolicy\", \"ignoreLocalCache\", \"ignoreLocalAndRemoteCache\", \"returnCacheOrLoad\", \"returnCacheDontLoad\" or \"reloadRevalidatingCache\"). Defaults to `protocolCachePolicy`."," * enableRedirect - An optional boolean to indicate whether to redirect the http request. Defaults to true."],"returns":[" * None"],"signature":"hs.http.doAsyncRequest(url, method, data, headers, callback, [cachePolicy|enableRedirect])","stripped_doc":"","type":"Function"},"doRequest":{"def":"hs.http.doRequest(url, method, [data, headers, cachePolicy]) -> int, string, table","desc":"Creates an HTTP request and executes it synchronously","doc":"Creates an HTTP request and executes it synchronously\n\nParameters:\n * url - A string containing the URL\n * method - A string containing the HTTP method to use (e.g. \"GET\", \"POST\", etc)\n * data - An optional string containing the data to POST to the URL, or nil to send no data\n * headers - An optional table of string keys and values used as headers for the request, or nil to add no headers\n * cachePolicy - An optional string containing the cache policy (\"protocolCachePolicy\", \"ignoreLocalCache\", \"ignoreLocalAndRemoteCache\", \"returnCacheOrLoad\", \"returnCacheDontLoad\" or \"reloadRevalidatingCache\"). Defaults to `protocolCachePolicy`.\n\nReturns:\n * A number containing the HTTP response status code\n * A string containing the response body\n * A table containing the response headers\n\nNotes:\n * If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials.\n\n * This function is synchronous and will therefore block all Lua execution until it completes. You are encouraged to use the asynchronous functions.\n * If you attempt to connect to a local Hammerspoon server created with `hs.httpserver`, then Hammerspoon will block until the connection times out (60 seconds), return a failed result due to the timeout, and then the `hs.httpserver` callback function will be invoked (so any side effects of the function will occur, but it's results will be lost).  Use [hs.http.doAsyncRequest](#doAsyncRequest) to avoid this.\n * If the Content-Type response header begins `text/` then the response body return value is a UTF8 string. Any other content type passes the response body, unaltered, as a stream of bytes.","examples":[],"file":"extensions/http/libhttp.m","lineno":"264","name":"doRequest","notes":[" * If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials.",""," * This function is synchronous and will therefore block all Lua execution until it completes. You are encouraged to use the asynchronous functions."," * If you attempt to connect to a local Hammerspoon server created with `hs.httpserver`, then Hammerspoon will block until the connection times out (60 seconds), return a failed result due to the timeout, and then the `hs.httpserver` callback function will be invoked (so any side effects of the function will occur, but it's results will be lost).  Use [hs.http.doAsyncRequest](#doAsyncRequest) to avoid this."," * If the Content-Type response header begins `text/` then the response body return value is a UTF8 string. Any other content type passes the response body, unaltered, as a stream of bytes."],"parameters":[" * url - A string containing the URL"," * method - A string containing the HTTP method to use (e.g. \"GET\", \"POST\", etc)"," * data - An optional string containing the data to POST to the URL, or nil to send no data"," * headers - An optional table of string keys and values used as headers for the request, or nil to add no headers"," * cachePolicy - An optional string containing the cache policy (\"protocolCachePolicy\", \"ignoreLocalCache\", \"ignoreLocalAndRemoteCache\", \"returnCacheOrLoad\", \"returnCacheDontLoad\" or \"reloadRevalidatingCache\"). Defaults to `protocolCachePolicy`."],"returns":[" * A number containing the HTTP response status code"," * A string containing the response body"," * A table containing the response headers"],"signature":"hs.http.doRequest(url, method, [data, headers, cachePolicy]) -> int, string, table","stripped_doc":" * This function is synchronous and will therefore block all Lua execution until it completes. You are encouraged to use the asynchronous functions.\n * If you attempt to connect to a local Hammerspoon server created with `hs.httpserver`, then Hammerspoon will block until the connection times out (60 seconds), return a failed result due to the timeout, and then the `hs.httpserver` callback function will be invoked (so any side effects of the function will occur, but it's results will be lost).  Use [hs.http.doAsyncRequest](#doAsyncRequest) to avoid this.\n * If the Content-Type response header begins `text/` then the response body return value is a UTF8 string. Any other content type passes the response body, unaltered, as a stream of bytes.","type":"Function"},"encodeForQuery":{"def":"hs.http.encodeForQuery(string) -> string","desc":"Returns a copy of the provided string in which characters that are not valid within an HTTP query key or value are escaped with their %## equivalent.","doc":"Returns a copy of the provided string in which characters that are not valid within an HTTP query key or value are escaped with their %## equivalent.\n\nParameters:\n * originalString - the string to make safe as a key or value for a query\n\nReturns:\n * the converted string\n\nNotes:\n * The intent of this function is to provide a valid key or a valid value for a query string, not to validate the entire query string.  For this reason, ?, =, +, and & are included in the converted characters.","examples":[],"file":"extensions/http/http.lua","lineno":"461","name":"encodeForQuery","notes":[" * The intent of this function is to provide a valid key or a valid value for a query string, not to validate the entire query string.  For this reason, ?, =, +, and & are included in the converted characters."],"parameters":[" * originalString - the string to make safe as a key or value for a query"],"returns":[" * the converted string"],"signature":"hs.http.encodeForQuery(string) -> string","stripped_doc":"","type":"Function"},"get":{"def":"hs.http.get(url, headers) -> int, string, table","desc":"Sends an HTTP GET request to a URL","doc":"Sends an HTTP GET request to a URL\n\nParameters:\n * url - A string containing the URL to retrieve\n * headers - A table containing string keys and values representing the request headers, or nil to add no headers\n\nReturns:\n * A number containing the HTTP response status\n * A string containing the response body\n * A table containing the response headers\n\nNotes:\n * If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials.\n * This function is synchronous and will therefore block all other Lua execution while the request is in progress, you are encouraged to use the asynchronous functions\n * If you attempt to connect to a local Hammerspoon server created with `hs.httpserver`, then Hammerspoon will block until the connection times out (60 seconds), return a failed result due to the timeout, and then the `hs.httpserver` callback function will be invoked (so any side effects of the function will occur, but it's results will be lost).  Use [hs.http.asyncGet](#asyncGet) to avoid this.","examples":[],"file":"extensions/http/http.lua","lineno":"11","name":"get","notes":[" * If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials."," * This function is synchronous and will therefore block all other Lua execution while the request is in progress, you are encouraged to use the asynchronous functions"," * If you attempt to connect to a local Hammerspoon server created with `hs.httpserver`, then Hammerspoon will block until the connection times out (60 seconds), return a failed result due to the timeout, and then the `hs.httpserver` callback function will be invoked (so any side effects of the function will occur, but it's results will be lost).  Use [hs.http.asyncGet](#asyncGet) to avoid this."],"parameters":[" * url - A string containing the URL to retrieve"," * headers - A table containing string keys and values representing the request headers, or nil to add no headers"],"returns":[" * A number containing the HTTP response status"," * A string containing the response body"," * A table containing the response headers"],"signature":"hs.http.get(url, headers) -> int, string, table","stripped_doc":"","type":"Function"},"htmlEntities":{"def":"hs.http.htmlEntities[]","desc":"A collection of common HTML Entities (&whatever;) and their UTF8 equivalents.  To retrieve the UTF8 sequence for a given entity, reference the table as `hs.http.htmlEntities[\"&key;\"]` where `key` is the text of the entity's name or a numeric reference like `#number`.","doc":"A collection of common HTML Entities (&whatever;) and their UTF8 equivalents.  To retrieve the UTF8 sequence for a given entity, reference the table as `hs.http.htmlEntities[\"&key;\"]` where `key` is the text of the entity's name or a numeric reference like `#number`.\n\nNotes:\n * This list is likely not complete.  It is based on the list of common entities described at http://www.freeformatter.com/html-entities.html.\n * Additional entities can be temporarily added via the `hs.http.registerEntity(...)` function.  If you feel you have a more official list of entities which contains items which are currently not included by default, please open up an issue at https://github.com/Hammerspoon/hammerspoon and your link will be considered.\n * To see a list of the currently defined entities, a __tostring meta-method is included so that referencing the table directly as a string will return the current definitions.\n   * For reference, this meta-method is essentially the following:\n\n     for i,v in hs.fnutils.sortByKeys(hs.http.htmlEntities) do print(string.format(\"%-10s %-10s %s\\n\", i, \"&#\"..tostring(hs.utf8.codepoint(v))..\";\", v)) end\n\n   * Note that this list will not include the numeric conversion of entities (e.g. &#65;), as this is handled by an __index metamethod to allow for all possible numeric values.","file":"extensions/http/http.lua","lineno":"144","name":"htmlEntities","notes":[" * This list is likely not complete.  It is based on the list of common entities described at http://www.freeformatter.com/html-entities.html."," * Additional entities can be temporarily added via the `hs.http.registerEntity(...)` function.  If you feel you have a more official list of entities which contains items which are currently not included by default, please open up an issue at https://github.com/Hammerspoon/hammerspoon and your link will be considered."," * To see a list of the currently defined entities, a __tostring meta-method is included so that referencing the table directly as a string will return the current definitions.","   * For reference, this meta-method is essentially the following:","","     for i,v in hs.fnutils.sortByKeys(hs.http.htmlEntities) do print(string.format(\"%-10s %-10s %s\\n\", i, \"&#\"..tostring(hs.utf8.codepoint(v))..\";\", v)) end","","   * Note that this list will not include the numeric conversion of entities (e.g. &#65;), as this is handled by an __index metamethod to allow for all possible numeric values."],"signature":"hs.http.htmlEntities[]","stripped_doc":"     for i,v in hs.fnutils.sortByKeys(hs.http.htmlEntities) do print(string.format(\"%-10s %-10s %s\\n\", i, \"&#\"..tostring(hs.utf8.codepoint(v))..\";\", v)) end\n   * Note that this list will not include the numeric conversion of entities (e.g. &#65;), as this is handled by an __index metamethod to allow for all possible numeric values.","type":"Variable"},"post":{"def":"hs.http.post(url, data, headers) -> int, string, table","desc":"Sends an HTTP POST request to a URL","doc":"Sends an HTTP POST request to a URL\n\nParameters:\n * url - A string containing the URL to submit to\n * data - A string containing the request body, or nil to send no body\n * headers - A table containing string keys and values representing the request headers, or nil to add no headers\n\nReturns:\n * A number containing the HTTP response status\n * A string containing the response body\n * A table containing the response headers\n\nNotes:\n * If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials.\n * This function is synchronous and will therefore block all other Lua execution while the request is in progress, you are encouraged to use the asynchronous functions\n * If you attempt to connect to a local Hammerspoon server created with `hs.httpserver`, then Hammerspoon will block until the connection times out (60 seconds), return a failed result due to the timeout, and then the `hs.httpserver` callback function will be invoked (so any side effects of the function will occur, but it's results will be lost).  Use [hs.http.asyncPost](#asyncPost) to avoid this.","examples":[],"file":"extensions/http/http.lua","lineno":"32","name":"post","notes":[" * If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials."," * This function is synchronous and will therefore block all other Lua execution while the request is in progress, you are encouraged to use the asynchronous functions"," * If you attempt to connect to a local Hammerspoon server created with `hs.httpserver`, then Hammerspoon will block until the connection times out (60 seconds), return a failed result due to the timeout, and then the `hs.httpserver` callback function will be invoked (so any side effects of the function will occur, but it's results will be lost).  Use [hs.http.asyncPost](#asyncPost) to avoid this."],"parameters":[" * url - A string containing the URL to submit to"," * data - A string containing the request body, or nil to send no body"," * headers - A table containing string keys and values representing the request headers, or nil to add no headers"],"returns":[" * A number containing the HTTP response status"," * A string containing the response body"," * A table containing the response headers"],"signature":"hs.http.post(url, data, headers) -> int, string, table","stripped_doc":"","type":"Function"},"put":{"def":"hs.http.put(url, data, headers) -> int, string, table","desc":"Sends an HTTP PUT request to a URL","doc":"Sends an HTTP PUT request to a URL\n\nParameters:\n * url - A string containing the URL to submit to\n * data - A string containing the request body, or nil to send no body\n * headers - A table containing string keys and values representing the request headers, or nil to add no headers\n\nReturns:\n * A number containing the HTTP response status\n * A string containing the response body\n * A table containing the response headers\n\nNotes:\n * If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials.\n * This function is synchronous and will therefore block all other Lua execution while the request is in progress, you are encouraged to use the asynchronous functions\n * If you attempt to connect to a local Hammerspoon server created with `hs.httpserver`, then Hammerspoon will block until the connection times out (60 seconds), return a failed result due to the timeout, and then the `hs.httpserver` callback function will be invoked (so any side effects of the function will occur, but it's results will be lost).  Use [hs.http.asyncPost](#asyncPost) to avoid this.","examples":[],"file":"extensions/http/http.lua","lineno":"54","name":"put","notes":[" * If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials."," * This function is synchronous and will therefore block all other Lua execution while the request is in progress, you are encouraged to use the asynchronous functions"," * If you attempt to connect to a local Hammerspoon server created with `hs.httpserver`, then Hammerspoon will block until the connection times out (60 seconds), return a failed result due to the timeout, and then the `hs.httpserver` callback function will be invoked (so any side effects of the function will occur, but it's results will be lost).  Use [hs.http.asyncPost](#asyncPost) to avoid this."],"parameters":[" * url - A string containing the URL to submit to"," * data - A string containing the request body, or nil to send no body"," * headers - A table containing string keys and values representing the request headers, or nil to add no headers"],"returns":[" * A number containing the HTTP response status"," * A string containing the response body"," * A table containing the response headers"],"signature":"hs.http.put(url, data, headers) -> int, string, table","stripped_doc":"","type":"Function"},"registerEntity":{"def":"hs.http.registerEntity(entity, codepoint) -> string","desc":"Registers an HTML Entity with the specified Unicode codepoint which can later referenced in your code as `hs.http.htmlEntity[entity]` for convenience and readability.","doc":"Registers an HTML Entity with the specified Unicode codepoint which can later referenced in your code as `hs.http.htmlEntity[entity]` for convenience and readability.\n\nParameters:\n * entity -- The full text of the HTML Entity as it appears in HTML encoded documents.  A proper entity starts with & and ends with ; and entity labels which do not meet this will have them added -- future dereferences to get the corresponding UTF8 *must* include this initiator and terminator or they will not be recognized.\n * codepoint -- a Unicode codepoint in numeric or `U+xxxx` format to register with as the given entity.\n\nReturns:\n * Returns the UTF8 byte sequence for the entity registered.\n\nNotes:\n * If an entity label was previously registered, this will overwrite the previous value with a new one.\n * The return value is merely syntactic sugar and you do not need to save it locally; it can be safely ignored -- future access to the pre-converted entity should be retrieved as `hs.http.htmlEntities[entity]` in your code.  It looks good when invoked from the console, though ☺.","examples":[],"file":"extensions/http/http.lua","lineno":"419","name":"registerEntity","notes":[" * If an entity label was previously registered, this will overwrite the previous value with a new one."," * The return value is merely syntactic sugar and you do not need to save it locally; it can be safely ignored -- future access to the pre-converted entity should be retrieved as `hs.http.htmlEntities[entity]` in your code.  It looks good when invoked from the console, though ☺."],"parameters":[" * entity -- The full text of the HTML Entity as it appears in HTML encoded documents.  A proper entity starts with & and ends with ; and entity labels which do not meet this will have them added -- future dereferences to get the corresponding UTF8 *must* include this initiator and terminator or they will not be recognized."," * codepoint -- a Unicode codepoint in numeric or `U+xxxx` format to register with as the given entity."],"returns":[" * Returns the UTF8 byte sequence for the entity registered."],"signature":"hs.http.registerEntity(entity, codepoint) -> string","stripped_doc":"","type":"Function"},"urlParts":{"def":"hs.http.urlParts(url) -> table","desc":"Returns a table of keys containing the individual components of the provided url.","doc":"Returns a table of keys containing the individual components of the provided url.\n\nParameters:\n * url - the url to parse into it's individual components\n\nReturns:\n * a table containing any of the following keys which apply to the specified url:\n   * absoluteString           - The URL string for the URL as an absolute URL.\n   * absoluteURL              - An absolute URL that refers to the same resource as the provided URL.\n   * baseURL                  - the base URL, if the URL is relative\n   * fileSystemRepresentation - the URL’s unescaped path specified as a file system path\n   * fragment                 - the fragment, if specified in the URL\n   * host                     - the host for the URL\n   * isFileURL                - a boolean value indicating whether or not the URL represents a local file\n   * lastPathComponent        - the last path component specified in the URL\n   * parameterString          - the parameter string, if specified in the URL\n   * password                 - the password, if specified in the URL\n   * path                     - the unescaped path specified in the URL\n   * pathComponents           - an array containing the path components of the URL\n   * pathExtension            - the file extension, if specified in the URL\n   * port                     - the port, if specified in the URL\n   * query                    - the query, if specified in the URL\n   * queryItems               - if the URL contains a query string, then this field contains an array of the unescaped key-value pairs for each item. Each key-value pair is represented as a table in the array to preserve order.  See notes for more information.\n   * relativePath             - the relative path of the URL without resolving against its base URL. If the path has a trailing slash it is stripped. If the URL is already an absolute URL, this contains the same value as path.\n   * relativeString           - a string representation of the relative portion of the URL. If the URL is already an absolute URL this contains the same value as absoluteString.\n   * resourceSpecifier        - the resource specified in the URL\n   * scheme                   - the scheme of the URL\n   * standardizedURL          - the URL with any instances of \"..\" or \".\" removed from its path\n   * user                     - the username, if specified in the URL\n\nNotes:\n * This function assumes that the URL conforms to RFC 1808.  If the URL is malformed or does not conform to RFC1808, then many of these fields may be missing.\n\n * A contrived example for the url `http://user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment`:\n\n    > hs.inspect(hs.http.urlParts(\"http://user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\"))\n     {\n       absoluteString = \"http://user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\",\n       absoluteURL = \"http://user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\",\n       fileSystemRepresentation = \"/path/to a/../file.txt\",\n       fragment = \"fragment\",\n       host = \"host.site.com\",\n       isFileURL = false,\n       lastPathComponent = \"file.txt\",\n       parameterString = \"parameter\",\n       password = \"password\",\n       path = \"/path/to a/../file.txt\",\n       pathComponents = { \"/\", \"path\", \"to a\", \"..\", \"file.txt\" },\n       pathExtension = \"txt\",\n       port = 80,\n       query = \"query1=1&query2=a%28\",\n       queryItems = { {\n           query1 = \"1\"\n         }, {\n           query2 = \"a(\"\n         } },\n       relativePath = \"/path/to a/../file.txt\",\n       relativeString = \"http://user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\",\n       resourceSpecifier = \"//user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\",\n       scheme = \"http\",\n       standardizedURL = \"http://user:password@host.site.com:80/path/file.txt;parameter?query1=1&query2=a%28#fragment\",\n       user = \"user\"\n     }\n\n * Because it is valid for a query key-value pair to be missing either the key or the value or both, the following conventions are used:\n   * a missing key (e.g. '=value') will be represented as { \"\" = value }\n   * a missing value (e.g. 'key=') will be represented as { key = \"\" }\n   * a missing value with no = (e.g. 'key') will be represented as { key }\n   * a missing key and value (e.g. '=') will be represented as { \"\" = \"\" }\n   * an empty query item (e.g. a query ending in '&' or a query containing && between two other query items) will be represented as { \"\" }\n\n * At present Hammerspoon does not provide a way to represent a URL as a true Objective-C object within the OS X API.  This affects the following keys:\n   * relative URLs are not possible to express properly so baseURL will always be nil and relativePath and relativeString will always match path and absoluteString.\n   * These limitations may change in a future update if the need for a more fully compliant URL treatment is determined to be necessary.","examples":[],"file":"extensions/http/libhttp.m","lineno":"332","name":"urlParts","notes":[" * This function assumes that the URL conforms to RFC 1808.  If the URL is malformed or does not conform to RFC1808, then many of these fields may be missing.",""," * A contrived example for the url `http://user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment`:","","    > hs.inspect(hs.http.urlParts(\"http://user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\"))","     {","       absoluteString = \"http://user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\",","       absoluteURL = \"http://user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\",","       fileSystemRepresentation = \"/path/to a/../file.txt\",","       fragment = \"fragment\",","       host = \"host.site.com\",","       isFileURL = false,","       lastPathComponent = \"file.txt\",","       parameterString = \"parameter\",","       password = \"password\",","       path = \"/path/to a/../file.txt\",","       pathComponents = { \"/\", \"path\", \"to a\", \"..\", \"file.txt\" },","       pathExtension = \"txt\",","       port = 80,","       query = \"query1=1&query2=a%28\",","       queryItems = { {","           query1 = \"1\"","         }, {","           query2 = \"a(\"","         } },","       relativePath = \"/path/to a/../file.txt\",","       relativeString = \"http://user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\",","       resourceSpecifier = \"//user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\",","       scheme = \"http\",","       standardizedURL = \"http://user:password@host.site.com:80/path/file.txt;parameter?query1=1&query2=a%28#fragment\",","       user = \"user\"","     }",""," * Because it is valid for a query key-value pair to be missing either the key or the value or both, the following conventions are used:","   * a missing key (e.g. '=value') will be represented as { \"\" = value }","   * a missing value (e.g. 'key=') will be represented as { key = \"\" }","   * a missing value with no = (e.g. 'key') will be represented as { key }","   * a missing key and value (e.g. '=') will be represented as { \"\" = \"\" }","   * an empty query item (e.g. a query ending in '&' or a query containing && between two other query items) will be represented as { \"\" }",""," * At present Hammerspoon does not provide a way to represent a URL as a true Objective-C object within the OS X API.  This affects the following keys:","   * relative URLs are not possible to express properly so baseURL will always be nil and relativePath and relativeString will always match path and absoluteString.","   * These limitations may change in a future update if the need for a more fully compliant URL treatment is determined to be necessary."],"parameters":[" * url - the url to parse into it's individual components"],"returns":[" * a table containing any of the following keys which apply to the specified url:","   * absoluteString           - The URL string for the URL as an absolute URL.","   * absoluteURL              - An absolute URL that refers to the same resource as the provided URL.","   * baseURL                  - the base URL, if the URL is relative","   * fileSystemRepresentation - the URL’s unescaped path specified as a file system path","   * fragment                 - the fragment, if specified in the URL","   * host                     - the host for the URL","   * isFileURL                - a boolean value indicating whether or not the URL represents a local file","   * lastPathComponent        - the last path component specified in the URL","   * parameterString          - the parameter string, if specified in the URL","   * password                 - the password, if specified in the URL","   * path                     - the unescaped path specified in the URL","   * pathComponents           - an array containing the path components of the URL","   * pathExtension            - the file extension, if specified in the URL","   * port                     - the port, if specified in the URL","   * query                    - the query, if specified in the URL","   * queryItems               - if the URL contains a query string, then this field contains an array of the unescaped key-value pairs for each item. Each key-value pair is represented as a table in the array to preserve order.  See notes for more information.","   * relativePath             - the relative path of the URL without resolving against its base URL. If the path has a trailing slash it is stripped. If the URL is already an absolute URL, this contains the same value as path.","   * relativeString           - a string representation of the relative portion of the URL. If the URL is already an absolute URL this contains the same value as absoluteString.","   * resourceSpecifier        - the resource specified in the URL","   * scheme                   - the scheme of the URL","   * standardizedURL          - the URL with any instances of \"..\" or \".\" removed from its path","   * user                     - the username, if specified in the URL"],"signature":"hs.http.urlParts(url) -> table","stripped_doc":" * A contrived example for the url `http://user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment`:\n    > hs.inspect(hs.http.urlParts(\"http://user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\"))\n     {\n       absoluteString = \"http://user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\",\n       absoluteURL = \"http://user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\",\n       fileSystemRepresentation = \"/path/to a/../file.txt\",\n       fragment = \"fragment\",\n       host = \"host.site.com\",\n       isFileURL = false,\n       lastPathComponent = \"file.txt\",\n       parameterString = \"parameter\",\n       password = \"password\",\n       path = \"/path/to a/../file.txt\",\n       pathComponents = { \"/\", \"path\", \"to a\", \"..\", \"file.txt\" },\n       pathExtension = \"txt\",\n       port = 80,\n       query = \"query1=1&query2=a%28\",\n       queryItems = { {\n           query1 = \"1\"\n         }, {\n           query2 = \"a(\"\n         } },\n       relativePath = \"/path/to a/../file.txt\",\n       relativeString = \"http://user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\",\n       resourceSpecifier = \"//user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\",\n       scheme = \"http\",\n       standardizedURL = \"http://user:password@host.site.com:80/path/file.txt;parameter?query1=1&query2=a%28#fragment\",\n       user = \"user\"\n     }\n * Because it is valid for a query key-value pair to be missing either the key or the value or both, the following conventions are used:\n   * a missing key (e.g. '=value') will be represented as { \"\" = value }\n   * a missing value (e.g. 'key=') will be represented as { key = \"\" }\n   * a missing value with no = (e.g. 'key') will be represented as { key }\n   * a missing key and value (e.g. '=') will be represented as { \"\" = \"\" }\n   * an empty query item (e.g. a query ending in '&' or a query containing && between two other query items) will be represented as { \"\" }\n * At present Hammerspoon does not provide a way to represent a URL as a true Objective-C object within the OS X API.  This affects the following keys:\n   * relative URLs are not possible to express properly so baseURL will always be nil and relativePath and relativeString will always match path and absoluteString.\n   * These limitations may change in a future update if the need for a more fully compliant URL treatment is determined to be necessary.","type":"Function"}}
