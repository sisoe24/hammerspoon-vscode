{"inspect":{"def":"hs.inspect.inspect(variable[, options]) -> string","desc":"Gets a human readable version of the supplied Lua variable","doc":"Gets a human readable version of the supplied Lua variable\n\nParameters:\n * variable - A lua variable of some kind\n * options - An optional table which can be used to influence the inspector. Valid keys are as follows:\n  * depth - A number representing the maximum depth to recurse into `variable`. Below that depth, data will be displayed as `{...}`\n  * newline - A string to use for line breaks. Defaults to `\\n`\n  * indent - A string to use for indentation. Defaults to `  ` (two spaces)\n  * process - A function that will be called for each item. It should accept two arguments, `item` (the current item being processed) and `path` (the item's position in the variable being inspected. The function should either return a processed form of the variable, the original variable itself if it requires no processing, or `nil` to remove the item from the inspected output.\n  * metatables - If `true`, include (and traverse) metatables\n\nReturns:\n * A string containing the human readable version of `variable`\n\nNotes:\n * For convenience, you can call this function as `hs.inspect(variable)`\n * To view the output in Hammerspoon's Console, use `print(hs.inspect(variable))`\n * For more information on the options, and some examples, see [the upstream docs](https://github.com/kikito/inspect.lua)","examples":[],"file":"extensions/inspect/inspect.lua","lineno":"307","name":"inspect","notes":[" * For convenience, you can call this function as `hs.inspect(variable)`"," * To view the output in Hammerspoon's Console, use `print(hs.inspect(variable))`"," * For more information on the options, and some examples, see [the upstream docs](https://github.com/kikito/inspect.lua)"],"parameters":[" * variable - A lua variable of some kind"," * options - An optional table which can be used to influence the inspector. Valid keys are as follows:\n   * depth - A number representing the maximum depth to recurse into `variable`. Below that depth, data will be displayed as `{...}`\n   * newline - A string to use for line breaks. Defaults to `\\n`\n   * indent - A string to use for indentation. Defaults to `  ` (two spaces)\n   * process - A function that will be called for each item. It should accept two arguments, `item` (the current item being processed) and `path` (the item's position in the variable being inspected. The function should either return a processed form of the variable, the original variable itself if it requires no processing, or `nil` to remove the item from the inspected output.\n   * metatables - If `true`, include (and traverse) metatables"],"returns":[" * A string containing the human readable version of `variable`"],"signature":"hs.inspect.inspect(variable[, options]) -> string","stripped_doc":"","type":"Function"}}