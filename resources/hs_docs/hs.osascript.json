{"_osascript":{"def":"hs.osascript._osascript(source, language) -> bool, object, descriptor","desc":"Runs osascript code","doc":"Runs osascript code\n\nParameters:\n * source - Some osascript code to execute\n * language - A string containing the OSA language, either 'AppleScript' or 'JavaScript'. Defaults to AppleScript if invalid language\n\nReturns:\n * A boolean value indicating whether the code succeeded or not\n * An object containing the parsed output that can be any type, or nil if unsuccessful\n * A string containing the raw output of the code and/or its errors","examples":[],"file":"extensions/osascript/libosascript.m","lineno":"5","name":"_osascript","notes":[],"parameters":[" * source - Some osascript code to execute"," * language - A string containing the OSA language, either 'AppleScript' or 'JavaScript'. Defaults to AppleScript if invalid language"],"returns":[" * A boolean value indicating whether the code succeeded or not"," * An object containing the parsed output that can be any type, or nil if unsuccessful"," * A string containing the raw output of the code and/or its errors"],"signature":"hs.osascript._osascript(source, language) -> bool, object, descriptor","stripped_doc":"","type":"Function"},"applescript":{"def":"hs.osascript.applescript(source) -> bool, object, descriptor","desc":"Runs AppleScript code","doc":"Runs AppleScript code\n\nParameters:\n * source - A string containing some AppleScript code to execute\n\nReturns:\n * A boolean value indicating whether the code succeeded or not\n * An object containing the parsed output that can be any type, or nil if unsuccessful\n * If the code succeeded, the raw output of the code string. If the code failed, a table containing an error dictionary\n\nNotes:\n * Use hs.osascript._osascript(source, \"AppleScript\") if you always want the result as a string, even when a failure occurs","examples":[],"file":"extensions/osascript/osascript.lua","lineno":"46","name":"applescript","notes":[" * Use hs.osascript._osascript(source, \"AppleScript\") if you always want the result as a string, even when a failure occurs"],"parameters":[" * source - A string containing some AppleScript code to execute"],"returns":[" * A boolean value indicating whether the code succeeded or not"," * An object containing the parsed output that can be any type, or nil if unsuccessful"," * If the code succeeded, the raw output of the code string. If the code failed, a table containing an error dictionary"],"signature":"hs.osascript.applescript(source) -> bool, object, descriptor","stripped_doc":"","type":"Function"},"applescriptFromFile":{"def":"hs.osascript.applescriptFromFile(fileName) -> bool, object, descriptor","desc":"Runs AppleScript code from a source file.","doc":"Runs AppleScript code from a source file.\n\nParameters:\n * fileName - A string containing the file name of an AppleScript file to execute.\n\nReturns:\n * A boolean value indicating whether the code succeeded or not\n * An object containing the parsed output that can be any type, or nil if unsuccessful\n * If the code succeeded, the raw output of the code string. If the code failed, a table containing an error dictionary\n\nNotes:\n * This function uses hs.osascript.applescript for execution.\n * Use hs.osascript._osascript(source, \"AppleScript\") if you always want the result as a string, even when a failure occurs. However, this function can only take a string, and not a file name.","examples":[],"file":"extensions/osascript/osascript.lua","lineno":"65","name":"applescriptFromFile","notes":[" * This function uses hs.osascript.applescript for execution."," * Use hs.osascript._osascript(source, \"AppleScript\") if you always want the result as a string, even when a failure occurs. However, this function can only take a string, and not a file name."],"parameters":[" * fileName - A string containing the file name of an AppleScript file to execute."],"returns":[" * A boolean value indicating whether the code succeeded or not"," * An object containing the parsed output that can be any type, or nil if unsuccessful"," * If the code succeeded, the raw output of the code string. If the code failed, a table containing an error dictionary"],"signature":"hs.osascript.applescriptFromFile(fileName) -> bool, object, descriptor","stripped_doc":"","type":"Function"},"javascript":{"def":"hs.osascript.javascript(source) -> bool, object, descriptor","desc":"Runs JavaScript code","doc":"Runs JavaScript code\n\nParameters:\n * source - A string containing some JavaScript code to execute\n\nReturns:\n * A boolean value indicating whether the code succeeded or not\n * An object containing the parsed output that can be any type, or nil if unsuccessful\n * If the code succeeded, the raw output of the code string. If the code failed, a table containing an error dictionary\n\nNotes:\n * Use hs.osascript._osascript(source, \"JavaScript\") if you always want the result as a string, even when a failure occurs","examples":[],"file":"extensions/osascript/osascript.lua","lineno":"86","name":"javascript","notes":[" * Use hs.osascript._osascript(source, \"JavaScript\") if you always want the result as a string, even when a failure occurs"],"parameters":[" * source - A string containing some JavaScript code to execute"],"returns":[" * A boolean value indicating whether the code succeeded or not"," * An object containing the parsed output that can be any type, or nil if unsuccessful"," * If the code succeeded, the raw output of the code string. If the code failed, a table containing an error dictionary"],"signature":"hs.osascript.javascript(source) -> bool, object, descriptor","stripped_doc":"","type":"Function"},"javascriptFromFile":{"def":"hs.osascript.javascriptFromFile(fileName) -> bool, object, descriptor","desc":"Runs JavaScript code from a source file.","doc":"Runs JavaScript code from a source file.\n\nParameters:\n * fileName - A string containing the file name of an JavaScript file to execute.\n\nReturns:\n * A boolean value indicating whether the code succeeded or not\n * An object containing the parsed output that can be any type, or nil if unsuccessful\n * If the code succeeded, the raw output of the code string. If the code failed, a table containing an error dictionary\n\nNotes:\n * This function uses hs.osascript.javascript for execution.\n * Use hs.osascript._osascript(source, \"JavaScript\") if you always want the result as a string, even when a failure occurs. However, this function can only take a string, and not a file name.","examples":[],"file":"extensions/osascript/osascript.lua","lineno":"105","name":"javascriptFromFile","notes":[" * This function uses hs.osascript.javascript for execution."," * Use hs.osascript._osascript(source, \"JavaScript\") if you always want the result as a string, even when a failure occurs. However, this function can only take a string, and not a file name."],"parameters":[" * fileName - A string containing the file name of an JavaScript file to execute."],"returns":[" * A boolean value indicating whether the code succeeded or not"," * An object containing the parsed output that can be any type, or nil if unsuccessful"," * If the code succeeded, the raw output of the code string. If the code failed, a table containing an error dictionary"],"signature":"hs.osascript.javascriptFromFile(fileName) -> bool, object, descriptor","stripped_doc":"","type":"Function"}}