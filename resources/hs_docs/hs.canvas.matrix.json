{"append":{"def":"hs.canvas.matrix:append(matrix) -> matrixObject","desc":"Appends the specified matrix transformations to the matrix and returns the new matrix.  This method cannot be used as a constructor.","doc":"Appends the specified matrix transformations to the matrix and returns the new matrix.  This method cannot be used as a constructor.\n\nParameters:\n * `matrix` - the table to append to the current matrix.\n\nReturns:\n * the new matrix\n\nNotes:\n * Mathematically this method multiples the original matrix by the new one and returns the result of the multiplication.\n * You can use this method to \"stack\" additional transformations on top of existing transformations, without having to know what the existing transformations in effect for the canvas element are.","examples":[],"file":"extensions/canvas/libcanvas_matrix.m","lineno":"66","name":"append","notes":[" * Mathematically this method multiples the original matrix by the new one and returns the result of the multiplication."," * You can use this method to \"stack\" additional transformations on top of existing transformations, without having to know what the existing transformations in effect for the canvas element are."],"parameters":[" * `matrix` - the table to append to the current matrix."],"returns":[" * the new matrix"],"signature":"hs.canvas.matrix:append(matrix) -> matrixObject","stripped_doc":"","type":"Method"},"identity":{"def":"hs.canvas.matrix.identity() -> matrixObject","desc":"Specifies the identity matrix.  Resets all existing transformations when applied as a method to an existing matrixObject.","doc":"Specifies the identity matrix.  Resets all existing transformations when applied as a method to an existing matrixObject.\n\nParameters:\n * None\n\nReturns:\n * the identity matrix.\n\nNotes:\n * The identity matrix can be thought of as \"apply no transformations at all\" or \"render as specified\".\n * Mathematically this is represented as:\n~~~\n[ 1,  0,  0 ]\n[ 0,  1,  0 ]\n[ 0,  0,  1 ]\n~~~","examples":[],"file":"extensions/canvas/libcanvas_matrix.m","lineno":"15","name":"identity","notes":[" * The identity matrix can be thought of as \"apply no transformations at all\" or \"render as specified\"."," * Mathematically this is represented as:","~~~","[ 1,  0,  0 ]","[ 0,  1,  0 ]","[ 0,  0,  1 ]","~~~"],"parameters":[" * None"],"returns":[" * the identity matrix."],"signature":"hs.canvas.matrix.identity() -> matrixObject","stripped_doc":"","type":"Constructor"},"invert":{"def":"hs.canvas.matrix:invert() -> matrixObject","desc":"Generates the mathematical inverse of the matrix.  This method cannot be used as a constructor.","doc":"Generates the mathematical inverse of the matrix.  This method cannot be used as a constructor.\n\nParameters:\n * None\n\nReturns:\n * the inverted matrix.\n\nNotes:\n * Inverting a matrix which represents a series of transformations has the effect of reversing or undoing the original transformations.\n * This is useful when used with [hs.canvas.matrix.append](#append) to undo a previously applied transformation without actually replacing all of the transformations which may have been applied to a canvas element.","examples":[],"file":"extensions/canvas/libcanvas_matrix.m","lineno":"43","name":"invert","notes":[" * Inverting a matrix which represents a series of transformations has the effect of reversing or undoing the original transformations."," * This is useful when used with [hs.canvas.matrix.append](#append) to undo a previously applied transformation without actually replacing all of the transformations which may have been applied to a canvas element."],"parameters":[" * None"],"returns":[" * the inverted matrix."],"signature":"hs.canvas.matrix:invert() -> matrixObject","stripped_doc":"","type":"Method"},"prepend":{"def":"hs.canvas.matrix:prepend(matrix) -> matrixObject","desc":"Prepends the specified matrix transformations to the matrix and returns the new matrix.  This method cannot be used as a constructor.","doc":"Prepends the specified matrix transformations to the matrix and returns the new matrix.  This method cannot be used as a constructor.\n\nParameters:\n * `matrix` - the table to append to the current matrix.\n\nReturns:\n * the new matrix\n\nNotes:\n * Mathematically this method multiples the new matrix by the original one and returns the result of the multiplication.\n * You can use this method to apply a transformation *before* the currently applied transformations, without having to know what the existing transformations in effect for the canvas element are.","examples":[],"file":"extensions/canvas/libcanvas_matrix.m","lineno":"91","name":"prepend","notes":[" * Mathematically this method multiples the new matrix by the original one and returns the result of the multiplication."," * You can use this method to apply a transformation *before* the currently applied transformations, without having to know what the existing transformations in effect for the canvas element are."],"parameters":[" * `matrix` - the table to append to the current matrix."],"returns":[" * the new matrix"],"signature":"hs.canvas.matrix:prepend(matrix) -> matrixObject","stripped_doc":"","type":"Method"},"rotate":{"def":"hs.canvas.matrix:rotate(angle) -> matrixObject","desc":"Applies a rotation of the specified number of degrees to the transformation matrix.  This method can be used as a constructor or a method.","doc":"Applies a rotation of the specified number of degrees to the transformation matrix.  This method can be used as a constructor or a method.\n\nParameters:\n * `angle` - the number of degrees to rotate in a clockwise direction.\n\nReturns:\n * the new matrix\n\nNotes:\n * The rotation of an element this matrix is applied to will be rotated about the origin (zero point).  To rotate an object about another point (its center for example), prepend a translation to the point to rotate about, and append a translation reversing the initial translation.\n   * e.g. `hs.canvas.matrix.translate(x, y):rotate(angle):translate(-x, -y)`","examples":[],"file":"extensions/canvas/libcanvas_matrix.m","lineno":"116","name":"rotate","notes":[" * The rotation of an element this matrix is applied to will be rotated about the origin (zero point).  To rotate an object about another point (its center for example), prepend a translation to the point to rotate about, and append a translation reversing the initial translation.","   * e.g. `hs.canvas.matrix.translate(x, y):rotate(angle):translate(-x, -y)`"],"parameters":[" * `angle` - the number of degrees to rotate in a clockwise direction."],"returns":[" * the new matrix"],"signature":"hs.canvas.matrix:rotate(angle) -> matrixObject","stripped_doc":"","type":"Method"},"scale":{"def":"hs.canvas.matrix:scale(xFactor, [yFactor]) -> matrixObject","desc":"Applies a scaling transformation to the matrix.  This method can be used as a constructor or a method.","doc":"Applies a scaling transformation to the matrix.  This method can be used as a constructor or a method.\n\nParameters:\n * `xFactor` - the scaling factor to apply to the object in the horizontal orientation.\n * `yFactor` - an optional argument specifying a different scaling factor in the vertical orientation.  If this argument is not provided, the `xFactor` argument will be used for both orientations.\n\nReturns:\n * the new matrix","examples":[],"file":"extensions/canvas/libcanvas_matrix.m","lineno":"148","name":"scale","notes":[],"parameters":[" * `xFactor` - the scaling factor to apply to the object in the horizontal orientation."," * `yFactor` - an optional argument specifying a different scaling factor in the vertical orientation.  If this argument is not provided, the `xFactor` argument will be used for both orientations."],"returns":[" * the new matrix"],"signature":"hs.canvas.matrix:scale(xFactor, [yFactor]) -> matrixObject","stripped_doc":"","type":"Method"},"shear":{"def":"hs.canvas.matrix:shear(xFactor, [yFactor]) -> matrixObject","desc":"Applies a shearing transformation to the matrix.  This method can be used as a constructor or a method.","doc":"Applies a shearing transformation to the matrix.  This method can be used as a constructor or a method.\n\nParameters:\n * `xFactor` - the shearing factor to apply to the object in the horizontal orientation.\n * `yFactor` - an optional argument specifying a different shearing factor in the vertical orientation.  If this argument is not provided, the `xFactor` argument will be used for both orientations.\n\nReturns:\n * the new matrix","examples":[],"file":"extensions/canvas/libcanvas_matrix.m","lineno":"181","name":"shear","notes":[],"parameters":[" * `xFactor` - the shearing factor to apply to the object in the horizontal orientation."," * `yFactor` - an optional argument specifying a different shearing factor in the vertical orientation.  If this argument is not provided, the `xFactor` argument will be used for both orientations."],"returns":[" * the new matrix"],"signature":"hs.canvas.matrix:shear(xFactor, [yFactor]) -> matrixObject","stripped_doc":"","type":"Method"},"translate":{"def":"hs.canvas.matrix:translate(x, y) -> matrixObject","desc":"Applies a translation transformation to the matrix.  This method can be used as a constructor or a method.","doc":"Applies a translation transformation to the matrix.  This method can be used as a constructor or a method.\n\nParameters:\n * `x` - the distance to translate the object in the horizontal direction.\n * `y` - the distance to translate the object in the vertical direction.\n\nReturns:\n * the new matrix","examples":[],"file":"extensions/canvas/libcanvas_matrix.m","lineno":"220","name":"translate","notes":[],"parameters":[" * `x` - the distance to translate the object in the horizontal direction."," * `y` - the distance to translate the object in the vertical direction."],"returns":[" * the new matrix"],"signature":"hs.canvas.matrix:translate(x, y) -> matrixObject","stripped_doc":"","type":"Method"}}