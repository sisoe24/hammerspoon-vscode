{"availablePortDetails":{"def":"hs.serial.availablePortDetails() -> table","desc":"Returns a table of currently connected serial ports details, organised by port name.","doc":"Returns a table of currently connected serial ports details, organised by port name.\n\nParameters:\n * None\n\nReturns:\n * A table containing the IOKit details of any connected serial ports, organised by port name.","examples":[],"file":"extensions/serial/libserial.m","lineno":"633","name":"availablePortDetails","notes":[],"parameters":[" * None"],"returns":[" * A table containing the IOKit details of any connected serial ports, organised by port name."],"signature":"hs.serial.availablePortDetails() -> table","stripped_doc":"","type":"Function"},"availablePortNames":{"def":"hs.serial.availablePortNames() -> table","desc":"Returns a table of currently connected serial ports names.","doc":"Returns a table of currently connected serial ports names.\n\nParameters:\n * None\n\nReturns:\n * A table containing the names of any connected serial port names as strings.","examples":[],"file":"extensions/serial/libserial.m","lineno":"609","name":"availablePortNames","notes":[],"parameters":[" * None"],"returns":[" * A table containing the names of any connected serial port names as strings."],"signature":"hs.serial.availablePortNames() -> table","stripped_doc":"","type":"Function"},"availablePortPaths":{"def":"hs.serial.availablePortPaths() -> table","desc":"Returns a table of currently connected serial ports paths.","doc":"Returns a table of currently connected serial ports paths.\n\nParameters:\n * None\n\nReturns:\n * A table containing the names of any connected serial port paths as strings.","examples":[],"file":"extensions/serial/libserial.m","lineno":"661","name":"availablePortPaths","notes":[],"parameters":[" * None"],"returns":[" * A table containing the names of any connected serial port paths as strings."],"signature":"hs.serial.availablePortPaths() -> table","stripped_doc":"","type":"Function"},"baudRate":{"def":"hs.serial:baudRate([value], [allowNonStandardBaudRates]) -> number | serialPortObject","desc":"Gets or sets the baud rate for the serial port.","doc":"Gets or sets the baud rate for the serial port.\n\nParameters:\n * value - An optional number to set the baud rate.\n * [allowNonStandardBaudRates] - An optional boolean to enable non-standard baud rates. Defaults to `false`.\n\nReturns:\n * If a value is specified, then this method returns the serial port object. Otherwise this method returns the baud rate as a number\n\nNotes:\n * This function supports the following standard baud rates as numbers: 300, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600, 115200, 230400.\n * If no baud rate is supplied, it defaults to 115200.","examples":[],"file":"extensions/serial/libserial.m","lineno":"761","name":"baudRate","notes":[" * This function supports the following standard baud rates as numbers: 300, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600, 115200, 230400."," * If no baud rate is supplied, it defaults to 115200."],"parameters":[" * value - An optional number to set the baud rate."," * [allowNonStandardBaudRates] - An optional boolean to enable non-standard baud rates. Defaults to `false`."],"returns":[" * If a value is specified, then this method returns the serial port object. Otherwise this method returns the baud rate as a number"],"signature":"hs.serial:baudRate([value], [allowNonStandardBaudRates]) -> number | serialPortObject","stripped_doc":"","type":"Method"},"callback":{"def":"hs.serial:callback(callbackFn) -> serialPortObject","desc":"Sets or removes a callback function for the `hs.serial` object.","doc":"Sets or removes a callback function for the `hs.serial` object.\n\nParameters:\n * `callbackFn` - a function to set as the callback for this `hs.serial` object.  If the value provided is `nil`, any currently existing callback function is removed.\n\nReturns:\n * The `hs.serial` object\n\nNotes:\n * The callback function should expect 4 arguments and should not return anything:\n   * `serialPortObject` - The serial port object that triggered the callback.\n   * `callbackType` - A string containing \"opened\", \"closed\", \"received\", \"removed\" or \"error\".\n   * `message` - If the `callbackType` is \"received\", then this will be the data received as a string. If the `callbackType` is \"error\", this will be the error message as a string.\n   * `hexadecimalString` - If the `callbackType` is \"received\", then this will be the data received as a hexadecimal string.","examples":[],"file":"extensions/serial/libserial.m","lineno":"569","name":"callback","notes":[" * The callback function should expect 4 arguments and should not return anything:","   * `serialPortObject` - The serial port object that triggered the callback.","   * `callbackType` - A string containing \"opened\", \"closed\", \"received\", \"removed\" or \"error\".","   * `message` - If the `callbackType` is \"received\", then this will be the data received as a string. If the `callbackType` is \"error\", this will be the error message as a string.","   * `hexadecimalString` - If the `callbackType` is \"received\", then this will be the data received as a hexadecimal string."],"parameters":[" * `callbackFn` - a function to set as the callback for this `hs.serial` object.  If the value provided is `nil`, any currently existing callback function is removed."],"returns":[" * The `hs.serial` object"],"signature":"hs.serial:callback(callbackFn) -> serialPortObject","stripped_doc":"","type":"Method"},"close":{"def":"hs.serial:close() -> serialPortObject","desc":"Closes the serial port.","doc":"Closes the serial port.\n\nParameters:\n * None\n\nReturns:\n * The `hs.serial` object.","examples":[],"file":"extensions/serial/libserial.m","lineno":"743","name":"close","notes":[],"parameters":[" * None"],"returns":[" * The `hs.serial` object."],"signature":"hs.serial:close() -> serialPortObject","stripped_doc":"","type":"Method"},"dataBits":{"def":"hs.serial:dataBits([value]) -> number | serialPortObject","desc":"Gets or sets the number of data bits for the serial port.","doc":"Gets or sets the number of data bits for the serial port.\n\nParameters:\n * value - An optional number to set the number of data bits. It can be 5 to 8.\n\nReturns:\n * If a value is specified, then this method returns the serial port object. Otherwise this method returns the data bits as a number.\n * The default value is 8.","examples":[],"file":"extensions/serial/libserial.m","lineno":"1001","name":"dataBits","notes":[],"parameters":[" * value - An optional number to set the number of data bits. It can be 5 to 8."],"returns":[" * If a value is specified, then this method returns the serial port object. Otherwise this method returns the data bits as a number."," * The default value is 8."],"signature":"hs.serial:dataBits([value]) -> number | serialPortObject","stripped_doc":"","type":"Method"},"deviceCallback":{"def":"hs.serial.deviceCallback(callbackFn) -> none","desc":"A callback that's triggered when a serial port is added or removed from the system.","doc":"A callback that's triggered when a serial port is added or removed from the system.\n\nParameters:\n * callbackFn - the callback function to trigger, or nil to remove the current callback\n\nReturns:\n * None\n\nNotes:\n * The callback function should expect 1 argument and should not return anything:\n   * `devices` - A table containing the names of any serial ports connected as strings.","examples":[],"file":"extensions/serial/libserial.m","lineno":"1071","name":"deviceCallback","notes":[" * The callback function should expect 1 argument and should not return anything:","   * `devices` - A table containing the names of any serial ports connected as strings."],"parameters":[" * callbackFn - the callback function to trigger, or nil to remove the current callback"],"returns":[" * None"],"signature":"hs.serial.deviceCallback(callbackFn) -> none","stripped_doc":"","type":"Function"},"isOpen":{"def":"hs.serial:isOpen() -> boolean","desc":"Gets whether or not a serial port is open.","doc":"Gets whether or not a serial port is open.\n\nParameters:\n * None\n\nReturns:\n * `true` if open, otherwise `false`.","examples":[],"file":"extensions/serial/libserial.m","lineno":"1032","name":"isOpen","notes":[],"parameters":[" * None"],"returns":[" * `true` if open, otherwise `false`."],"signature":"hs.serial:isOpen() -> boolean","stripped_doc":"","type":"Method"},"name":{"def":"hs.serial:name() -> string","desc":"Returns the name of a `hs.serial` object.","doc":"Returns the name of a `hs.serial` object.\n\nParameters:\n * None\n\nReturns:\n * The name as a string.","examples":[],"file":"extensions/serial/libserial.m","lineno":"685","name":"name","notes":[],"parameters":[" * None"],"returns":[" * The name as a string."],"signature":"hs.serial:name() -> string","stripped_doc":"","type":"Method"},"newFromName":{"def":"hs.serial.newFromName(portName) -> serialPortObject","desc":"Creates a new `hs.serial` object using the port name.","doc":"Creates a new `hs.serial` object using the port name.\n\nParameters:\n * portName - A string containing the port name.\n\nReturns:\n * An `hs.serial` object or `nil` if an error occured.\n\nNotes:\n * A valid port name can be found by checking `hs.serial.availablePortNames()`.","examples":[],"file":"extensions/serial/libserial.m","lineno":"503","name":"newFromName","notes":[" * A valid port name can be found by checking `hs.serial.availablePortNames()`."],"parameters":[" * portName - A string containing the port name."],"returns":[" * An `hs.serial` object or `nil` if an error occured."],"signature":"hs.serial.newFromName(portName) -> serialPortObject","stripped_doc":"","type":"Constructor"},"newFromPath":{"def":"hs.serial.newFromPath(path) -> serialPortObject","desc":"Creates a new `hs.serial` object using a path.","doc":"Creates a new `hs.serial` object using a path.\n\nParameters:\n * path - A string containing the path (i.e. \"/dev/cu.usbserial\").\n\nReturns:\n * An `hs.serial` object or `nil` if an error occured.\n\nNotes:\n * A valid port name can be found by checking `hs.serial.availablePortPaths()`.","examples":[],"file":"extensions/serial/libserial.m","lineno":"536","name":"newFromPath","notes":[" * A valid port name can be found by checking `hs.serial.availablePortPaths()`."],"parameters":[" * path - A string containing the path (i.e. \"/dev/cu.usbserial\")."],"returns":[" * An `hs.serial` object or `nil` if an error occured."],"signature":"hs.serial.newFromPath(path) -> serialPortObject","stripped_doc":"","type":"Constructor"},"open":{"def":"hs.serial:open() -> serialPortObject | nil","desc":"Opens the serial port.","doc":"Opens the serial port.\n\nParameters:\n * None\n\nReturns:\n * The `hs.serial` object or `nil` if the port could not be opened.","examples":[],"file":"extensions/serial/libserial.m","lineno":"721","name":"open","notes":[],"parameters":[" * None"],"returns":[" * The `hs.serial` object or `nil` if the port could not be opened."],"signature":"hs.serial:open() -> serialPortObject | nil","stripped_doc":"","type":"Method"},"parity":{"def":"hs.serial:parity([value]) -> string | serialPortObject","desc":"Gets or sets the parity for the serial port.","doc":"Gets or sets the parity for the serial port.\n\nParameters:\n * value - An optional string to set the parity. It can be \"none\", \"odd\" or \"even\".\n\nReturns:\n * If a value is specified, then this method returns the serial port object. Otherwise this method returns a string value of \"none\", \"odd\" or \"even\".","examples":[],"file":"extensions/serial/libserial.m","lineno":"812","name":"parity","notes":[],"parameters":[" * value - An optional string to set the parity. It can be \"none\", \"odd\" or \"even\"."],"returns":[" * If a value is specified, then this method returns the serial port object. Otherwise this method returns a string value of \"none\", \"odd\" or \"even\"."],"signature":"hs.serial:parity([value]) -> string | serialPortObject","stripped_doc":"","type":"Method"},"path":{"def":"hs.serial:path() -> string","desc":"Returns the path of a `hs.serial` object.","doc":"Returns the path of a `hs.serial` object.\n\nParameters:\n * None\n\nReturns:\n * The path as a string.","examples":[],"file":"extensions/serial/libserial.m","lineno":"703","name":"path","notes":[],"parameters":[" * None"],"returns":[" * The path as a string."],"signature":"hs.serial:path() -> string","stripped_doc":"","type":"Method"},"sendData":{"def":"hs.serial:sendData(value) -> none","desc":"Sends data via a serial port.","doc":"Sends data via a serial port.\n\nParameters:\n * value - A string of data to send.\n\nReturns:\n * None","examples":[],"file":"extensions/serial/libserial.m","lineno":"1050","name":"sendData","notes":[],"parameters":[" * value - A string of data to send."],"returns":[" * None"],"signature":"hs.serial:sendData(value) -> none","stripped_doc":"","type":"Method"},"shouldEchoReceivedData":{"def":"hs.serial:shouldEchoReceivedData([value]) -> boolean | serialPortObject","desc":"Gets or sets whether the port should echo received data.","doc":"Gets or sets whether the port should echo received data.\n\nParameters:\n * value - An optional boolean.\n\nReturns:\n * If a value is specified, then this method returns the serial port object. Otherwise this method returns a boolean.\n * The default value is `false`.","examples":[],"file":"extensions/serial/libserial.m","lineno":"944","name":"shouldEchoReceivedData","notes":[],"parameters":[" * value - An optional boolean."],"returns":[" * If a value is specified, then this method returns the serial port object. Otherwise this method returns a boolean."," * The default value is `false`."],"signature":"hs.serial:shouldEchoReceivedData([value]) -> boolean | serialPortObject","stripped_doc":"","type":"Method"},"stopBits":{"def":"hs.serial:stopBits([value]) -> number | serialPortObject","desc":"Gets or sets the number of stop bits for the serial port.","doc":"Gets or sets the number of stop bits for the serial port.\n\nParameters:\n * value - An optional number to set the number of stop bits. It can be 1 or 2.\n\nReturns:\n * If a value is specified, then this method returns the serial port object. Otherwise this method returns the number of stop bits as a number.\n * The default value is 1.","examples":[],"file":"extensions/serial/libserial.m","lineno":"970","name":"stopBits","notes":[],"parameters":[" * value - An optional number to set the number of stop bits. It can be 1 or 2."],"returns":[" * If a value is specified, then this method returns the serial port object. Otherwise this method returns the number of stop bits as a number."," * The default value is 1."],"signature":"hs.serial:stopBits([value]) -> number | serialPortObject","stripped_doc":"","type":"Method"},"usesDTRDSRFlowControl":{"def":"hs.serial:usesDTRDSRFlowControl([value]) -> boolean | serialPortObject","desc":"Gets or sets whether the port should use DTR/DSR Flow Control.","doc":"Gets or sets whether the port should use DTR/DSR Flow Control.\n\nParameters:\n * value - An optional boolean.\n\nReturns:\n * If a value is specified, then this method returns the serial port object. Otherwise this method returns a boolean.\n * The default value is `false`.","examples":[],"file":"extensions/serial/libserial.m","lineno":"892","name":"usesDTRDSRFlowControl","notes":[],"parameters":[" * value - An optional boolean."],"returns":[" * If a value is specified, then this method returns the serial port object. Otherwise this method returns a boolean."," * The default value is `false`."],"signature":"hs.serial:usesDTRDSRFlowControl([value]) -> boolean | serialPortObject","stripped_doc":"","type":"Method"},"usesRTSCTSFlowControl":{"def":"hs.serial:usesRTSCTSFlowControl([value]) -> boolean | serialPortObject","desc":"Gets or sets whether the port should use RTS/CTS Flow Control.","doc":"Gets or sets whether the port should use RTS/CTS Flow Control.\n\nParameters:\n * value - An optional boolean.\n\nReturns:\n * If a value is specified, then this method returns the serial port object. Otherwise this method returns a boolean.\n * The default value is `false`.","examples":[],"file":"extensions/serial/libserial.m","lineno":"918","name":"usesRTSCTSFlowControl","notes":[],"parameters":[" * value - An optional boolean."],"returns":[" * If a value is specified, then this method returns the serial port object. Otherwise this method returns a boolean."," * The default value is `false`."],"signature":"hs.serial:usesRTSCTSFlowControl([value]) -> boolean | serialPortObject","stripped_doc":"","type":"Method"}}