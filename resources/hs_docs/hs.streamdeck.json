{"buttonCallback":{"def":"hs.streamdeck:buttonCallback(fn)","desc":"Sets/clears the button callback function for a Stream Deck device","doc":"Sets/clears the button callback function for a Stream Deck device\n\nParameters:\n * fn - A function to be called when a button is pressed/released on the stream deck. It should receive three arguments:\n  * The hs.streamdeck userdata object\n  * A number containing the button that was pressed/released\n  * A boolean indicating whether the button was pressed (true) or released (false)\n\nReturns:\n * The hs.streamdeck device","examples":[],"file":"extensions/streamdeck/libstreamdeck.m","lineno":"109","name":"buttonCallback","notes":[],"parameters":[" * fn - A function to be called when a button is pressed/released on the stream deck. It should receive three arguments:\n   * The hs.streamdeck userdata object\n   * A number containing the button that was pressed/released\n   * A boolean indicating whether the button was pressed (true) or released (false)"],"returns":[" * The hs.streamdeck device"],"signature":"hs.streamdeck:buttonCallback(fn)","stripped_doc":"","type":"Method"},"buttonLayout":{"def":"hs.streamdeck:buttonLayout()","desc":"Gets the layout of buttons a Stream Deck device has","doc":"Gets the layout of buttons a Stream Deck device has\n\nParameters:\n * None\n\nReturns:\n * The number of columns\n * The number of rows","examples":[],"file":"extensions/streamdeck/libstreamdeck.m","lineno":"274","name":"buttonLayout","notes":[],"parameters":[" * None"],"returns":[" * The number of columns"," * The number of rows"],"signature":"hs.streamdeck:buttonLayout()","stripped_doc":"","type":"Method"},"discoveryCallback":{"def":"hs.streamdeck.discoveryCallback(fn)","desc":"Sets/clears a callback for reacting to device discovery events","doc":"Sets/clears a callback for reacting to device discovery events\n\nParameters:\n * fn - A function that will be called when a Stream Deck is connected or disconnected. It should take the following arguments:\n  * A boolean, true if a device was connected, false if a device was disconnected\n  * An hs.streamdeck object, being the device that was connected/disconnected\n\nReturns:\n * None","examples":[],"file":"extensions/streamdeck/libstreamdeck.m","lineno":"51","name":"discoveryCallback","notes":[],"parameters":[" * fn - A function that will be called when a Stream Deck is connected or disconnected. It should take the following arguments:\n   * A boolean, true if a device was connected, false if a device was disconnected\n   * An hs.streamdeck object, being the device that was connected/disconnected"],"returns":[" * None"],"signature":"hs.streamdeck.discoveryCallback(fn)","stripped_doc":"","type":"Function"},"encoderCallback":{"def":"hs.streamdeck:encoderCallback(fn)","desc":"Sets/clears the knob/encoder callback function for a Stream Deck Plus.","doc":"Sets/clears the knob/encoder callback function for a Stream Deck Plus.\n\nParameters:\n * fn - A function to be called when an encoder button is pressed/released/rotated on a Stream Deck Plus. It should receive five arguments:\n  * The hs.streamdeck userdata object\n  * A number containing the button that was pressed/released/rotated\n  * A boolean indicating whether the button was pressed (true) or released (false)\n  * A boolean indicating that the button was turned left\n  * A boolean indicating that the button was turned right\n\nReturns:\n * The hs.streamdeck device","examples":[],"file":"extensions/streamdeck/libstreamdeck.m","lineno":"136","name":"encoderCallback","notes":[],"parameters":[" * fn - A function to be called when an encoder button is pressed/released/rotated on a Stream Deck Plus. It should receive five arguments:\n   * The hs.streamdeck userdata object\n   * A number containing the button that was pressed/released/rotated\n   * A boolean indicating whether the button was pressed (true) or released (false)\n   * A boolean indicating that the button was turned left\n   * A boolean indicating that the button was turned right"],"returns":[" * The hs.streamdeck device"],"signature":"hs.streamdeck:encoderCallback(fn)","stripped_doc":"","type":"Method"},"firmwareVersion":{"def":"hs.streamdeck:firmwareVersion()","desc":"Gets the firmware version of a Stream Deck device","doc":"Gets the firmware version of a Stream Deck device\n\nParameters:\n * None\n\nReturns:\n * A string containing the firmware version of the deck","examples":[],"file":"extensions/streamdeck/libstreamdeck.m","lineno":"255","name":"firmwareVersion","notes":[],"parameters":[" * None"],"returns":[" * A string containing the firmware version of the deck"],"signature":"hs.streamdeck:firmwareVersion()","stripped_doc":"","type":"Method"},"getDevice":{"def":"hs.streamdeck.getDevice(num)","desc":"Gets an hs.streamdeck object for the specified device","doc":"Gets an hs.streamdeck object for the specified device\n\nParameters:\n * num - A number that should be within the bounds of the number of connected devices\n\nReturns:\n * An hs.streamdeck object","examples":[],"file":"extensions/streamdeck/libstreamdeck.m","lineno":"92","name":"getDevice","notes":[],"parameters":[" * num - A number that should be within the bounds of the number of connected devices"],"returns":[" * An hs.streamdeck object"],"signature":"hs.streamdeck.getDevice(num)","stripped_doc":"","type":"Function"},"imageSize":{"def":"hs.streamdeck:imageSize()","desc":"Gets the width and height of the buttons in pixels","doc":"Gets the width and height of the buttons in pixels\n\nParameters:\n * None\n\nReturns:\n * An table with keys `w` and `h` containing the width and height, respectively, of images expected by the Stream Deck","examples":[],"file":"extensions/streamdeck/libstreamdeck.m","lineno":"295","name":"imageSize","notes":[],"parameters":[" * None"],"returns":[" * An table with keys `w` and `h` containing the width and height, respectively, of images expected by the Stream Deck"],"signature":"hs.streamdeck:imageSize()","stripped_doc":"","type":"Method"},"init":{"def":"hs.streamdeck.init(fn)","desc":"Initialises the Stream Deck driver and sets a discovery callback","doc":"Initialises the Stream Deck driver and sets a discovery callback\n\nParameters:\n * fn - A function that will be called when a Stream Deck is connected or disconnected. It should take the following arguments:\n  * A boolean, true if a device was connected, false if a device was disconnected\n  * An hs.streamdeck object, being the device that was connected/disconnected\n\nReturns:\n * None\n\nNotes:\n * This function must be called before any other parts of this module are used","examples":[],"file":"extensions/streamdeck/libstreamdeck.m","lineno":"25","name":"init","notes":[" * This function must be called before any other parts of this module are used"],"parameters":[" * fn - A function that will be called when a Stream Deck is connected or disconnected. It should take the following arguments:\n   * A boolean, true if a device was connected, false if a device was disconnected\n   * An hs.streamdeck object, being the device that was connected/disconnected"],"returns":[" * None"],"signature":"hs.streamdeck.init(fn)","stripped_doc":"","type":"Function"},"numDevices":{"def":"hs.streamdeck.numDevices()","desc":"Gets the number of Stream Deck devices connected","doc":"Gets the number of Stream Deck devices connected\n\nParameters:\n * None\n\nReturns:\n * A number containing the number of Stream Deck devices attached to the system","examples":[],"file":"extensions/streamdeck/libstreamdeck.m","lineno":"75","name":"numDevices","notes":[],"parameters":[" * None"],"returns":[" * A number containing the number of Stream Deck devices attached to the system"],"signature":"hs.streamdeck.numDevices()","stripped_doc":"","type":"Function"},"reset":{"def":"hs.streamdeck:reset()","desc":"Resets a Stream Deck device","doc":"Resets a Stream Deck device\n\nParameters:\n * None\n\nReturns:\n * The hs.streamdeck object","examples":[],"file":"extensions/streamdeck/libstreamdeck.m","lineno":"216","name":"reset","notes":[],"parameters":[" * None"],"returns":[" * The hs.streamdeck object"],"signature":"hs.streamdeck:reset()","stripped_doc":"","type":"Method"},"screenCallback":{"def":"hs.streamdeck:screenCallback(fn)","desc":"Sets/clears the screen callback function for a Stream Deck Plus's touch screen (above the encoder knobs).","doc":"Sets/clears the screen callback function for a Stream Deck Plus's touch screen (above the encoder knobs).\n\nParameters:\n * fn - A function to be called when a screen is pressed/released/swiped on a Stream Deck Plus. It should receive six arguments:\n  * The hs.streamdeck userdata object\n  * A string either containing \"shortPress\", \"longPress\" or \"swipe\"\n  * The X position of where the screen was first touched\n  * The Y position of where the screen was first touched\n  * The X position of where the screen was last touched (if swiping)\n  * The Y position of where the screen was last touched (if swiping)\n\nReturns:\n * The hs.streamdeck device","examples":[],"file":"extensions/streamdeck/libstreamdeck.m","lineno":"165","name":"screenCallback","notes":[],"parameters":[" * fn - A function to be called when a screen is pressed/released/swiped on a Stream Deck Plus. It should receive six arguments:\n   * The hs.streamdeck userdata object\n   * A string either containing \"shortPress\", \"longPress\" or \"swipe\"\n   * The X position of where the screen was first touched\n   * The Y position of where the screen was first touched\n   * The X position of where the screen was last touched (if swiping)\n   * The Y position of where the screen was last touched (if swiping)"],"returns":[" * The hs.streamdeck device"],"signature":"hs.streamdeck:screenCallback(fn)","stripped_doc":"","type":"Method"},"serialNumber":{"def":"hs.streamdeck:serialNumber()","desc":"Gets the serial number of a Stream Deck device","doc":"Gets the serial number of a Stream Deck device\n\nParameters:\n * None\n\nReturns:\n * A string containing the serial number of the deck","examples":[],"file":"extensions/streamdeck/libstreamdeck.m","lineno":"236","name":"serialNumber","notes":[],"parameters":[" * None"],"returns":[" * A string containing the serial number of the deck"],"signature":"hs.streamdeck:serialNumber()","stripped_doc":"","type":"Method"},"setBrightness":{"def":"hs.streamdeck:setBrightness(brightness)","desc":"Sets the brightness of a Stream Deck device","doc":"Sets the brightness of a Stream Deck device\n\nParameters:\n * brightness - A whole number between 0 and 100 indicating the percentage brightness level to set\n\nReturns:\n * The hs.streamdeck device","examples":[],"file":"extensions/streamdeck/libstreamdeck.m","lineno":"195","name":"setBrightness","notes":[],"parameters":[" * brightness - A whole number between 0 and 100 indicating the percentage brightness level to set"],"returns":[" * The hs.streamdeck device"],"signature":"hs.streamdeck:setBrightness(brightness)","stripped_doc":"","type":"Method"},"setButtonColor":{"def":"hs.streamdeck:setButtonColor(button, color)","desc":"Sets a button on the Stream Deck device to the specified color","doc":"Sets a button on the Stream Deck device to the specified color\n\nParameters:\n * button - A number (from 1 to 15) describing which button to set the color on\n * color - An hs.drawing.color object\n\nReturns:\n * The hs.streamdeck object","examples":[],"file":"extensions/streamdeck/libstreamdeck.m","lineno":"359","name":"setButtonColor","notes":[],"parameters":[" * button - A number (from 1 to 15) describing which button to set the color on"," * color - An hs.drawing.color object"],"returns":[" * The hs.streamdeck object"],"signature":"hs.streamdeck:setButtonColor(button, color)","stripped_doc":"","type":"Method"},"setButtonImage":{"def":"hs.streamdeck:setButtonImage(button, image)","desc":"Sets the image of a button on the Stream Deck device","doc":"Sets the image of a button on the Stream Deck device\n\nParameters:\n * button - A number (from 1 to 15) describing which button to set the image for\n * image - An hs.image object\n\nReturns:\n * The hs.streamdeck object","examples":[],"file":"extensions/streamdeck/libstreamdeck.m","lineno":"315","name":"setButtonImage","notes":[],"parameters":[" * button - A number (from 1 to 15) describing which button to set the image for"," * image - An hs.image object"],"returns":[" * The hs.streamdeck object"],"signature":"hs.streamdeck:setButtonImage(button, image)","stripped_doc":"","type":"Method"},"setScreenImage":{"def":"hs.streamdeck:setScreenImage(encoder, image)","desc":"Sets the image of the screen on the Stream Deck device","doc":"Sets the image of the screen on the Stream Deck device\n\nParameters:\n * encoder - A number (from 1 to 4) describing which encoder to set the image for\n * image - An hs.image object\n\nReturns:\n * The hs.streamdeck object","examples":[],"file":"extensions/streamdeck/libstreamdeck.m","lineno":"337","name":"setScreenImage","notes":[],"parameters":[" * encoder - A number (from 1 to 4) describing which encoder to set the image for"," * image - An hs.image object"],"returns":[" * The hs.streamdeck object"],"signature":"hs.streamdeck:setScreenImage(encoder, image)","stripped_doc":"","type":"Method"}}
