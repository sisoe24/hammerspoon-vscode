{"eventTypes":{"def":"hs.wifi.watcher.eventTypes[]","desc":"A table containing the possible event types that this watcher can monitor for.","doc":"A table containing the possible event types that this watcher can monitor for.\n\nNotes:\n * The following events are available for monitoring:\n  * \"SSIDChange\"                   - monitor when the associated network for the Wi-Fi interface changes\n  * \"BSSIDChange\"                  - monitor when the base station the Wi-Fi interface is connected to changes\n  * \"countryCodeChange\"            - monitor when the adopted country code of the Wi-Fi interface changes\n  * \"linkChange\"                   - monitor when the link state for the Wi-Fi interface changes\n  * \"linkQualityChange\"            - monitor when the RSSI or transmit rate for the Wi-Fi interface changes\n  * \"modeChange\"                   - monitor when the operating mode of the Wi-Fi interface changes\n  * \"powerChange\"                  - monitor when the power state of the Wi-Fi interface changes\n  * \"scanCacheUpdated\"             - monitor when the scan cache of the Wi-Fi interface is updated with new information","file":"extensions/wifi/libwifi_watcher.m","lineno":"364","name":"eventTypes","notes":[" * The following events are available for monitoring:","  * \"SSIDChange\"                   - monitor when the associated network for the Wi-Fi interface changes","  * \"BSSIDChange\"                  - monitor when the base station the Wi-Fi interface is connected to changes","  * \"countryCodeChange\"            - monitor when the adopted country code of the Wi-Fi interface changes","  * \"linkChange\"                   - monitor when the link state for the Wi-Fi interface changes","  * \"linkQualityChange\"            - monitor when the RSSI or transmit rate for the Wi-Fi interface changes","  * \"modeChange\"                   - monitor when the operating mode of the Wi-Fi interface changes","  * \"powerChange\"                  - monitor when the power state of the Wi-Fi interface changes","  * \"scanCacheUpdated\"             - monitor when the scan cache of the Wi-Fi interface is updated with new information"],"signature":"hs.wifi.watcher.eventTypes[]","stripped_doc":"","type":"Constant"},"new":{"def":"hs.wifi.watcher.new(fn) -> watcher","desc":"Creates a new watcher for WiFi network events","doc":"Creates a new watcher for WiFi network events\n\nParameters:\n * fn - A function that will be called when a WiFi event that is being monitored occurs. The function should expect 2 or 4 arguments as described in the notes below.\n\nReturns:\n * A `hs.wifi.watcher` object\n\nNotes:\n * For backwards compatibility, only \"SSIDChange\" is watched for by default, so existing code can continue to ignore the callback function arguments unless you add or change events with the [hs.wifi.watcher:watchingFor](#watchingFor).\n * The callback function should expect between 3 and 5 arguments, depending upon the events being watched.  The possible arguments are as follows:\n   * `watcher`, \"SSIDChange\", `interface` - occurs when the associated network for the Wi-Fi interface changes\n     * `watcher`   - the watcher object itself\n     * `message`   - the message specifying the event, in this case \"SSIDChange\"\n     * `interface` - the name of the interface for which the event occured\n   * Use `hs.wifi.currentNetwork([interface])` to identify the new network, which may be nil when you leave a network.\n   * `watcher`, \"BSSIDChange\", `interface` - occurs when the base station the Wi-Fi interface is connected to changes\n     * `watcher`   - the watcher object itself\n     * `message`   - the message specifying the event, in this case \"BSSIDChange\"\n     * `interface` - the name of the interface for which the event occured\n   * `watcher`, \"countryCodeChange\", `interface` - occurs when the adopted country code of the Wi-Fi interface changes\n     * `watcher`   - the watcher object itself\n     * `message`   - the message specifying the event, in this case \"countryCodeChange\"\n     * `interface` - the name of the interface for which the event occured\n   * `watcher`, \"linkChange\", `interface` - occurs when the link state for the Wi-Fi interface changes\n     * `watcher`   - the watcher object itself\n     * `message`   - the message specifying the event, in this case \"linkChange\"\n     * `interface` - the name of the interface for which the event occured\n   * `watcher`, \"linkQualityChange\", `interface` - occurs when the RSSI or transmit rate for the Wi-Fi interface changes\n     * `watcher`   - the watcher object itself\n     * `message`   - the message specifying the event, in this case \"linkQualityChange\"\n     * `interface` - the name of the interface for which the event occured\n     * `rssi`      - the RSSI value for the currently associated network on the Wi-Fi interface\n     * `rate`      - the transmit rate for the currently associated network on the Wi-Fi interface\n   * `watcher`, \"modeChange\", `interface` - occurs when the operating mode of the Wi-Fi interface changes\n     * `watcher`   - the watcher object itself\n     * `message`   - the message specifying the event, in this case \"modeChange\"\n     * `interface` - the name of the interface for which the event occured\n   * `watcher`, \"powerChange\", `interface` - occurs when the power state of the Wi-Fi interface changes\n     * `watcher`   - the watcher object itself\n     * `message`   - the message specifying the event, in this case \"powerChange\"\n     * `interface` - the name of the interface for which the event occured\n   * `watcher`, \"scanCacheUpdated\", `interface` - occurs when the scan cache of the Wi-Fi interface is updated with new information\n     * `watcher`   - the watcher object itself\n     * `message`   - the message specifying the event, in this case \"scanCacheUpdated\"\n     * `interface` - the name of the interface for which the event occured","examples":[],"file":"extensions/wifi/libwifi_watcher.m","lineno":"215","name":"new","notes":[" * For backwards compatibility, only \"SSIDChange\" is watched for by default, so existing code can continue to ignore the callback function arguments unless you add or change events with the [hs.wifi.watcher:watchingFor](#watchingFor)."," * The callback function should expect between 3 and 5 arguments, depending upon the events being watched.  The possible arguments are as follows:","   * `watcher`, \"SSIDChange\", `interface` - occurs when the associated network for the Wi-Fi interface changes","     * `watcher`   - the watcher object itself","     * `message`   - the message specifying the event, in this case \"SSIDChange\"","     * `interface` - the name of the interface for which the event occured","   * Use `hs.wifi.currentNetwork([interface])` to identify the new network, which may be nil when you leave a network.","   * `watcher`, \"BSSIDChange\", `interface` - occurs when the base station the Wi-Fi interface is connected to changes","     * `watcher`   - the watcher object itself","     * `message`   - the message specifying the event, in this case \"BSSIDChange\"","     * `interface` - the name of the interface for which the event occured","   * `watcher`, \"countryCodeChange\", `interface` - occurs when the adopted country code of the Wi-Fi interface changes","     * `watcher`   - the watcher object itself","     * `message`   - the message specifying the event, in this case \"countryCodeChange\"","     * `interface` - the name of the interface for which the event occured","   * `watcher`, \"linkChange\", `interface` - occurs when the link state for the Wi-Fi interface changes","     * `watcher`   - the watcher object itself","     * `message`   - the message specifying the event, in this case \"linkChange\"","     * `interface` - the name of the interface for which the event occured","   * `watcher`, \"linkQualityChange\", `interface` - occurs when the RSSI or transmit rate for the Wi-Fi interface changes","     * `watcher`   - the watcher object itself","     * `message`   - the message specifying the event, in this case \"linkQualityChange\"","     * `interface` - the name of the interface for which the event occured","     * `rssi`      - the RSSI value for the currently associated network on the Wi-Fi interface","     * `rate`      - the transmit rate for the currently associated network on the Wi-Fi interface","   * `watcher`, \"modeChange\", `interface` - occurs when the operating mode of the Wi-Fi interface changes","     * `watcher`   - the watcher object itself","     * `message`   - the message specifying the event, in this case \"modeChange\"","     * `interface` - the name of the interface for which the event occured","   * `watcher`, \"powerChange\", `interface` - occurs when the power state of the Wi-Fi interface changes","     * `watcher`   - the watcher object itself","     * `message`   - the message specifying the event, in this case \"powerChange\"","     * `interface` - the name of the interface for which the event occured","   * `watcher`, \"scanCacheUpdated\", `interface` - occurs when the scan cache of the Wi-Fi interface is updated with new information","     * `watcher`   - the watcher object itself","     * `message`   - the message specifying the event, in this case \"scanCacheUpdated\"","     * `interface` - the name of the interface for which the event occured"],"parameters":[" * fn - A function that will be called when a WiFi event that is being monitored occurs. The function should expect 2 or 4 arguments as described in the notes below."],"returns":[" * A `hs.wifi.watcher` object"],"signature":"hs.wifi.watcher.new(fn) -> watcher","stripped_doc":"","type":"Constructor"},"start":{"def":"hs.wifi.watcher:start() -> watcher","desc":"Starts the SSID watcher","doc":"Starts the SSID watcher\n\nParameters:\n * None\n\nReturns:\n * The `hs.wifi.watcher` object","examples":[],"file":"extensions/wifi/libwifi_watcher.m","lineno":"282","name":"start","notes":[],"parameters":[" * None"],"returns":[" * The `hs.wifi.watcher` object"],"signature":"hs.wifi.watcher:start() -> watcher","stripped_doc":"","type":"Method"},"stop":{"def":"hs.wifi.watcher:stop() -> watcher","desc":"Stops the SSID watcher","doc":"Stops the SSID watcher\n\nParameters:\n * None\n\nReturns:\n * The `hs.wifi.watcher` object","examples":[],"file":"extensions/wifi/libwifi_watcher.m","lineno":"300","name":"stop","notes":[],"parameters":[" * None"],"returns":[" * The `hs.wifi.watcher` object"],"signature":"hs.wifi.watcher:stop() -> watcher","stripped_doc":"","type":"Method"},"watchingFor":{"def":"hs.wifi.watcher:watchingFor([messages]) -> watcher | current-value","desc":"Get or set the specific types of wifi events to generate a callback for with this watcher.","doc":"Get or set the specific types of wifi events to generate a callback for with this watcher.\n\nParameters:\n * `messages` - an optional table of or list of strings specifying the types of events this watcher should invoke a callback for.  You can specify multiple types of events to watch for. Defaults to `{ \"SSIDChange\" }`.\n\nReturns:\n * if a value is provided, returns the watcher object; otherwise returns the current values as a table of strings.\n\nNotes:\n * the possible values for this method are described in [hs.wifi.watcher.eventTypes](#eventTypes).\n * the special string \"all\" specifies that all event types should be watched for.","examples":[],"file":"extensions/wifi/libwifi_watcher.m","lineno":"318","name":"watchingFor","notes":[" * the possible values for this method are described in [hs.wifi.watcher.eventTypes](#eventTypes)."," * the special string \"all\" specifies that all event types should be watched for."],"parameters":[" * `messages` - an optional table of or list of strings specifying the types of events this watcher should invoke a callback for.  You can specify multiple types of events to watch for. Defaults to `{ \"SSIDChange\" }`."],"returns":[" * if a value is provided, returns the watcher object; otherwise returns the current values as a table of strings."],"signature":"hs.wifi.watcher:watchingFor([messages]) -> watcher | current-value","stripped_doc":"","type":"Method"}}