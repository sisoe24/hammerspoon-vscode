{"angle":{"def":"hs.geometry:angle() -> number","desc":"Returns the angle between the positive x axis and this vector2","doc":"Returns the angle between the positive x axis and this vector2\n\nParameters:\n * None\n\nReturns:\n * a number representing the angle in radians","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"516","name":"angle","notes":[],"parameters":[" * None"],"returns":[" * a number representing the angle in radians"],"signature":"hs.geometry:angle() -> number","stripped_doc":"","type":"Method"},"angleTo":{"def":"hs.geometry:angleTo(point) -> number","desc":"Returns the angle between the positive x axis and the vector connecting this point or rect's center to another point or rect's center","doc":"Returns the angle between the positive x axis and the vector connecting this point or rect's center to another point or rect's center\n\nParameters:\n * point - an hs.geometry object, or a table or string or parameter list to construct one; if a rect, uses the rect's center\n\nReturns:\n * a number representing the angle in radians","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"529","name":"angleTo","notes":[],"parameters":[" * point - an hs.geometry object, or a table or string or parameter list to construct one; if a rect, uses the rect's center"],"returns":[" * a number representing the angle in radians"],"signature":"hs.geometry:angleTo(point) -> number","stripped_doc":"","type":"Method"},"area":{"def":"hs.geometry.area","desc":"A number representing the area of this rect or size; changing it will scale the rect/size - see `hs.geometry:scale()`","doc":"A number representing the area of this rect or size; changing it will scale the rect/size - see `hs.geometry:scale()`","file":"extensions/geometry/geometry.lua","lineno":"333","name":"area","signature":"hs.geometry.area","stripped_doc":"","type":"Field"},"aspect":{"def":"hs.geometry.aspect","desc":"A number representing the aspect ratio of this rect or size; changing it will reshape the rect/size, keeping its area and center constant","doc":"A number representing the aspect ratio of this rect or size; changing it will reshape the rect/size, keeping its area and center constant","file":"extensions/geometry/geometry.lua","lineno":"352","name":"aspect","signature":"hs.geometry.aspect","stripped_doc":"","type":"Field"},"bottomright":{"def":"hs.geometry.bottomright","desc":"Alias for `x2y2`","doc":"Alias for `x2y2`","file":"extensions/geometry/geometry.lua","lineno":"267","name":"bottomright","signature":"hs.geometry.bottomright","stripped_doc":"","type":"Field"},"center":{"def":"hs.geometry.center","desc":"A point representing the geometric center of this rect or the midpoint of this vector2; changing it will move the rect/vector accordingly","doc":"A point representing the geometric center of this rect or the midpoint of this vector2; changing it will move the rect/vector accordingly","file":"extensions/geometry/geometry.lua","lineno":"305","name":"center","signature":"hs.geometry.center","stripped_doc":"","type":"Field"},"copy":{"def":"hs.geometry.copy(geom) -> hs.geometry object","desc":"Creates a copy of an hs.geometry object","doc":"Creates a copy of an hs.geometry object\n\nParameters:\n * geom - an hs.geometry object to copy\n\nReturns:\n * a newly created copy of the hs.geometry object","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"151","name":"copy","notes":[],"parameters":[" * geom - an hs.geometry object to copy"],"returns":[" * a newly created copy of the hs.geometry object"],"signature":"hs.geometry.copy(geom) -> hs.geometry object","stripped_doc":"","type":"Constructor"},"distance":{"def":"hs.geometry:distance(point) -> number","desc":"Finds the distance between this point or rect's center and another point or rect's center","doc":"Finds the distance between this point or rect's center and another point or rect's center\n\nParameters:\n * point - an hs.geometry object, or a table or string or parameter list to construct one; if a rect, uses the rect's center\n\nReturns:\n * a number indicating the distance","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"542","name":"distance","notes":[],"parameters":[" * point - an hs.geometry object, or a table or string or parameter list to construct one; if a rect, uses the rect's center"],"returns":[" * a number indicating the distance"],"signature":"hs.geometry:distance(point) -> number","stripped_doc":"","type":"Method"},"equals":{"def":"hs.geometry:equals(other) -> boolean","desc":"Checks if two geometry objects are equal","doc":"Checks if two geometry objects are equal\n\nParameters:\n * other - another hs.geometry object, or a table or string or parameter list to construct one\n\nReturns:\n * `true` if this hs.geometry object perfectly overlaps other, `false` otherwise","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"390","name":"equals","notes":[],"parameters":[" * other - another hs.geometry object, or a table or string or parameter list to construct one"],"returns":[" * `true` if this hs.geometry object perfectly overlaps other, `false` otherwise"],"signature":"hs.geometry:equals(other) -> boolean","stripped_doc":"","type":"Method"},"fit":{"def":"hs.geometry:fit(bounds) -> hs.geometry object","desc":"Ensure this rect is fully inside `bounds`, by scaling it down if it's larger (preserving its aspect ratio) and moving it if necessary","doc":"Ensure this rect is fully inside `bounds`, by scaling it down if it's larger (preserving its aspect ratio) and moving it if necessary\n\nParameters:\n * bounds - an hs.geometry rect object, or a table or string or parameter list to construct one, indicating the rect that\n   must fully contain this rect\n\nReturns:\n * this hs.geometry object for method chaining","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"448","name":"fit","notes":[],"parameters":[" * bounds - an hs.geometry rect object, or a table or string or parameter list to construct one, indicating the rect that must fully contain this rect"],"returns":[" * this hs.geometry object for method chaining"],"signature":"hs.geometry:fit(bounds) -> hs.geometry object","stripped_doc":"","type":"Method"},"floor":{"def":"hs.geometry:floor() -> hs.geometry object","desc":"Truncates all coordinates in this object to integers","doc":"Truncates all coordinates in this object to integers\n\nParameters:\n * None\n\nReturns:\n * this hs.geometry point for method chaining","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"483","name":"floor","notes":[],"parameters":[" * None"],"returns":[" * this hs.geometry point for method chaining"],"signature":"hs.geometry:floor() -> hs.geometry object","stripped_doc":"","type":"Method"},"fromUnitRect":{"def":"hs.geometry:fromUnitRect(frame) -> hs.geometry rect","desc":"Converts a unit rect within a given frame into a rect","doc":"Converts a unit rect within a given frame into a rect\n\nParameters:\n * frame - an hs.geometry rect (with `w` and `h` >0)\n\nReturns:\n * An hs.geometry rect object","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"672","name":"fromUnitRect","notes":[],"parameters":[" * frame - an hs.geometry rect (with `w` and `h` >0)"],"returns":[" * An hs.geometry rect object"],"signature":"hs.geometry:fromUnitRect(frame) -> hs.geometry rect","stripped_doc":"","type":"Method"},"h":{"def":"hs.geometry.h","desc":"The height of this rect or size; changing it will keep the rect's x,y corner constant","doc":"The height of this rect or size; changing it will keep the rect's x,y corner constant","file":"extensions/geometry/geometry.lua","lineno":"218","name":"h","signature":"hs.geometry.h","stripped_doc":"","type":"Field"},"inside":{"def":"hs.geometry:inside(rect) -> boolean","desc":"Checks if this hs.geometry object lies fully inside a given rect","doc":"Checks if this hs.geometry object lies fully inside a given rect\n\nParameters:\n * rect - an hs.geometry rect, or a table or string or parameter list to construct one\n\nReturns:\n * `true` if this point/rect lies fully inside the given rect, `false` otherwise","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"570","name":"inside","notes":[],"parameters":[" * rect - an hs.geometry rect, or a table or string or parameter list to construct one"],"returns":[" * `true` if this point/rect lies fully inside the given rect, `false` otherwise"],"signature":"hs.geometry:inside(rect) -> boolean","stripped_doc":"","type":"Method"},"intersect":{"def":"hs.geometry:intersect(rect) -> hs.geometry rect","desc":"Returns the intersection rect between this rect and another rect","doc":"Returns the intersection rect between this rect and another rect\n\nParameters:\n * rect - an hs.geometry rect, or a table or string or parameter list to construct one\n\nReturns:\n * a new hs.geometry rect\n\nNotes:\n * If the two rects don't intersect, the result rect will be a \"projection\" of the second rect onto this rect's\n   closest edge or corner along the x or y axis; the `w` and/or `h` fields in the result rect will be 0.","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"585","name":"intersect","notes":[" * If the two rects don't intersect, the result rect will be a \"projection\" of the second rect onto this rect's","   closest edge or corner along the x or y axis; the `w` and/or `h` fields in the result rect will be 0."],"parameters":[" * rect - an hs.geometry rect, or a table or string or parameter list to construct one"],"returns":[" * a new hs.geometry rect"],"signature":"hs.geometry:intersect(rect) -> hs.geometry rect","stripped_doc":"","type":"Method"},"length":{"def":"hs.geometry.length","desc":"A number representing the length of the diagonal of this rect, or the length of this vector2; changing it will scale the rect/vector - see `hs.geometry:scale()`","doc":"A number representing the length of the diagonal of this rect, or the length of this vector2; changing it will scale the rect/vector - see `hs.geometry:scale()`","file":"extensions/geometry/geometry.lua","lineno":"318","name":"length","signature":"hs.geometry.length","stripped_doc":"","type":"Field"},"move":{"def":"hs.geometry:move(point) -> hs.geometry object","desc":"Moves this point/rect","doc":"Moves this point/rect\n\nParameters:\n * point - an hs.geometry object, or a table or string or parameter list to construct one, indicating the x and y displacement to apply\n\nReturns:\n * this hs.geometry object for method chaining","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"403","name":"move","notes":[],"parameters":[" * point - an hs.geometry object, or a table or string or parameter list to construct one, indicating the x and y displacement to apply"],"returns":[" * this hs.geometry object for method chaining"],"signature":"hs.geometry:move(point) -> hs.geometry object","stripped_doc":"","type":"Method"},"new":{"def":"hs.geometry.new(...) -> hs.geometry object","desc":"Creates a new hs.geometry object","doc":"Creates a new hs.geometry object\n\nParameters:\n * ... - see the module description at the top\n\nReturns:\n * a newly created hs.geometry object","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"141","name":"new","notes":[],"parameters":[" * ... - see the module description at the top"],"returns":[" * a newly created hs.geometry object"],"signature":"hs.geometry.new(...) -> hs.geometry object","stripped_doc":"","type":"Constructor"},"normalize":{"def":"hs.geometry:normalize() -> point","desc":"Normalizes this vector2","doc":"Normalizes this vector2\n\nParameters:\n * None\n\nReturns:\n * this hs.geometry point for method chaining","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"468","name":"normalize","notes":[],"parameters":[" * None"],"returns":[" * this hs.geometry point for method chaining"],"signature":"hs.geometry:normalize() -> point","stripped_doc":"","type":"Method"},"point":{"def":"hs.geometry.point(x, y) -> hs.geometry point","desc":"Convenience function for creating a point object","doc":"Convenience function for creating a point object\n\nParameters:\n * x - A number containing the horizontal co-ordinate of the point\n * y - A number containing the vertical co-ordinate of the point\n\nReturns:\n * An hs.geometry point object","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"732","name":"point","notes":[],"parameters":[" * x - A number containing the horizontal co-ordinate of the point"," * y - A number containing the vertical co-ordinate of the point"],"returns":[" * An hs.geometry point object"],"signature":"hs.geometry.point(x, y) -> hs.geometry point","stripped_doc":"","type":"Constructor"},"rect":{"def":"hs.geometry.rect(x, y, w, h) -> hs.geometry rect","desc":"Convenience function for creating a rect-table","doc":"Convenience function for creating a rect-table\n\nParameters:\n * x - A number containing the horizontal co-ordinate of the top-left point of the rect\n * y - A number containing the vertical co-ordinate of the top-left point of the rect\n * w - A number containing the width of the rect\n * h - A number containing the height of the rect\n\nReturns:\n * An hs.geometry rect object","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"717","name":"rect","notes":[],"parameters":[" * x - A number containing the horizontal co-ordinate of the top-left point of the rect"," * y - A number containing the vertical co-ordinate of the top-left point of the rect"," * w - A number containing the width of the rect"," * h - A number containing the height of the rect"],"returns":[" * An hs.geometry rect object"],"signature":"hs.geometry.rect(x, y, w, h) -> hs.geometry rect","stripped_doc":"","type":"Constructor"},"rotateCCW":{"def":"hs.geometry:rotateCCW(aroundpoint, ntimes) -> hs.geometry point","desc":"Rotates a point around another point N times","doc":"Rotates a point around another point N times\n\nParameters:\n * aroundpoint - an hs.geometry point to rotate this point around\n * ntimes - the number of times to rotate, defaults to 1\n\nReturns:\n * A new hs.geometry point containing the location of the rotated point","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"695","name":"rotateCCW","notes":[],"parameters":[" * aroundpoint - an hs.geometry point to rotate this point around"," * ntimes - the number of times to rotate, defaults to 1"],"returns":[" * A new hs.geometry point containing the location of the rotated point"],"signature":"hs.geometry:rotateCCW(aroundpoint, ntimes) -> hs.geometry point","stripped_doc":"","type":"Method"},"scale":{"def":"hs.geometry:scale(size) -> hs.geometry object","desc":"Scales this vector2/size, or this rect *keeping its center constant*","doc":"Scales this vector2/size, or this rect *keeping its center constant*\n\nParameters:\n * size - an hs.geometry object, or a table or string or parameter list to construct one, indicating the factors for scaling this rect's width and height;\n   if a number, the rect will be scaled by the same factor in both axes\n\nReturns:\n * this hs.geometry object for method chaining","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"419","name":"scale","notes":[],"parameters":[" * size - an hs.geometry object, or a table or string or parameter list to construct one, indicating the factors for scaling this rect's width and height; if a number, the rect will be scaled by the same factor in both axes"],"returns":[" * this hs.geometry object for method chaining"],"signature":"hs.geometry:scale(size) -> hs.geometry object","stripped_doc":"","type":"Method"},"size":{"def":"hs.geometry.size(w, h) -> hs.geometry size","desc":"Convenience function for creating a size object","doc":"Convenience function for creating a size object\n\nParameters:\n * w - A number containing a width\n * h - A number containing a height\n\nReturns:\n * An hs.geometry size object","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"744","name":"size","notes":[],"parameters":[" * w - A number containing a width"," * h - A number containing a height"],"returns":[" * An hs.geometry size object"],"signature":"hs.geometry.size(w, h) -> hs.geometry size","stripped_doc":"","type":"Constructor"},"string":{"def":"hs.geometry.string","desc":"The `\"X,Y/WxH\"` string for this hs.geometry object (*reduced precision*); useful e.g. for logging","doc":"The `\"X,Y/WxH\"` string for this hs.geometry object (*reduced precision*); useful e.g. for logging","file":"extensions/geometry/geometry.lua","lineno":"281","name":"string","signature":"hs.geometry.string","stripped_doc":"","type":"Field"},"table":{"def":"hs.geometry.table","desc":"The `{x=X,y=Y,w=W,h=H}` table for this hs.geometry object; useful e.g. for serialization/deserialization","doc":"The `{x=X,y=Y,w=W,h=H}` table for this hs.geometry object; useful e.g. for serialization/deserialization","file":"extensions/geometry/geometry.lua","lineno":"275","name":"table","signature":"hs.geometry.table","stripped_doc":"","type":"Field"},"topleft":{"def":"hs.geometry.topleft","desc":"Alias for `xy`","doc":"Alias for `xy`","file":"extensions/geometry/geometry.lua","lineno":"206","name":"topleft","signature":"hs.geometry.topleft","stripped_doc":"","type":"Field"},"toUnitRect":{"def":"hs.geometry:toUnitRect(frame) -> hs.geometry unit rect","desc":"Converts a rect into its unit rect within a given frame","doc":"Converts a rect into its unit rect within a given frame\n\nParameters:\n * frame - an hs.geometry rect (with `w` and `h` >0)\n\nReturns:\n * An hs.geometry unit rect object\n\nNotes:\n * The resulting unit rect is always clipped within `frame`'s bounds (via `hs.geometry:intersect()`); if `frame`\n   does not encompass this rect *no error will be thrown*, but the resulting unit rect won't be a direct match with this rect\n   (i.e. calling `:fromUnitRect(frame)` on it will return a different rect)","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"644","name":"toUnitRect","notes":[" * The resulting unit rect is always clipped within `frame`'s bounds (via `hs.geometry:intersect()`); if `frame`","   does not encompass this rect *no error will be thrown*, but the resulting unit rect won't be a direct match with this rect","   (i.e. calling `:fromUnitRect(frame)` on it will return a different rect)"],"parameters":[" * frame - an hs.geometry rect (with `w` and `h` >0)"],"returns":[" * An hs.geometry unit rect object"],"signature":"hs.geometry:toUnitRect(frame) -> hs.geometry unit rect","stripped_doc":"","type":"Method"},"type":{"def":"hs.geometry:type() -> string","desc":"Returns the type of an hs.geometry object","doc":"Returns the type of an hs.geometry object\n\nParameters:\n * None\n\nReturns:\n * a string describing the type of this hs.geometry object, i.e. 'point', 'size', 'rect' or 'unitrect'; `nil` if not a valid object","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"45","name":"type","notes":[],"parameters":[" * None"],"returns":[" * a string describing the type of this hs.geometry object, i.e. 'point', 'size', 'rect' or 'unitrect'; `nil` if not a valid object"],"signature":"hs.geometry:type() -> string","stripped_doc":"","type":"Method"},"union":{"def":"hs.geometry:union(rect) -> hs.geometry rect","desc":"Returns the smallest rect that encloses both this rect and another rect","doc":"Returns the smallest rect that encloses both this rect and another rect\n\nParameters:\n * rect - an hs.geometry rect, or a table or string or parameter list to construct one\n\nReturns:\n * a new hs.geometry rect","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"555","name":"union","notes":[],"parameters":[" * rect - an hs.geometry rect, or a table or string or parameter list to construct one"],"returns":[" * a new hs.geometry rect"],"signature":"hs.geometry:union(rect) -> hs.geometry rect","stripped_doc":"","type":"Method"},"vector":{"def":"hs.geometry:vector(point) -> point","desc":"Returns the vector2 from this point or rect's center to another point or rect's center","doc":"Returns the vector2 from this point or rect's center to another point or rect's center\n\nParameters:\n * point - an hs.geometry object, or a table or string or parameter list to construct one; if a rect, uses the rect's center\n\nReturns:\n * an hs.geometry point","examples":[],"file":"extensions/geometry/geometry.lua","lineno":"500","name":"vector","notes":[],"parameters":[" * point - an hs.geometry object, or a table or string or parameter list to construct one; if a rect, uses the rect's center"],"returns":[" * an hs.geometry point"],"signature":"hs.geometry:vector(point) -> point","stripped_doc":"","type":"Method"},"w":{"def":"hs.geometry.w","desc":"The width of this rect or size; changing it will keep the rect's x,y corner constant","doc":"The width of this rect or size; changing it will keep the rect's x,y corner constant","file":"extensions/geometry/geometry.lua","lineno":"214","name":"w","signature":"hs.geometry.w","stripped_doc":"","type":"Field"},"wh":{"def":"hs.geometry.wh","desc":"The size component for this hs.geometry object; setting this to a new size will keep the rect's x,y corner constant","doc":"The size component for this hs.geometry object; setting this to a new size will keep the rect's x,y corner constant","file":"extensions/geometry/geometry.lua","lineno":"251","name":"wh","signature":"hs.geometry.wh","stripped_doc":"","type":"Field"},"x":{"def":"hs.geometry.x","desc":"The x coordinate for this point or rect's corner; changing it will move the rect but keep the same width and height","doc":"The x coordinate for this point or rect's corner; changing it will move the rect but keep the same width and height","file":"extensions/geometry/geometry.lua","lineno":"173","name":"x","signature":"hs.geometry.x","stripped_doc":"","type":"Field"},"x1":{"def":"hs.geometry.x1","desc":"Alias for `x`","doc":"Alias for `x`","file":"extensions/geometry/geometry.lua","lineno":"181","name":"x1","signature":"hs.geometry.x1","stripped_doc":"","type":"Field"},"x2":{"def":"hs.geometry.x2","desc":"The x coordinate for the second corner of this rect; changing it will affect the rect's width","doc":"The x coordinate for the second corner of this rect; changing it will affect the rect's width","file":"extensions/geometry/geometry.lua","lineno":"231","name":"x2","signature":"hs.geometry.x2","stripped_doc":"","type":"Field"},"x2y2":{"def":"hs.geometry.x2y2","desc":"The point denoting the other corner of this hs.geometry object; setting this to a new point will change the rect's width and height","doc":"The point denoting the other corner of this hs.geometry object; setting this to a new point will change the rect's width and height","file":"extensions/geometry/geometry.lua","lineno":"263","name":"x2y2","signature":"hs.geometry.x2y2","stripped_doc":"","type":"Field"},"xy":{"def":"hs.geometry.xy","desc":"The point component for this hs.geometry object; setting this to a new point will move the rect but keep the same width and height","doc":"The point component for this hs.geometry object; setting this to a new point will move the rect but keep the same width and height","file":"extensions/geometry/geometry.lua","lineno":"202","name":"xy","signature":"hs.geometry.xy","stripped_doc":"","type":"Field"},"y":{"def":"hs.geometry.y","desc":"The y coordinate for this point or rect's corner; changing it will move the rect but keep the same width and height","doc":"The y coordinate for this point or rect's corner; changing it will move the rect but keep the same width and height","file":"extensions/geometry/geometry.lua","lineno":"177","name":"y","signature":"hs.geometry.y","stripped_doc":"","type":"Field"},"y1":{"def":"hs.geometry.y1","desc":"Alias for `y`","doc":"Alias for `y`","file":"extensions/geometry/geometry.lua","lineno":"185","name":"y1","signature":"hs.geometry.y1","stripped_doc":"","type":"Field"},"y2":{"def":"hs.geometry.y2","desc":"The y coordinate for the second corner of this rect; changing it will affect the rect's height","doc":"The y coordinate for the second corner of this rect; changing it will affect the rect's height","file":"extensions/geometry/geometry.lua","lineno":"235","name":"y2","signature":"hs.geometry.y2","stripped_doc":"","type":"Field"}}
