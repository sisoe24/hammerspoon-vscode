{"decode":{"def":"hs.json.decode(jsonString) -> table","desc":"Decodes JSON into a table","doc":"Decodes JSON into a table\n\nParameters:\n * jsonString - A string containing some JSON data\n\nReturns:\n * A table representing the supplied JSON data\n\nNotes:\n * This is useful for retrieving some of the more complex lua table structures as a persistent setting (see `hs.settings`)","examples":[],"file":"extensions/json/libjson.m","lineno":"139","name":"decode","notes":[" * This is useful for retrieving some of the more complex lua table structures as a persistent setting (see `hs.settings`)"],"parameters":[" * jsonString - A string containing some JSON data"],"returns":[" * A table representing the supplied JSON data"],"signature":"hs.json.decode(jsonString) -> table","stripped_doc":"","type":"Function"},"encode":{"def":"hs.json.encode(val[, prettyprint]) -> string","desc":"Encodes a table as JSON","doc":"Encodes a table as JSON\n\nParameters:\n * val - A table containing data to be encoded as JSON\n * prettyprint - An optional boolean, true to format the JSON for human readability, false to format the JSON for size efficiency. Defaults to false\n\nReturns:\n * A string containing a JSON representation of the supplied table\n\nNotes:\n * This is useful for storing some of the more complex lua table structures as a persistent setting (see `hs.settings`)","examples":[],"file":"extensions/json/libjson.m","lineno":"112","name":"encode","notes":[" * This is useful for storing some of the more complex lua table structures as a persistent setting (see `hs.settings`)"],"parameters":[" * val - A table containing data to be encoded as JSON"," * prettyprint - An optional boolean, true to format the JSON for human readability, false to format the JSON for size efficiency. Defaults to false"],"returns":[" * A string containing a JSON representation of the supplied table"],"signature":"hs.json.encode(val[, prettyprint]) -> string","stripped_doc":"","type":"Function"},"read":{"def":"hs.json.read(path) -> table | nil","desc":"Decodes JSON file into a table.","doc":"Decodes JSON file into a table.\n\nParameters:\n * path - The path and filename of the JSON file to read.\n\nReturns:\n * A table representing the supplied JSON data, or `nil` if an error occurs.","examples":[],"file":"extensions/json/libjson.m","lineno":"197","name":"read","notes":[],"parameters":[" * path - The path and filename of the JSON file to read."],"returns":[" * A table representing the supplied JSON data, or `nil` if an error occurs."],"signature":"hs.json.read(path) -> table | nil","stripped_doc":"","type":"Function"},"write":{"def":"hs.json.write(data, path, [prettyprint], [replace]) -> boolean","desc":"Encodes a table as JSON to a file","doc":"Encodes a table as JSON to a file\n\nParameters:\n * data - A table containing data to be encoded as JSON\n * path - The path and filename of the JSON file to write to\n * prettyprint - An optional boolean, `true` to format the JSON for human readability, `false` to format the JSON for size efficiency. Defaults to `false`\n * replace - An optional boolean, `true` to replace an existing file at the same path if one exists. Defaults to `false`\n\nReturns:\n * `true` if successful otherwise `false` if an error has occurred","examples":[],"file":"extensions/json/libjson.m","lineno":"164","name":"write","notes":[],"parameters":[" * data - A table containing data to be encoded as JSON"," * path - The path and filename of the JSON file to write to"," * prettyprint - An optional boolean, `true` to format the JSON for human readability, `false` to format the JSON for size efficiency. Defaults to `false`"," * replace - An optional boolean, `true` to replace an existing file at the same path if one exists. Defaults to `false`"],"returns":[" * `true` if successful otherwise `false` if an error has occurred"],"signature":"hs.json.write(data, path, [prettyprint], [replace]) -> boolean","stripped_doc":"","type":"Function"}}