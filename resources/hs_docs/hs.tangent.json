{"action":{"def":"hs.tangent.reserved.action -> table","desc":"Definitions for reserved action IDs.","doc":"Definitions for reserved action IDs.\n\nNotes:\n * `alt`                     - toggles the 'ALT' function.\n * `nextKnobBank`            - switches to the next knob bank.\n * `prevKnobBank`            - switches to the previous knob bank.\n * `nextButtonBank`          - switches to the next button bank.\n * `prevBasketBank`          - switches to the previous button bank.\n * `nextTrackerballBank`     - switches to the next trackerball bank.\n * `prevTrackerballBank`     - switches to the previous trackerball bank.\n * `nextMode`                - switches to the next mode.\n * `prevMode`                - switches to the previous mode.\n * `goToMode`                - switches to the specified mode, requiring a Argument with the mode ID.\n * `toggleJogShuttle`        - toggles jog/shuttle mode.\n * `toggleMouseEmulation`    - toggles mouse emulation.\n * `fakeKeypress`            - generates a keypress, requiring an Argument with the key code.\n * `showHUD`                 - shows the HUD on screen.\n * `goToKnobBank`            - goes to the specific knob bank, requiring an Argument with the bank number.\n * `goToButtonBank`          - goes to the specific button bank, requiring an Argument with the bank number.\n * `goToTrackerballBank`     - goes to the specific trackerball bank, requiring an Argument with the bank number.","file":"extensions/tangent/tangent.lua","lineno":"109","name":"action","notes":[" * `alt`                     - toggles the 'ALT' function."," * `nextKnobBank`            - switches to the next knob bank."," * `prevKnobBank`            - switches to the previous knob bank."," * `nextButtonBank`          - switches to the next button bank."," * `prevBasketBank`          - switches to the previous button bank."," * `nextTrackerballBank`     - switches to the next trackerball bank."," * `prevTrackerballBank`     - switches to the previous trackerball bank."," * `nextMode`                - switches to the next mode."," * `prevMode`                - switches to the previous mode."," * `goToMode`                - switches to the specified mode, requiring a Argument with the mode ID."," * `toggleJogShuttle`        - toggles jog/shuttle mode."," * `toggleMouseEmulation`    - toggles mouse emulation."," * `fakeKeypress`            - generates a keypress, requiring an Argument with the key code."," * `showHUD`                 - shows the HUD on screen."," * `goToKnobBank`            - goes to the specific knob bank, requiring an Argument with the bank number."," * `goToButtonBank`          - goes to the specific button bank, requiring an Argument with the bank number."," * `goToTrackerballBank`     - goes to the specific trackerball bank, requiring an Argument with the bank number."],"signature":"hs.tangent.reserved.action -> table","stripped_doc":"","type":"Constant"},"automaticallySendApplicationDefinition":{"def":"hs.tangent.automaticallySendApplicationDefinition -> boolean","desc":"Automatically send the \"Application Definition\" response. Defaults to `true`.","doc":"Automatically send the \"Application Definition\" response. Defaults to `true`.","file":"extensions/tangent/tangent.lua","lineno":"1008","name":"automaticallySendApplicationDefinition","signature":"hs.tangent.automaticallySendApplicationDefinition -> boolean","stripped_doc":"","type":"Variable"},"callback":{"def":"hs.tangent.callback() -> boolean","desc":"Sets a callback when new messages are received.","doc":"Sets a callback when new messages are received.\n\nParameters:\n * callbackFn - a function to set as the callback for `hs.tangent`. If the value provided is `nil`, any currently existing callback function is removed.\n\nReturns:\n * `true` if successful otherwise `false`\n\nNotes:\n * Full documentation for the Tangent API can be downloaded [here](http://www.tangentwave.co.uk/download/developer-support-pack/).\n * The callback function should expect 1 argument and should not return anything.\n * The 1 argument will be a table, which can contain one or many commands. Each command is it's own table with the following contents:\n   * id - the message ID of the incoming message\n   * metadata - A table of data for the Tangent command (see below).\n * The metadata table will return the following, depending on the `id` for the callback:\n   * `connected` - Connection to Tangent Hub successfully established.\n   * `disconnected` - The connection to Tangent Hub was dropped.\n   * `initiateComms` - Initiates communication between the Hub and the application.\n     * `protocolRev` - The revision number of the protocol.\n     * `numPanels` - The number of panels connected.\n     * `panels`\n       * `panelID` - The ID of the panel.\n       * `panelType` - The type of panel connected.\n     * `data` - The raw data from the Tangent Hub\n   * `parameterChange` - Requests that the application increment a parameter.\n     * `paramID` - The ID value of the parameter.\n     * `increment` - The incremental value which should be applied to the parameter.\n   * `parameterReset` - Requests that the application changes a parameter to its reset value.\n     * `paramID` - The ID value of the parameter.\n   * `parameterValueRequest` - Requests that the application sends a `ParameterValue (0x82)` command to the Hub.\n     * `paramID` - The ID value of the parameter.\n   * `menuChange` - Requests the application change a menu index by +1 or -1.\n     * `menuID` - The ID value of the menu.\n     * `increment` - The incremental amount by which the menu index should be changed which will always be an integer value of +1 or -1.\n   * `menuReset` - Requests that the application changes a menu to its reset value.\n     * `menuID` - The ID value of the menu.\n   * `menuStringRequest` - Requests that the application sends a `MenuString (0x83)` command to the Hub.\n     * `menuID` - The ID value of the menu.\n   * `actionOn` - Requests that the application performs the specified action.\n     * `actionID` - The ID value of the action.\n   * `modeChange` - Requests that the application changes to the specified mode.\n     * `modeID` - The ID value of the mode.\n   * `transport` - Requests the application to move the currently active transport.\n     * `jogValue` - The number of jog steps to move the transport.\n     * `shuttleValue` - An incremental value to add to the shuttle speed.\n   * `actionOff` - Requests that the application cancels the specified action.\n     * `actionID` - The ID value of the action.\n   * `unmanagedPanelCapabilities` - Only used when working in Unmanaged panel mode. Sent in response to a `UnmanagedPanelCapabilitiesRequest (0xA0)` command.\n     * `panelID` - The ID of the panel as reported in the `InitiateComms` command.\n     * `numButtons` - The number of buttons on the panel.\n     * `numEncoders` - The number of encoders on the panel.\n     * `numDisplays` - The number of displays on the panel.\n     * `numDisplayLines` - The number of lines for each display on the panel.\n     * `numDisplayChars` - The number of characters on each line of each display on the panel.\n   * `unmanagedButtonDown` - Only used when working in Unmanaged panel mode. Issued when a button has been pressed.\n     * `panelID` - The ID of the panel as reported in the `InitiateComms` command.\n     * `buttonID` - The hardware ID of the button\n   * `unmanagedButtonUp` - Only used when working in Unmanaged panel mode. Issued when a button has been released.\n     * `panelID` - The ID of the panel as reported in the `InitiateComms` command.\n     * `buttonID` - The hardware ID of the button.\n   * `unmanagedEncoderChange` - Only used when working in Unmanaged panel mode. Issued when an encoder has been moved.\n     * `panelID` - The ID of the panel as reported in the `InitiateComms` command.\n     * `paramID` - The hardware ID of the encoder.\n     * `increment` - The incremental value.\n   * `unmanagedDisplayRefresh` - Only used when working in Unmanaged panel mode. Issued when a panel has been connected or the focus of the panel has been returned to your application.\n     * `panelID` - The ID of the panel as reported in the `InitiateComms` command.\n   * `panelConnectionState`\n     * `panelID` - The ID of the panel as reported in the `InitiateComms` command.\n     * `state` - The connected state of the panel, `true` if connected, `false` if disconnected.","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1044","name":"callback","notes":[" * Full documentation for the Tangent API can be downloaded [here](http://www.tangentwave.co.uk/download/developer-support-pack/)."," * The callback function should expect 1 argument and should not return anything."," * The 1 argument will be a table, which can contain one or many commands. Each command is it's own table with the following contents:","   * id - the message ID of the incoming message","   * metadata - A table of data for the Tangent command (see below)."," * The metadata table will return the following, depending on the `id` for the callback:","   * `connected` - Connection to Tangent Hub successfully established.","   * `disconnected` - The connection to Tangent Hub was dropped.","   * `initiateComms` - Initiates communication between the Hub and the application.","     * `protocolRev` - The revision number of the protocol.","     * `numPanels` - The number of panels connected.","     * `panels`","       * `panelID` - The ID of the panel.","       * `panelType` - The type of panel connected.","     * `data` - The raw data from the Tangent Hub","   * `parameterChange` - Requests that the application increment a parameter.","     * `paramID` - The ID value of the parameter.","     * `increment` - The incremental value which should be applied to the parameter.","   * `parameterReset` - Requests that the application changes a parameter to its reset value.","     * `paramID` - The ID value of the parameter.","   * `parameterValueRequest` - Requests that the application sends a `ParameterValue (0x82)` command to the Hub.","     * `paramID` - The ID value of the parameter.","   * `menuChange` - Requests the application change a menu index by +1 or -1.","     * `menuID` - The ID value of the menu.","     * `increment` - The incremental amount by which the menu index should be changed which will always be an integer value of +1 or -1.","   * `menuReset` - Requests that the application changes a menu to its reset value.","     * `menuID` - The ID value of the menu.","   * `menuStringRequest` - Requests that the application sends a `MenuString (0x83)` command to the Hub.","     * `menuID` - The ID value of the menu.","   * `actionOn` - Requests that the application performs the specified action.","     * `actionID` - The ID value of the action.","   * `modeChange` - Requests that the application changes to the specified mode.","     * `modeID` - The ID value of the mode.","   * `transport` - Requests the application to move the currently active transport.","     * `jogValue` - The number of jog steps to move the transport.","     * `shuttleValue` - An incremental value to add to the shuttle speed.","   * `actionOff` - Requests that the application cancels the specified action.","     * `actionID` - The ID value of the action.","   * `unmanagedPanelCapabilities` - Only used when working in Unmanaged panel mode. Sent in response to a `UnmanagedPanelCapabilitiesRequest (0xA0)` command.","     * `panelID` - The ID of the panel as reported in the `InitiateComms` command.","     * `numButtons` - The number of buttons on the panel.","     * `numEncoders` - The number of encoders on the panel.","     * `numDisplays` - The number of displays on the panel.","     * `numDisplayLines` - The number of lines for each display on the panel.","     * `numDisplayChars` - The number of characters on each line of each display on the panel.","   * `unmanagedButtonDown` - Only used when working in Unmanaged panel mode. Issued when a button has been pressed.","     * `panelID` - The ID of the panel as reported in the `InitiateComms` command.","     * `buttonID` - The hardware ID of the button","   * `unmanagedButtonUp` - Only used when working in Unmanaged panel mode. Issued when a button has been released.","     * `panelID` - The ID of the panel as reported in the `InitiateComms` command.","     * `buttonID` - The hardware ID of the button.","   * `unmanagedEncoderChange` - Only used when working in Unmanaged panel mode. Issued when an encoder has been moved.","     * `panelID` - The ID of the panel as reported in the `InitiateComms` command.","     * `paramID` - The hardware ID of the encoder.","     * `increment` - The incremental value.","   * `unmanagedDisplayRefresh` - Only used when working in Unmanaged panel mode. Issued when a panel has been connected or the focus of the panel has been returned to your application.","     * `panelID` - The ID of the panel as reported in the `InitiateComms` command.","   * `panelConnectionState`","     * `panelID` - The ID of the panel as reported in the `InitiateComms` command.","     * `state` - The connected state of the panel, `true` if connected, `false` if disconnected."],"parameters":[" * callbackFn - a function to set as the callback for `hs.tangent`. If the value provided is `nil`, any currently existing callback function is removed."],"returns":[" * `true` if successful otherwise `false`"],"signature":"hs.tangent.callback() -> boolean","stripped_doc":"","type":"Function"},"connect":{"def":"hs.tangent.connect(applicationName, systemPath[, userPath]) -> boolean, errorMessage","desc":"Connects to the Tangent Hub.","doc":"Connects to the Tangent Hub.\n\nParameters:\n * applicationName - Your application name as a string\n * systemPath - A string containing the absolute path of the directory that contains the Controls and Default Map XML files.\n * [userPath] - An optional string containing the absolute path of the directory that contains the User’s Default Map XML files.\n\nReturns:\n * success - `true` on success, otherwise `nil`\n * errorMessage - The error messages as a string or `nil` if `success` is `true`.","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1726","name":"connect","notes":[],"parameters":[" * applicationName - Your application name as a string"," * systemPath - A string containing the absolute path of the directory that contains the Controls and Default Map XML files."," * [userPath] - An optional string containing the absolute path of the directory that contains the User’s Default Map XML files."],"returns":[" * success - `true` on success, otherwise `nil`"," * errorMessage - The error messages as a string or `nil` if `success` is `true`."],"signature":"hs.tangent.connect(applicationName, systemPath[, userPath]) -> boolean, errorMessage","stripped_doc":"","type":"Function"},"connected":{"def":"hs.tangent.connected() -> boolean","desc":"Checks to see whether or not you're successfully connected to the Tangent Hub.","doc":"Checks to see whether or not you're successfully connected to the Tangent Hub.\n\nParameters:\n * None\n\nReturns:\n * `true` if connected, otherwise `false`","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1128","name":"connected","notes":[],"parameters":[" * None"],"returns":[" * `true` if connected, otherwise `false`"],"signature":"hs.tangent.connected() -> boolean","stripped_doc":"","type":"Function"},"disconnect":{"def":"hs.tangent.disconnect() -> none","desc":"Disconnects from the Tangent Hub.","doc":"Disconnects from the Tangent Hub.\n\nParameters:\n * None\n\nReturns:\n * None","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1657","name":"disconnect","notes":[],"parameters":[" * None"],"returns":[" * None"],"signature":"hs.tangent.disconnect() -> none","stripped_doc":"","type":"Function"},"fromHub":{"def":"hs.tangent.fromHub -> table","desc":"Definitions for IPC Commands from the HUB to Hammerspoon.","doc":"Definitions for IPC Commands from the HUB to Hammerspoon.\n\nNotes:\n * `connected`                       - a connection is established with the Hub.\n * `disconnected`                    - the connection is dropped with the Hub.\n * `initiateComms`                   - sent when the Hub wants to initiate communications.\n * `parameterChange`                 - a parameter was incremented.\n * `parameterReset`                  - a parameter was reset.\n * `parameterValueRequest`           - the Hub wants the current value of the parameter.\n * `menuChange`                      - The menu was changed, `+1` or `-1`.\n * `menuReset`                       - The menu was reset.\n * `menuStringRequest`               - The application should send a `menuString` with the current value.\n * `actionOn`                        - An action button was pressed.\n * `actionOff`                       - An action button was released.\n * `modeChange`                      - The current mode was changed.\n * `transport`                       - The transport.\n * `unmanagedPanelCapabilities`      - Send by the Hub to advertise an unmanaged panel.\n * `unmanagedButtonDown`             - A button on an unmanaged panel was pressed.\n * `unmanagedButtonUp`               - A button on an unmanaged panel was released.\n * `unmanagedEncoderChange`          - An encoder (dial/wheel) on an unmanaged panel changed.\n * `unmanagedDisplayRefresh`         - Triggered when an unmanaged panel's display needs to update.\n * `panelConnectionState`            - A panel's connection state changed.","file":"extensions/tangent/tangent.lua","lineno":"37","name":"fromHub","notes":[" * `connected`                       - a connection is established with the Hub."," * `disconnected`                    - the connection is dropped with the Hub."," * `initiateComms`                   - sent when the Hub wants to initiate communications."," * `parameterChange`                 - a parameter was incremented."," * `parameterReset`                  - a parameter was reset."," * `parameterValueRequest`           - the Hub wants the current value of the parameter."," * `menuChange`                      - The menu was changed, `+1` or `-1`."," * `menuReset`                       - The menu was reset."," * `menuStringRequest`               - The application should send a `menuString` with the current value."," * `actionOn`                        - An action button was pressed."," * `actionOff`                       - An action button was released."," * `modeChange`                      - The current mode was changed."," * `transport`                       - The transport."," * `unmanagedPanelCapabilities`      - Send by the Hub to advertise an unmanaged panel."," * `unmanagedButtonDown`             - A button on an unmanaged panel was pressed."," * `unmanagedButtonUp`               - A button on an unmanaged panel was released."," * `unmanagedEncoderChange`          - An encoder (dial/wheel) on an unmanaged panel changed."," * `unmanagedDisplayRefresh`         - Triggered when an unmanaged panel's display needs to update."," * `panelConnectionState`            - A panel's connection state changed."],"signature":"hs.tangent.fromHub -> table","stripped_doc":"","type":"Constant"},"ipAddress":{"def":"hs.tangent.ipAddress -> number","desc":"IP Address that the Tangent Hub is located at. Defaults to 127.0.0.1.","doc":"IP Address that the Tangent Hub is located at. Defaults to 127.0.0.1.","file":"extensions/tangent/tangent.lua","lineno":"998","name":"ipAddress","signature":"hs.tangent.ipAddress -> number","stripped_doc":"","type":"Variable"},"isTangentHubInstalled":{"def":"hs.tangent.isTangentHubInstalled() -> boolean","desc":"Checks to see whether or not the Tangent Hub software is installed.","doc":"Checks to see whether or not the Tangent Hub software is installed.\n\nParameters:\n * None\n\nReturns:\n * `true` if Tangent Hub is installed otherwise `false`.","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1027","name":"isTangentHubInstalled","notes":[],"parameters":[" * None"],"returns":[" * `true` if Tangent Hub is installed otherwise `false`."],"signature":"hs.tangent.isTangentHubInstalled() -> boolean","stripped_doc":"","type":"Function"},"panelType":{"def":"hs.tangent.panelType -> table","desc":"Tangent Panel Types.","doc":"Tangent Panel Types.","file":"extensions/tangent/tangent.lua","lineno":"169","name":"panelType","signature":"hs.tangent.panelType -> table","stripped_doc":"","type":"Constant"},"parameter":{"def":"hs.tangent.reserved.parameter -> table","desc":"A table of reserved parameter IDs.","doc":"A table of reserved parameter IDs.\n\nNotes:\n * `transportRing`           - transport ring.\n * `fakeKeypress`            - sends a fake keypress.","file":"extensions/tangent/tangent.lua","lineno":"152","name":"parameter","notes":[" * `transportRing`           - transport ring."," * `fakeKeypress`            - sends a fake keypress."],"signature":"hs.tangent.reserved.parameter -> table","stripped_doc":"","type":"Constant"},"port":{"def":"hs.tangent.port -> number","desc":"The port that Tangent Hub monitors. Defaults to 64246.","doc":"The port that Tangent Hub monitors. Defaults to 64246.","file":"extensions/tangent/tangent.lua","lineno":"1003","name":"port","signature":"hs.tangent.port -> number","stripped_doc":"","type":"Variable"},"send":{"def":"hs.tangent.send(byteString) -> boolean, string","desc":"Sends a \"bytestring\" message to the Tangent Hub.","doc":"Sends a \"bytestring\" message to the Tangent Hub.\n\nParameters:\n * byteString   - The string of bytes to send to tangent.\n\nReturns:\n * success - `true` if connected, otherwise `false`\n * errorMessage - An error message if an error occurs, as a string\n\nNotes:\n * This should be a full encoded string for the command you want to send, withouth the leading 'size' section, which the function will calculate automatically.\n * In general, you should use the more specific functions that package the command for you, such as `sendParameterValue(...)`. This function can be used to send a message that this API doesn't yet support.\n * Full documentation for the Tangent API can be downloaded [here](http://www.tangentwave.co.uk/download/developer-support-pack/).","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1141","name":"send","notes":[" * This should be a full encoded string for the command you want to send, withouth the leading 'size' section, which the function will calculate automatically."," * In general, you should use the more specific functions that package the command for you, such as `sendParameterValue(...)`. This function can be used to send a message that this API doesn't yet support."," * Full documentation for the Tangent API can be downloaded [here](http://www.tangentwave.co.uk/download/developer-support-pack/)."],"parameters":[" * byteString   - The string of bytes to send to tangent."],"returns":[" * success - `true` if connected, otherwise `false`"," * errorMessage - An error message if an error occurs, as a string"],"signature":"hs.tangent.send(byteString) -> boolean, string","stripped_doc":"","type":"Function"},"sendAllChange":{"def":"hs.tangent.sendAllChange() -> boolean, string","desc":"Tells the Hub that a large number of software-controls have changed.","doc":"Tells the Hub that a large number of software-controls have changed.\n\nParameters:\n * None\n\nReturns:\n * `true` if successful, or `false` and an error message if not.\n\nNotes:\n * The Hub responds by requesting all the current values of software-controls it is currently controlling.","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1295","name":"sendAllChange","notes":[" * The Hub responds by requesting all the current values of software-controls it is currently controlling."],"parameters":[" * None"],"returns":[" * `true` if successful, or `false` and an error message if not."],"signature":"hs.tangent.sendAllChange() -> boolean, string","stripped_doc":"","type":"Function"},"sendApplicationDefinition":{"def":"hs.tangent.sendApplicationDefinition([appName, systemPath, userPath]) -> boolean, string","desc":"Sends the application details to the Tangent Hub.","doc":"Sends the application details to the Tangent Hub.\n\nParameters:\n * appName       - The human-readable name of the application.\n * systemPath    - A string containing the absolute path of the directory that contains the Controls and Default Map XML files (Path String)\n * userPath      - A string containing the absolute path of the directory that contains the User’s Default Map XML files (Path String)\n\nReturns:\n * `true` if successful, `false` and an error message if there was a problem.\n\nNotes:\n * If no details are provided the ones stored in the module are used.","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1168","name":"sendApplicationDefinition","notes":[" * If no details are provided the ones stored in the module are used."],"parameters":[" * appName       - The human-readable name of the application."," * systemPath    - A string containing the absolute path of the directory that contains the Controls and Default Map XML files (Path String)"," * userPath      - A string containing the absolute path of the directory that contains the User’s Default Map XML files (Path String)"],"returns":[" * `true` if successful, `false` and an error message if there was a problem."],"signature":"hs.tangent.sendApplicationDefinition([appName, systemPath, userPath]) -> boolean, string","stripped_doc":"","type":"Function"},"sendDisplayText":{"def":"hs.tangent.sendDisplayText(messages[, doubleHeight]) -> boolean, string","desc":"Updates the Hub with a number of character strings that will be displayed on connected panels if there is space.","doc":"Updates the Hub with a number of character strings that will be displayed on connected panels if there is space.\n\nParameters:\n * messages      - A list of messages to send.\n * doubleHeight  - An optional list of `boolean`s indicating if the corresponding message is double-height.\n\nReturns:\n * `true` if successful, or `false` and an error message if not.\n\nNotes:\n * Strings may either be 32 character, single height or 16 character double-height. They will be displayed in the order received; the first string displayed at the top of the display.\n * If a string is not defined as double-height then it will occupy the next line.\n * If a string is defined as double-height then it will occupy the next 2 lines.\n * The maximum number of lines which will be used by the application must be indicated in the Controls XML file.\n * Text which exceeds 32 (single-height) or 16 (double-height) characters will be truncated.\n * If all text is single-height, the `doubleHeight` table can be omitted.\n\nExamples:\n\n```lua\nhs.tangent.sendDisplayText(\n    { \"Single Height\", \"Double Height\" }, {false, true}\n)```","examples":["","```lua","hs.tangent.sendDisplayText(","    { \"Single Height\", \"Double Height\" }, {false, true}",")```"],"file":"extensions/tangent/tangent.lua","lineno":"1342","name":"sendDisplayText","notes":[" * Strings may either be 32 character, single height or 16 character double-height. They will be displayed in the order received; the first string displayed at the top of the display."," * If a string is not defined as double-height then it will occupy the next line."," * If a string is defined as double-height then it will occupy the next 2 lines."," * The maximum number of lines which will be used by the application must be indicated in the Controls XML file."," * Text which exceeds 32 (single-height) or 16 (double-height) characters will be truncated."," * If all text is single-height, the `doubleHeight` table can be omitted."],"parameters":[" * messages      - A list of messages to send."," * doubleHeight  - An optional list of `boolean`s indicating if the corresponding message is double-height."],"returns":[" * `true` if successful, or `false` and an error message if not."],"signature":"hs.tangent.sendDisplayText(messages[, doubleHeight]) -> boolean, string","stripped_doc":"```lua\nhs.tangent.sendDisplayText(\n    { \"Single Height\", \"Double Height\" }, {false, true}\n)```","type":"Function"},"sendHighlightControl":{"def":"hs.tangent.sendHighlightControl(targetID, active) -> boolean, string","desc":"Highlights the control on any panel where this feature is available.","doc":"Highlights the control on any panel where this feature is available.\n\nParameters:\n * targetID      - The id of any application defined Parameter, Menu, Action or Mode (Unsigned Int)\n * active        - If `true`, the control is highlighted, otherwise it is not.\n\nReturns:\n * `true` if sent successfully, `false` and an error message if no.\n\nNotes:\n * When applied to Modes, buttons which are mapped to the reserved \"Go To Mode\" action for this particular mode will highlight.","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1544","name":"sendHighlightControl","notes":[" * When applied to Modes, buttons which are mapped to the reserved \"Go To Mode\" action for this particular mode will highlight."],"parameters":[" * targetID      - The id of any application defined Parameter, Menu, Action or Mode (Unsigned Int)"," * active        - If `true`, the control is highlighted, otherwise it is not."],"returns":[" * `true` if sent successfully, `false` and an error message if no."],"signature":"hs.tangent.sendHighlightControl(targetID, active) -> boolean, string","stripped_doc":"","type":"Function"},"sendIndicateControl":{"def":"hs.tangent.sendIndicateControl(targetID, indicated) -> boolean, string","desc":"Sets the Indicator of the control on any panel where this feature is available.","doc":"Sets the Indicator of the control on any panel where this feature is available.\n\nParameters:\n * targetID      - The id of any application defined Parameter, Menu, Action or Mode\n * active        - If `true`, the control is indicated, otherwise it is not.\n\nReturns:\n * `true` if sent successfully, `false` and an error message if no.\n\nNotes:\n * This indicator is driven by the `atDefault` argument for Parameters and Menus. This command therefore only applies to controls mapped to Actions and Modes.\n * When applied to Modes, buttons which are mapped to the reserved \"Go To Mode\" action for this particular mode will have their indicator set.","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1574","name":"sendIndicateControl","notes":[" * This indicator is driven by the `atDefault` argument for Parameters and Menus. This command therefore only applies to controls mapped to Actions and Modes."," * When applied to Modes, buttons which are mapped to the reserved \"Go To Mode\" action for this particular mode will have their indicator set."],"parameters":[" * targetID      - The id of any application defined Parameter, Menu, Action or Mode"," * active        - If `true`, the control is indicated, otherwise it is not."],"returns":[" * `true` if sent successfully, `false` and an error message if no."],"signature":"hs.tangent.sendIndicateControl(targetID, indicated) -> boolean, string","stripped_doc":"","type":"Function"},"sendMenuString":{"def":"hs.tangent.sendMenuString(menuID, value[, atDefault]) -> boolean, string","desc":"Updates the Hub with a menu value.","doc":"Updates the Hub with a menu value.\n\nParameters:\n * menuID - The ID value of the menu (Unsigned Int)\n * value - The current ‘value’ of the parameter represented as a string\n * atDefault - if `true` the value represents the default. Otherwise `false`.\n\nReturns:\n * `true` if successful, or `false` and an error message if not.\n\nNotes:\n * The Hub then updates the displays of any panels which are currently showing the menu.\n * If a value of `nil` is sent then the Hub will not attempt to display a value for the menu. However the `atDefault` flag will still be recognised.","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1256","name":"sendMenuString","notes":[" * The Hub then updates the displays of any panels which are currently showing the menu."," * If a value of `nil` is sent then the Hub will not attempt to display a value for the menu. However the `atDefault` flag will still be recognised."],"parameters":[" * menuID - The ID value of the menu (Unsigned Int)"," * value - The current ‘value’ of the parameter represented as a string"," * atDefault - if `true` the value represents the default. Otherwise `false`."],"returns":[" * `true` if successful, or `false` and an error message if not."],"signature":"hs.tangent.sendMenuString(menuID, value[, atDefault]) -> boolean, string","stripped_doc":"","type":"Function"},"sendModeValue":{"def":"hs.tangent.sendModeValue(modeID) -> boolean, string","desc":"Updates the Hub with a mode value.","doc":"Updates the Hub with a mode value.\n\nParameters:\n * modeID - The ID value of the mode (Unsigned Int)\n\nReturns:\n * `true` if successful, or `false` and an error message if not.\n\nNotes:\n * The Hub then changes mode and requests all the current values of software-controls it is controlling.","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1315","name":"sendModeValue","notes":[" * The Hub then changes mode and requests all the current values of software-controls it is controlling."],"parameters":[" * modeID - The ID value of the mode (Unsigned Int)"],"returns":[" * `true` if successful, or `false` and an error message if not."],"signature":"hs.tangent.sendModeValue(modeID) -> boolean, string","stripped_doc":"","type":"Function"},"sendPanelConnectionStatesRequest":{"def":"hs.tangent.sendPanelConnectionStatesRequest())","desc":"Requests the Hub to respond with a sequence of PanelConnectionState (0x35) commands to report the connected/disconnected status of each configured panel","doc":"Requests the Hub to respond with a sequence of PanelConnectionState (0x35) commands to report the connected/disconnected status of each configured panel\n\nParameters:\n * None\n\nReturns:\n * `true` if sent successfully, `false` and an error message if not.\n\nNotes:\n * A single request may result in multiple state responses.","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1607","name":"sendPanelConnectionStatesRequest","notes":[" * A single request may result in multiple state responses."],"parameters":[" * None"],"returns":[" * `true` if sent successfully, `false` and an error message if not."],"signature":"hs.tangent.sendPanelConnectionStatesRequest())","stripped_doc":"","type":"Function"},"sendParameterValue":{"def":"hs.tangent.sendParameterValue(paramID, value[, atDefault]) -> boolean, string","desc":"Updates the Hub with a parameter value.","doc":"Updates the Hub with a parameter value.\n\nParameters:\n * paramID - The ID value of the parameter (Unsigned Int)\n * value - The current value of the parameter (Float)\n * atDefault - if `true` the value represents the default. Defaults to `false`.\n\nReturns:\n * `true` if successful, or `false` and an error message if not.\n\nNotes:\n * The Hub then updates the displays of any panels which are currently showing the parameter value.","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1218","name":"sendParameterValue","notes":[" * The Hub then updates the displays of any panels which are currently showing the parameter value."],"parameters":[" * paramID - The ID value of the parameter (Unsigned Int)"," * value - The current value of the parameter (Float)"," * atDefault - if `true` the value represents the default. Defaults to `false`."],"returns":[" * `true` if successful, or `false` and an error message if not."],"signature":"hs.tangent.sendParameterValue(paramID, value[, atDefault]) -> boolean, string","stripped_doc":"","type":"Function"},"sendRenameControl":{"def":"hs.tangent.sendRenameControl(targetID, newName) -> boolean, string","desc":"Renames a control dynamically.","doc":"Renames a control dynamically.\n\nParameters:\n * targetID  - The id of any application defined Parameter, Menu, Action or Mode (Unsigned Int)\n * newName   - The new name to apply.\n\nReturns:\n * `true` if successful, `false` and an error message if not.\n\nNotes:\n * The string supplied will replace the normal text which has been derived from the Controls XML file.\n * To remove any existing replacement name set `newName` to `\"\"`, this will remove any renaming and return the system to the normal display text\n * When applied to Modes, the string displayed on buttons which mapped to the reserved \"Go To Mode\" action for this particular mode will also change.","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1507","name":"sendRenameControl","notes":[" * The string supplied will replace the normal text which has been derived from the Controls XML file."," * To remove any existing replacement name set `newName` to `\"\"`, this will remove any renaming and return the system to the normal display text"," * When applied to Modes, the string displayed on buttons which mapped to the reserved \"Go To Mode\" action for this particular mode will also change."],"parameters":[" * targetID  - The id of any application defined Parameter, Menu, Action or Mode (Unsigned Int)"," * newName   - The new name to apply."],"returns":[" * `true` if successful, `false` and an error message if not."],"signature":"hs.tangent.sendRenameControl(targetID, newName) -> boolean, string","stripped_doc":"","type":"Function"},"sendUnmanagedDisplayWrite":{"def":"hs.tangent.sendUnmanagedDisplayWrite(panelID, displayID, lineNum, pos, message) -> boolean, string","desc":"Updates the Hub with text that will be displayed on a specific panel at the given line and starting position where supported by the panel capabilities.","doc":"Updates the Hub with text that will be displayed on a specific panel at the given line and starting position where supported by the panel capabilities.\n\nParameters:\n * panelID       - The ID of the panel as reported in the InitiateComms command (Unsigned Int)\n * displayID     - The ID of the display to be written to (Unsigned Int)\n * lineNum       - The line number of the display to be written to with `1` as the top line (Unsigned Int)\n * pos           - The position on the line to start writing from with `1` as the first column (Unsigned Int)\n * message       - A line of text (Character String)\n\nReturns:\n * `true` if successful, or `false` and an error message if not.\n\nNotes:\n * Only used when working in Unmanaged panel mode.\n * If the most significant bit of any individual text character in `message` is set it will be displayed as inversed with dark text on a light background.","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1452","name":"sendUnmanagedDisplayWrite","notes":[" * Only used when working in Unmanaged panel mode."," * If the most significant bit of any individual text character in `message` is set it will be displayed as inversed with dark text on a light background."],"parameters":[" * panelID       - The ID of the panel as reported in the InitiateComms command (Unsigned Int)"," * displayID     - The ID of the display to be written to (Unsigned Int)"," * lineNum       - The line number of the display to be written to with `1` as the top line (Unsigned Int)"," * pos           - The position on the line to start writing from with `1` as the first column (Unsigned Int)"," * message       - A line of text (Character String)"],"returns":[" * `true` if successful, or `false` and an error message if not."],"signature":"hs.tangent.sendUnmanagedDisplayWrite(panelID, displayID, lineNum, pos, message) -> boolean, string","stripped_doc":"","type":"Function"},"sendUnmanagedPanelCapabilitiesRequest":{"def":"hs.tangent.sendUnmanagedPanelCapabilitiesRequest(panelID) -> boolean, string","desc":"Requests the Hub to respond with an UnmanagedPanelCapabilities (0x30) command.","doc":"Requests the Hub to respond with an UnmanagedPanelCapabilities (0x30) command.\n\nParameters:\n * panelID - The ID of the panel as reported in the InitiateComms command (Unsigned Int)\n\nReturns:\n * `true` if successful, or `false` and an error message if not.\n\nNotes:\n * Only used when working in Unmanaged panel mode","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1425","name":"sendUnmanagedPanelCapabilitiesRequest","notes":[" * Only used when working in Unmanaged panel mode"],"parameters":[" * panelID - The ID of the panel as reported in the InitiateComms command (Unsigned Int)"],"returns":[" * `true` if successful, or `false` and an error message if not."],"signature":"hs.tangent.sendUnmanagedPanelCapabilitiesRequest(panelID) -> boolean, string","stripped_doc":"","type":"Function"},"setLogLevel":{"def":"hs.tangent.setLogLevel(loglevel) -> none","desc":"Sets the Log Level.","doc":"Sets the Log Level.\n\nParameters:\n * loglevel - can be 'nothing', 'error', 'warning', 'info', 'debug', or 'verbose'; or a corresponding number between 0 and 5\n\nReturns:\n * None","examples":[],"file":"extensions/tangent/tangent.lua","lineno":"1013","name":"setLogLevel","notes":[],"parameters":[" * loglevel - can be 'nothing', 'error', 'warning', 'info', 'debug', or 'verbose'; or a corresponding number between 0 and 5"],"returns":[" * None"],"signature":"hs.tangent.setLogLevel(loglevel) -> none","stripped_doc":"","type":"Function"},"toHub":{"def":"hs.tangent.toHub -> table","desc":"Definitions for IPC Commands from Hammerspoon to the HUB.","doc":"Definitions for IPC Commands from Hammerspoon to the HUB.","file":"extensions/tangent/tangent.lua","lineno":"90","name":"toHub","signature":"hs.tangent.toHub -> table","stripped_doc":"","type":"Constant"}}