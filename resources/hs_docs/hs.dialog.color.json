{"alpha":{"def":"hs.dialog.color.alpha([value]) -> number","desc":"Set or display the selected opacity.","doc":"Set or display the selected opacity.\n\nParameters:\n * [value] - A opacity value as a number between 0 and 1, where 0 is 100% transparent/see-through.\n\nReturns:\n * The current alpha value as a number.\n\nNotes:\n * Example:\n     `hs.dialog.color.alpha(0.5)`","examples":[],"file":"extensions/dialog/libdialog.m","lineno":"257","name":"alpha","notes":[" * Example:","     `hs.dialog.color.alpha(0.5)`"],"parameters":[" * [value] - A opacity value as a number between 0 and 1, where 0 is 100% transparent/see-through."],"returns":[" * The current alpha value as a number."],"signature":"hs.dialog.color.alpha([value]) -> number","stripped_doc":"","type":"Function"},"callback":{"def":"hs.dialog.color.callback([callbackFn]) -> function or nil","desc":"Sets or removes the callback function for the color panel.","doc":"Sets or removes the callback function for the color panel.\n\nParameters:\n * a function, or `nil` to remove the current function, which will be invoked as a callback for messages generated by this color panel. The callback function should expect 2 arguments as follows:\n   ** A table containing the color values from the color panel.\n   ** A boolean which returns `true` if the color panel has been closed otherwise `false` indicating that the color panel is still open (i.e. it may change color again).\n\nReturns:\n * The last callbackFn or `nil` so you can save it and re-attach it if something needs to temporarily take the callbacks.\n\nNotes:\n * Example:\n     `hs.dialog.color.callback(function(a,b) print(\"COLOR CALLBACK:\\nSelected Color: \" .. hs.inspect(a) .. \"\\nPanel Closed: \" .. hs.inspect(b)) end)`","examples":[],"file":"extensions/dialog/libdialog.m","lineno":"79","name":"callback","notes":[" * Example:","     `hs.dialog.color.callback(function(a,b) print(\"COLOR CALLBACK:\\nSelected Color: \" .. hs.inspect(a) .. \"\\nPanel Closed: \" .. hs.inspect(b)) end)`"],"parameters":[" * a function, or `nil` to remove the current function, which will be invoked as a callback for messages generated by this color panel. The callback function should expect 2 arguments as follows: ** A table containing the color values from the color panel. ** A boolean which returns `true` if the color panel has been closed otherwise `false` indicating that the color panel is still open (i.e. it may change color again)."],"returns":[" * The last callbackFn or `nil` so you can save it and re-attach it if something needs to temporarily take the callbacks."],"signature":"hs.dialog.color.callback([callbackFn]) -> function or nil","stripped_doc":"","type":"Function"},"color":{"def":"hs.dialog.color.color([value]) -> table","desc":"Set or display the currently selected color in a color wheel.","doc":"Set or display the currently selected color in a color wheel.\n\nParameters:\n * [value] - The color values in a table (as described in `hs.drawing.color`).\n\nReturns:\n * A table of the currently selected color in the form of `hs.drawing.color`.\n\nNotes:\n * Example:\n     `hs.dialog.color.color(hs.drawing.color.blue)`","examples":[],"file":"extensions/dialog/libdialog.m","lineno":"164","name":"color","notes":[" * Example:","     `hs.dialog.color.color(hs.drawing.color.blue)`"],"parameters":[" * [value] - The color values in a table (as described in `hs.drawing.color`)."],"returns":[" * A table of the currently selected color in the form of `hs.drawing.color`."],"signature":"hs.dialog.color.color([value]) -> table","stripped_doc":"","type":"Function"},"continuous":{"def":"hs.dialog.color.continuous([value]) -> boolean","desc":"Set or display whether or not the callback should be continiously updated when a user drags a color slider or control.","doc":"Set or display whether or not the callback should be continiously updated when a user drags a color slider or control.\n\nParameters:\n * [value] - `true` if you want to continiously trigger the callback, otherwise `false`.\n\nReturns:\n * `true` if continuous is enabled otherwise `false`\n\nNotes:\n * Example:\n     `hs.dialog.color.continuous(true)`","examples":[],"file":"extensions/dialog/libdialog.m","lineno":"116","name":"continuous","notes":[" * Example:","     `hs.dialog.color.continuous(true)`"],"parameters":[" * [value] - `true` if you want to continiously trigger the callback, otherwise `false`."],"returns":[" * `true` if continuous is enabled otherwise `false`"],"signature":"hs.dialog.color.continuous([value]) -> boolean","stripped_doc":"","type":"Function"},"hide":{"def":"hs.dialog.color.hide() -> none","desc":"Hides the Color Panel.","doc":"Hides the Color Panel.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Example:\n     `hs.dialog.color.hide()`","examples":[],"file":"extensions/dialog/libdialog.m","lineno":"305","name":"hide","notes":[" * Example:","     `hs.dialog.color.hide()`"],"parameters":[" * None"],"returns":[" * None"],"signature":"hs.dialog.color.hide() -> none","stripped_doc":"","type":"Function"},"mode":{"def":"hs.dialog.color.mode([value]) -> table","desc":"Set or display the currently selected color panel mode.","doc":"Set or display the currently selected color panel mode.\n\nParameters:\n * [value] - The mode you wish to use as a string from the following options:\n   ** \"wheel\" - Color Wheel\n   ** \"gray\" - Gray Scale Slider\n   ** \"RGB\" - RGB Sliders\n   ** \"CMYK\" - CMYK Sliders\n   ** \"HSB\" - HSB Sliders\n   ** \"list\" - Color Palettes\n   ** \"custom\" - Image Palettes\n   ** \"crayon\" - Pencils\n   ** \"none\"\n\nReturns:\n * The current mode as a string.\n\nNotes:\n * Example:\n     `hs.dialog.color.mode(\"RGB\")`","examples":[],"file":"extensions/dialog/libdialog.m","lineno":"189","name":"mode","notes":[" * Example:","     `hs.dialog.color.mode(\"RGB\")`"],"parameters":[" * [value] - The mode you wish to use as a string from the following options: ** \"wheel\" - Color Wheel ** \"gray\" - Gray Scale Slider ** \"RGB\" - RGB Sliders ** \"CMYK\" - CMYK Sliders ** \"HSB\" - HSB Sliders ** \"list\" - Color Palettes ** \"custom\" - Image Palettes ** \"crayon\" - Pencils ** \"none\""],"returns":[" * The current mode as a string."],"signature":"hs.dialog.color.mode([value]) -> table","stripped_doc":"","type":"Function"},"show":{"def":"hs.dialog.color.show() -> none","desc":"Shows the Color Panel.","doc":"Shows the Color Panel.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Example:\n     `hs.dialog.color.show()`","examples":[],"file":"extensions/dialog/libdialog.m","lineno":"285","name":"show","notes":[" * Example:","     `hs.dialog.color.show()`"],"parameters":[" * None"],"returns":[" * None"],"signature":"hs.dialog.color.show() -> none","stripped_doc":"","type":"Function"},"showsAlpha":{"def":"hs.dialog.color.showsAlpha([value]) -> boolean","desc":"Set or display whether or not the color panel should display an opacity slider.","doc":"Set or display whether or not the color panel should display an opacity slider.\n\nParameters:\n * [value] - `true` if you want to display an opacity slider, otherwise `false`.\n\nReturns:\n * `true` if the opacity slider is displayed otherwise `false`\n\nNotes:\n * Example:\n     `hs.dialog.color.showsAlpha(true)`","examples":[],"file":"extensions/dialog/libdialog.m","lineno":"140","name":"showsAlpha","notes":[" * Example:","     `hs.dialog.color.showsAlpha(true)`"],"parameters":[" * [value] - `true` if you want to display an opacity slider, otherwise `false`."],"returns":[" * `true` if the opacity slider is displayed otherwise `false`"],"signature":"hs.dialog.color.showsAlpha([value]) -> boolean","stripped_doc":"","type":"Function"}}