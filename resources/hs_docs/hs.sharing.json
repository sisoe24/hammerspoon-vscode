{"accountName":{"def":"hs.sharing:accountName() -> string | nil","desc":"The account name used by the sharing service when posting on Twitter or Sina Weibo.","doc":"The account name used by the sharing service when posting on Twitter or Sina Weibo.\n\nParameters:\n * None\n\nReturns:\n * a string containing the account name used by the sharing service, or nil if the sharing service does not provide this.\n\nNotes:\n * According to the Apple API documentation, only the Twitter and Sina Weibo sharing services will set this property, but this has not been fully tested.","examples":[],"file":"extensions/sharing/libsharing.m","lineno":"361","name":"accountName","notes":[" * According to the Apple API documentation, only the Twitter and Sina Weibo sharing services will set this property, but this has not been fully tested."],"parameters":[" * None"],"returns":[" * a string containing the account name used by the sharing service, or nil if the sharing service does not provide this."],"signature":"hs.sharing:accountName() -> string | nil","stripped_doc":"","type":"Method"},"alternateImage":{"def":"hs.sharing:alternateImage() -> hs.image object | nil","desc":"Returns an alternate image, if one exists, representing the sharing service provided by this sharing object.","doc":"Returns an alternate image, if one exists, representing the sharing service provided by this sharing object.\n\nParameters:\n * None\n\nReturns:\n * an hs.image object or nil, if no alternate image representation for the sharing service is defined.","examples":[],"file":"extensions/sharing/libsharing.m","lineno":"470","name":"alternateImage","notes":[],"parameters":[" * None"],"returns":[" * an hs.image object or nil, if no alternate image representation for the sharing service is defined."],"signature":"hs.sharing:alternateImage() -> hs.image object | nil","stripped_doc":"","type":"Method"},"attachments":{"def":"hs.sharing:attachments() -> table | nil","desc":"If the sharing service provides an array of the attachments included when the data was posted, this method will return an array of file URL tables of the attachments.","doc":"If the sharing service provides an array of the attachments included when the data was posted, this method will return an array of file URL tables of the attachments.\n\nParameters:\n * None\n\nReturns:\n * an array (table) containing the attachment file URLs, or nil if the sharing service selected does not provide this.\n\nNotes:\n * not all sharing services will set a value for this property.","examples":[],"file":"extensions/sharing/libsharing.m","lineno":"341","name":"attachments","notes":[" * not all sharing services will set a value for this property."],"parameters":[" * None"],"returns":[" * an array (table) containing the attachment file URLs, or nil if the sharing service selected does not provide this."],"signature":"hs.sharing:attachments() -> table | nil","stripped_doc":"","type":"Method"},"builtinSharingServices":{"def":"hs.sharing.builtinSharingServices[]","desc":"A table containing the predefined sharing service labels defined by Apple.","doc":"A table containing the predefined sharing service labels defined by Apple.\n\nThis table contains the default sharing service identifiers as identified by Apple.  Depending upon the software you have installed on your system, not all of the identifiers included here may be available on your computer and other Applications may provide sharing services with identifiers not included here.  You can determine valid identifiers for specific data types by using the [hs.sharing.shareTypesFor](#shareTypesFor) function which will list all identifiers that will work for all of the specified items, even those which do not appear in this table.","file":"extensions/sharing/sharing.lua","lineno":"34","name":"builtinSharingServices","signature":"hs.sharing.builtinSharingServices[]","stripped_doc":"This table contains the default sharing service identifiers as identified by Apple.  Depending upon the software you have installed on your system, not all of the identifiers included here may be available on your computer and other Applications may provide sharing services with identifiers not included here.  You can determine valid identifiers for specific data types by using the [hs.sharing.shareTypesFor](#shareTypesFor) function which will list all identifiers that will work for all of the specified items, even those which do not appear in this table.","type":"Constant"},"callback":{"def":"hs.sharing:callback(fn) -> sharingObject","desc":"Set or clear the callback for the sharingObject.","doc":"Set or clear the callback for the sharingObject.\n\nParameters:\n * fn - A function, or nil, to set or remove the callback for the sharingObject\n\nReturns:\n * the sharingObject\n\nNotes:\n * the callback should expect 3 or 4 arguments and return no results.  The arguments will be as follows:\n   * the sharingObject itself\n   * the callback message, which will be a string equal to one of the following:\n     * \"didFail\"   - an error occurred while attempting to share the items\n     * \"didShare\"  - the sharing service has finished sharing the items\n     * \"willShare\" - the sharing service is about to start sharing the items; occurs before sharing actually begins\n   * an array (table) containing the items being shared; if the message is \"didFail\" or \"didShare\", the items may be in a different order or converted to a different internal type to facilitate sharing.\n   * if the message is \"didFail\", the fourth argument will be a localized description of the error that occurred.","examples":[],"file":"extensions/sharing/libsharing.m","lineno":"239","name":"callback","notes":[" * the callback should expect 3 or 4 arguments and return no results.  The arguments will be as follows:","   * the sharingObject itself","   * the callback message, which will be a string equal to one of the following:","     * \"didFail\"   - an error occurred while attempting to share the items","     * \"didShare\"  - the sharing service has finished sharing the items","     * \"willShare\" - the sharing service is about to start sharing the items; occurs before sharing actually begins","   * an array (table) containing the items being shared; if the message is \"didFail\" or \"didShare\", the items may be in a different order or converted to a different internal type to facilitate sharing.","   * if the message is \"didFail\", the fourth argument will be a localized description of the error that occurred."],"parameters":[" * fn - A function, or nil, to set or remove the callback for the sharingObject"],"returns":[" * the sharingObject"],"signature":"hs.sharing:callback(fn) -> sharingObject","stripped_doc":"","type":"Method"},"canShareItems":{"def":"hs.sharing:canShareItems(items) -> boolean","desc":"Returns a boolean specifying whether or not all of the items specified can be shared with the sharing service represented by the sharingObject.","doc":"Returns a boolean specifying whether or not all of the items specified can be shared with the sharing service represented by the sharingObject.\n\nParameters:\n * items - an array (table) or list of items separated by commas which are to be shared by the sharing service\n\nReturns:\n * a boolean value indicating whether or not all of the specified items can be shared with the sharing service represented by the sharingObject.","examples":[],"file":"extensions/sharing/libsharing.m","lineno":"216","name":"canShareItems","notes":[],"parameters":[" * items - an array (table) or list of items separated by commas which are to be shared by the sharing service"],"returns":[" * a boolean value indicating whether or not all of the specified items can be shared with the sharing service represented by the sharingObject."],"signature":"hs.sharing:canShareItems(items) -> boolean","stripped_doc":"","type":"Method"},"fileURL":{"def":"hs.sharing.fileURL(path) -> table","desc":"Returns a table representing a file URL for the path specified.","doc":"Returns a table representing a file URL for the path specified.\n\nParameters:\n * path - a string specifying a path to represent as a file URL.\n\nReturns:\n * a table containing the necessary labels for converting the specified path into a URL as required by the macOS APIs.\n\nNotes:\n * this function is a wrapper to [hs.sharing.URL](#URL) which sets the second argument to `true` for you.\n * see [hs.sharing.URL](#URL) for more information about the table format returned by this function.","examples":[],"file":"extensions/sharing/sharing.lua","lineno":"41","name":"fileURL","notes":[" * this function is a wrapper to [hs.sharing.URL](#URL) which sets the second argument to `true` for you."," * see [hs.sharing.URL](#URL) for more information about the table format returned by this function."],"parameters":[" * path - a string specifying a path to represent as a file URL."],"returns":[" * a table containing the necessary labels for converting the specified path into a URL as required by the macOS APIs."],"signature":"hs.sharing.fileURL(path) -> table","stripped_doc":"","type":"Function"},"image":{"def":"hs.sharing:image() -> hs.image object | nil","desc":"Returns an image, if one exists, representing the sharing service provided by this sharing object.","doc":"Returns an image, if one exists, representing the sharing service provided by this sharing object.\n\nParameters:\n * None\n\nReturns:\n * an hs.image object or nil, if no image representation for the sharing service is defined.","examples":[],"file":"extensions/sharing/libsharing.m","lineno":"487","name":"image","notes":[],"parameters":[" * None"],"returns":[" * an hs.image object or nil, if no image representation for the sharing service is defined."],"signature":"hs.sharing:image() -> hs.image object | nil","stripped_doc":"","type":"Method"},"messageBody":{"def":"hs.sharing:messageBody() -> string | nil","desc":"If the sharing service provides the message body that was posted when sharing has completed, this method will return the message body as a string.","doc":"If the sharing service provides the message body that was posted when sharing has completed, this method will return the message body as a string.\n\nParameters:\n * None\n\nReturns:\n * a string containing the message body, or nil if the sharing service selected does not provide this.\n\nNotes:\n * not all sharing services will set a value for this property.","examples":[],"file":"extensions/sharing/libsharing.m","lineno":"381","name":"messageBody","notes":[" * not all sharing services will set a value for this property."],"parameters":[" * None"],"returns":[" * a string containing the message body, or nil if the sharing service selected does not provide this."],"signature":"hs.sharing:messageBody() -> string | nil","stripped_doc":"","type":"Method"},"newShare":{"def":"hs.sharing.newShare(type) -> sharingObject","desc":"Creates a new sharing object of the type specified by the identifier provided.","doc":"Creates a new sharing object of the type specified by the identifier provided.\n\nParameters:\n * type - a string specifying a sharing type identifier as listed in the [hs.sharing.builtinSharingServices](#builtinSharingServices) table or returned by the [hs.sharing.shareTypesFor](#shareTypesFor).\n\nReturns:\n * a sharingObject or nil if the type identifier cannot be created on this system","examples":[],"file":"extensions/sharing/libsharing.m","lineno":"80","name":"newShare","notes":[],"parameters":[" * type - a string specifying a sharing type identifier as listed in the [hs.sharing.builtinSharingServices](#builtinSharingServices) table or returned by the [hs.sharing.shareTypesFor](#shareTypesFor)."],"returns":[" * a sharingObject or nil if the type identifier cannot be created on this system"],"signature":"hs.sharing.newShare(type) -> sharingObject","stripped_doc":"","type":"Constructor"},"permanentLink":{"def":"hs.sharing:permanentLink() -> URL table | nil","desc":"If the sharing service provides a permanent link to the post when sharing has completed, this method will return the corresponding URL.","doc":"If the sharing service provides a permanent link to the post when sharing has completed, this method will return the corresponding URL.\n\nParameters:\n * None\n\nReturns:\n * the URL for the permanent link, or nil if the sharing service selected does not provide this.\n\nNotes:\n * not all sharing services will set a value for this property.","examples":[],"file":"extensions/sharing/libsharing.m","lineno":"450","name":"permanentLink","notes":[" * not all sharing services will set a value for this property."],"parameters":[" * None"],"returns":[" * the URL for the permanent link, or nil if the sharing service selected does not provide this."],"signature":"hs.sharing:permanentLink() -> URL table | nil","stripped_doc":"","type":"Method"},"recipients":{"def":"hs.sharing:recipients([recipients]) -> current value | sharingObject","desc":"Get or set the subject to be used when the sharing service performs its sharing method.","doc":"Get or set the subject to be used when the sharing service performs its sharing method.\n\nParameters:\n * recipients - an optional array (table) or list of recipient strings separated by commas which specify the recipients of the shared items.\n\nReturns:\n * if an argument is provided, returns the sharingObject; otherwise returns the current value.\n\nNotes:\n * not all sharing services will make use of the value set by this method.\n * the individual recipients should be specified as strings in the format expected by the sharing service; e.g. for items being shared in an email, the recipients should be email address, etc.","examples":[],"file":"extensions/sharing/libsharing.m","lineno":"272","name":"recipients","notes":[" * not all sharing services will make use of the value set by this method."," * the individual recipients should be specified as strings in the format expected by the sharing service; e.g. for items being shared in an email, the recipients should be email address, etc."],"parameters":[" * recipients - an optional array (table) or list of recipient strings separated by commas which specify the recipients of the shared items."],"returns":[" * if an argument is provided, returns the sharingObject; otherwise returns the current value."],"signature":"hs.sharing:recipients([recipients]) -> current value | sharingObject","stripped_doc":"","type":"Method"},"serviceName":{"def":"hs.sharing:serviceName() -> string","desc":"The service identifier for the sharing service represented by the sharingObject.","doc":"The service identifier for the sharing service represented by the sharingObject.\n\nParameters:\n * None\n\nReturns:\n * a string containing the identifier for the sharing service.\n\nNotes:\n * this string will match the identifier used to create the sharing service object with [hs.sharing.newShare](#newShare)","examples":[],"file":"extensions/sharing/libsharing.m","lineno":"421","name":"serviceName","notes":[" * this string will match the identifier used to create the sharing service object with [hs.sharing.newShare](#newShare)"],"parameters":[" * None"],"returns":[" * a string containing the identifier for the sharing service."],"signature":"hs.sharing:serviceName() -> string","stripped_doc":"","type":"Method"},"shareItems":{"def":"hs.sharing:shareItems(items) -> sharingObject","desc":"Shares the items specified with the sharing service represented by the sharingObject.","doc":"Shares the items specified with the sharing service represented by the sharingObject.\n\nParameters:\n * items - an array (table) or list of items separated by commas which are to be shared by the sharing service\n\nReturns:\n * the sharingObject, or nil if one or more of the items cannot be shared with the sharing service represented by the sharingObject.\n\nNotes:\n * You can check to see if all of your items can be shared with the [hs.sharing:canShareItems](#canShareItems) method.","examples":[],"file":"extensions/sharing/libsharing.m","lineno":"185","name":"shareItems","notes":[" * You can check to see if all of your items can be shared with the [hs.sharing:canShareItems](#canShareItems) method."],"parameters":[" * items - an array (table) or list of items separated by commas which are to be shared by the sharing service"],"returns":[" * the sharingObject, or nil if one or more of the items cannot be shared with the sharing service represented by the sharingObject."],"signature":"hs.sharing:shareItems(items) -> sharingObject","stripped_doc":"","type":"Method"},"shareTypesFor":{"def":"hs.sharing.shareTypesFor(items) -> identifiersTable","desc":"Returns a table containing the sharing service identifiers which can share the items specified.","doc":"Returns a table containing the sharing service identifiers which can share the items specified.\n\nParameters:\n * items - an array (table) or list of items separated by commas which you wish to share with this module.\n\nReturns:\n * an array (table) containing strings which identify sharing service identifiers which may be used by the [hs.sharing.newShare](#newShare) constructor to share the specified data.\n\nNotes:\n * this function is intended to be used to determine the identifiers for sharing services available on your computer and that may not be included in the [hs.sharing.builtinSharingServices](#builtinSharingServices) table.","examples":[],"file":"extensions/sharing/libsharing.m","lineno":"102","name":"shareTypesFor","notes":[" * this function is intended to be used to determine the identifiers for sharing services available on your computer and that may not be included in the [hs.sharing.builtinSharingServices](#builtinSharingServices) table."],"parameters":[" * items - an array (table) or list of items separated by commas which you wish to share with this module."],"returns":[" * an array (table) containing strings which identify sharing service identifiers which may be used by the [hs.sharing.newShare](#newShare) constructor to share the specified data."],"signature":"hs.sharing.shareTypesFor(items) -> identifiersTable","stripped_doc":"","type":"Function"},"subject":{"def":"hs.sharing:subject([subject]) -> current value | sharingObject","desc":"Get or set the subject to be used when the sharing service performs its sharing method.","doc":"Get or set the subject to be used when the sharing service performs its sharing method.\n\nParameters:\n * subject - an optional string specifying the subject for the posting of the shared content\n\nReturns:\n * if an argument is provided, returns the sharingObject; otherwise returns the current value.\n\nNotes:\n * not all sharing services will make use of the value set by this method.","examples":[],"file":"extensions/sharing/libsharing.m","lineno":"315","name":"subject","notes":[" * not all sharing services will make use of the value set by this method."],"parameters":[" * subject - an optional string specifying the subject for the posting of the shared content"],"returns":[" * if an argument is provided, returns the sharingObject; otherwise returns the current value."],"signature":"hs.sharing:subject([subject]) -> current value | sharingObject","stripped_doc":"","type":"Method"},"title":{"def":"hs.sharing:title() -> string","desc":"The title for the sharing service represented by the sharingObject.","doc":"The title for the sharing service represented by the sharingObject.\n\nParameters:\n * None\n\nReturns:\n * a string containing the title of the sharing service.\n\nNotes:\n * this string differs from the identifier used to create the sharing service object with [hs.sharing.newShare](#newShare) and is intended to provide a more friendly label for the service if you need to list or refer to it elsewhere.","examples":[],"file":"extensions/sharing/libsharing.m","lineno":"401","name":"title","notes":[" * this string differs from the identifier used to create the sharing service object with [hs.sharing.newShare](#newShare) and is intended to provide a more friendly label for the service if you need to list or refer to it elsewhere."],"parameters":[" * None"],"returns":[" * a string containing the title of the sharing service."],"signature":"hs.sharing:title() -> string","stripped_doc":"","type":"Method"},"URL":{"def":"hs.sharing.URL(URL, [fileURL]) -> table","desc":"Returns a table representing the URL specified.","doc":"Returns a table representing the URL specified.\n\nParameters:\n * URL     - a string or table specifying the URL.\n * fileURL - an optional boolean, default `false`, specifying whether or not the URL is supposed to represent a file on the local computer.\n\nReturns:\n * a table containing the necessary labels for representing the specified URL as required by the macOS APIs.\n\nNotes:\n * If the URL is specified as a table, it is expected to contain a `url` key with a string value specifying a proper schema and resource locator.\n\n * Because macOS requires URLs to be represented as a specific object type which has no exact equivalent in Lua, Hammerspoon uses a table with specific keys to allow proper identification of a URL when included as an argument or result type.  Use this function or the [hs.sharing.fileURL](#fileURL) wrapper function when specifying a URL to ensure that the proper keys are defined.\n * At present, the following keys are defined for a URL table (additional keys may be added in the future if future Hammerspoon modules require them to more completely utilize the macOS NSURL class, but these will not change):\n   * url           - a string containing the URL with a proper schema and resource locator\n   * filePath      = a string specifying the actual path to the file in case the url is a file reference URL.  Note that setting this field with this method will be silently ignored; the field is automatically inserted if appropriate when returning an NSURL object to lua.\n   * __luaSkinType - a string specifying the macOS type this table represents when converted into an Objective-C type","examples":[],"file":"extensions/sharing/libsharing.m","lineno":"146","name":"URL","notes":[" * If the URL is specified as a table, it is expected to contain a `url` key with a string value specifying a proper schema and resource locator.",""," * Because macOS requires URLs to be represented as a specific object type which has no exact equivalent in Lua, Hammerspoon uses a table with specific keys to allow proper identification of a URL when included as an argument or result type.  Use this function or the [hs.sharing.fileURL](#fileURL) wrapper function when specifying a URL to ensure that the proper keys are defined."," * At present, the following keys are defined for a URL table (additional keys may be added in the future if future Hammerspoon modules require them to more completely utilize the macOS NSURL class, but these will not change):","   * url           - a string containing the URL with a proper schema and resource locator","   * filePath      = a string specifying the actual path to the file in case the url is a file reference URL.  Note that setting this field with this method will be silently ignored; the field is automatically inserted if appropriate when returning an NSURL object to lua.","   * __luaSkinType - a string specifying the macOS type this table represents when converted into an Objective-C type"],"parameters":[" * URL     - a string or table specifying the URL."," * fileURL - an optional boolean, default `false`, specifying whether or not the URL is supposed to represent a file on the local computer."],"returns":[" * a table containing the necessary labels for representing the specified URL as required by the macOS APIs."],"signature":"hs.sharing.URL(URL, [fileURL]) -> table","stripped_doc":" * Because macOS requires URLs to be represented as a specific object type which has no exact equivalent in Lua, Hammerspoon uses a table with specific keys to allow proper identification of a URL when included as an argument or result type.  Use this function or the [hs.sharing.fileURL](#fileURL) wrapper function when specifying a URL to ensure that the proper keys are defined.\n * At present, the following keys are defined for a URL table (additional keys may be added in the future if future Hammerspoon modules require them to more completely utilize the macOS NSURL class, but these will not change):\n   * url           - a string containing the URL with a proper schema and resource locator\n   * filePath      = a string specifying the actual path to the file in case the url is a file reference URL.  Note that setting this field with this method will be silently ignored; the field is automatically inserted if appropriate when returning an NSURL object to lua.\n   * __luaSkinType - a string specifying the macOS type this table represents when converted into an Objective-C type","type":"Function"}}