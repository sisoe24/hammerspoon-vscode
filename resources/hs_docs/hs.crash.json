{"attemptMemoryRelease":{"def":"hs.crash.attemptMemoryRelease()","desc":"Attempts to reduce RAM usage of Hammerspoon","doc":"Attempts to reduce RAM usage of Hammerspoon\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * This function will print some memory usage numbers (in bytes) to the Hammerspoon Console before and after forcing Lua's garbage collector","examples":[],"file":"extensions/crash/crash.lua","lineno":"40","name":"attemptMemoryRelease","notes":[" * This function will print some memory usage numbers (in bytes) to the Hammerspoon Console before and after forcing Lua's garbage collector"],"parameters":[" * None"],"returns":[" * None"],"signature":"hs.crash.attemptMemoryRelease()","stripped_doc":"","type":"Function"},"crash":{"def":"hs.crash.crash()","desc":"Causes Hammerspoon to immediately crash","doc":"Causes Hammerspoon to immediately crash\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * This is for testing purposes only, you are extremely unlikely to need this in normal Hammerspoon usage","examples":[],"file":"extensions/crash/libcrash.m","lineno":"12","name":"crash","notes":[" * This is for testing purposes only, you are extremely unlikely to need this in normal Hammerspoon usage"],"parameters":[" * None"],"returns":[" * None"],"signature":"hs.crash.crash()","stripped_doc":"","type":"Function"},"crashKV":{"def":"hs.crash.crashKV(key, value)","desc":"Sets a key/value pair in any Sentry crash dump generated by this Hamerspoon session","doc":"Sets a key/value pair in any Sentry crash dump generated by this Hamerspoon session\n\nParameters:\n * key - A string containing the key name of the pair\n * value - A string containing the value of the pair\n\nReturns:\n * None","examples":[],"file":"extensions/crash/libcrash.m","lineno":"72","name":"crashKV","notes":[],"parameters":[" * key - A string containing the key name of the pair"," * value - A string containing the value of the pair"],"returns":[" * None"],"signature":"hs.crash.crashKV(key, value)","stripped_doc":"","type":"Function"},"crashLog":{"def":"hs.crash.crashLog(logMessage)","desc":"Leaves a breadcrumb log message in any Sentry crash dump generated by this Hammerspoon session","doc":"Leaves a breadcrumb log message in any Sentry crash dump generated by this Hammerspoon session\n\nParameters:\n * logMessage - A string containing a message to log\n\nReturns:\n * None\n\nNotes:\n * This is probably only useful to extension developers. If you are trying to track down a confusing crash, and you have access to the Sentry project for Hammerspoon (or access to someone who has access!), this can be a useful way to leave breadcrumbs from Lua in the crash dump","examples":[],"file":"extensions/crash/libcrash.m","lineno":"53","name":"crashLog","notes":[" * This is probably only useful to extension developers. If you are trying to track down a confusing crash, and you have access to the Sentry project for Hammerspoon (or access to someone who has access!), this can be a useful way to leave breadcrumbs from Lua in the crash dump"],"parameters":[" * logMessage - A string containing a message to log"],"returns":[" * None"],"signature":"hs.crash.crashLog(logMessage)","stripped_doc":"","type":"Function"},"dumpCLIBS":{"def":"hs.crash.dumpCLIBS() -> table","desc":"Dumps the contents of Lua's CLIBS registry","doc":"Dumps the contents of Lua's CLIBS registry\n\nParameters:\n * None\n\nReturns:\n * A table containing all the paths of C libraries that have been loaded into the Lua runtime\n\nNotes:\n * This is probably only useful to extension developers as a useful way of ensuring that you are loading C libraries from the places you expect.","examples":[],"file":"extensions/crash/crash.lua","lineno":"7","name":"dumpCLIBS","notes":[" * This is probably only useful to extension developers as a useful way of ensuring that you are loading C libraries from the places you expect."],"parameters":[" * None"],"returns":[" * A table containing all the paths of C libraries that have been loaded into the Lua runtime"],"signature":"hs.crash.dumpCLIBS() -> table","stripped_doc":"","type":"Function"},"residentSize":{"def":"hs.crash.residentSize() -> integer or nil","desc":"Gets the resident size of the Hammerspoon process","doc":"Gets the resident size of the Hammerspoon process\n\nParameters:\n * None\n\nReturns:\n * An integer containing the amount of RAM in use by Hammerspoon (in bytes), or nil if an error occurred","examples":[],"file":"extensions/crash/libcrash.m","lineno":"107","name":"residentSize","notes":[],"parameters":[" * None"],"returns":[" * An integer containing the amount of RAM in use by Hammerspoon (in bytes), or nil if an error occurred"],"signature":"hs.crash.residentSize() -> integer or nil","stripped_doc":"","type":"Function"},"throwObjCException":{"def":"hs.crash.throwObjCException(name, message)","desc":"Causes Hammerspoon to generate an Objective C exception","doc":"Causes Hammerspoon to generate an Objective C exception\n\nParameters:\n * name - A string containing the name of the exception\n * message - A human readabke string explaining the exception\n\nReturns:\n * None\n\nNotes:\n * Outside of a context of a Lua pcall() (or a C lua_pcall()), this will cause Hammerspoon to exit. We follow the safe behaviour of terminating the app on any unhandled Objective C exception.","examples":[],"file":"extensions/crash/libcrash.m","lineno":"31","name":"throwObjCException","notes":[" * Outside of a context of a Lua pcall() (or a C lua_pcall()), this will cause Hammerspoon to exit. We follow the safe behaviour of terminating the app on any unhandled Objective C exception."],"parameters":[" * name - A string containing the name of the exception"," * message - A human readabke string explaining the exception"],"returns":[" * None"],"signature":"hs.crash.throwObjCException(name, message)","stripped_doc":"","type":"Function"}}