{"configuration":{"type":"Module","doc":"This sub-module provides access to the current location set configuration settings in the system's dynamic store.","def":"-> hs.network.configuration"},"host":{"type":"Module","doc":"This sub-module provides functions for acquiring host information, such as hostnames, addresses, and reachability.","def":"-> hs.network.host"},"ping":{"type":"Module","doc":"This module provides a basic ping function which can test host availability. Ping is a network diagnostic tool commonly found in most operating systems which can be used to test if a route to a specified host exists and if that host is responding to network traffic.","def":"-> hs.network.ping"},"reachability":{"type":"Module","doc":"This sub-module can be used to determine the reachability of a target host. A remote host is considered reachable when a data packet, sent by an application into the network stack, can leave the local device. Reachability does not guarantee that the data packet will actually be received by the host.\n\nIt is important to remember that this module works by determining if the computer has a route for network traffic bound to a specific destination.  An active internet connection provides a default route for any network that the host is not a member of, so care must be used when testing for specific VPN or local networks to avoid false positives.  Some examples follow:\n\nThis is a simple watcher which will be invoked whenever the computer's active internet connection changes state:\n~~~\n    hs.network.reachability.internet():setCallback(function(self, flags)\n        if (flags & hs.network.reachability.flags.reachable) > 0 then\n            -- a default route exists, so an active internet connection is present\n        else\n            -- no default route exists, so no active internet connection is present\n        end\n   end):start()\n~~~\n\nNote that when an active internet connection is up (reachable), any specific network test that does not include an address pair will be reachable, since internet reachability is defined as having a default route for all non-local networks.\n\nA specific test for determining if an OpenVPN network is available.  This example requires knowing what the local computer's IP address on the VPN network is (OpenVPN does not set the `isDirect` flag) and has been tested with Tunnelblick.\n~~~\n    hs.network.reachability.forAddress(\"10.x.y.z\"):setCallback(function(self, flags)\n        -- note that because having an internet connection at all will show the remote network\n        -- as \"reachable\", we instead look at whether or not our specific address is \"local\" instead\n        if (flags & hs.network.reachability.flags.isLocalAddress) > 0 then\n            -- VPN tunnel is up\n        else\n            -- VPN tunnel is down\n        end\n   end):start()\n~~~","def":"-> hs.network.reachability"},"addresses":{"def":"hs.network.addresses([interface_list]) -> table","desc":"Returns a list of the IPv4 and IPv6 addresses for the specified interfaces, or all interfaces if no arguments are given.","doc":"Returns a list of the IPv4 and IPv6 addresses for the specified interfaces, or all interfaces if no arguments are given.\n\nParameters:\n * interface_list - The interface names to return the IP addresses for. It should be specified as one of the following:\n   * one or more interface names, separated by a comma\n   * if the first argument is a table, it is assumes to be a table containing a list of interfaces and this list is used instead, ignoring any additional arguments that may be provided\n   * if no arguments are specified, then the results of [hs.network.interfaces](#interfaces) is used.\n\nReturns:\n * A table containing a list of the IP addresses for the interfaces as determined by the arguments provided.\n\nNotes:\n * The order of the IP addresses returned is undefined.\n * If no arguments are provided, then this function returns the same results as `hs.host.addresses`, but does not block.","examples":[],"file":"extensions/network/network.lua","lineno":"145","name":"addresses","notes":[" * The order of the IP addresses returned is undefined."," * If no arguments are provided, then this function returns the same results as `hs.host.addresses`, but does not block."],"parameters":[" * interface_list - The interface names to return the IP addresses for. It should be specified as one of the following:\n   * one or more interface names, separated by a comma\n   * if the first argument is a table, it is assumes to be a table containing a list of interfaces and this list is used instead, ignoring any additional arguments that may be provided\n   * if no arguments are specified, then the results of [hs.network.interfaces](#interfaces) is used."],"returns":[" * A table containing a list of the IP addresses for the interfaces as determined by the arguments provided."],"signature":"hs.network.addresses([interface_list]) -> table","stripped_doc":"","type":"Function"},"interfaceDetails":{"def":"hs.network.interfaceDetails([interface | favorIPv6]) -> table","desc":"Returns details about the specified interface or the primary interface if no interface is specified.","doc":"Returns details about the specified interface or the primary interface if no interface is specified.\n\nParameters:\n * interface - an optional string specifying the interface to retrieve details about.  Defaults to the primary interface if not specified.\n * favorIPv6 - an optional boolean specifying whether or not to prefer the primary IPv6 or the primary IPv4 interface if `interface` is not specified.  Defaults to false.\n\nReturns:\n * A table containing key-value pairs describing interface details.  Returns an empty table if no primary interface can be determined. Logs an error and returns nil if there was a problem retrieving this information.\n\nNotes:\n * When determining the primary interface, the `favorIPv6` flag only determines interface search order.  If you specify true for this flag, but no primary IPv6 interface exists (i.e. your DHCP server only provides an IPv4 address an IPv6 is limited to local only traffic), then the primary IPv4 interface will be used instead.","examples":[],"file":"extensions/network/network.lua","lineno":"69","name":"interfaceDetails","notes":[" * When determining the primary interface, the `favorIPv6` flag only determines interface search order.  If you specify true for this flag, but no primary IPv6 interface exists (i.e. your DHCP server only provides an IPv4 address an IPv6 is limited to local only traffic), then the primary IPv4 interface will be used instead."],"parameters":[" * interface - an optional string specifying the interface to retrieve details about.  Defaults to the primary interface if not specified."," * favorIPv6 - an optional boolean specifying whether or not to prefer the primary IPv6 or the primary IPv4 interface if `interface` is not specified.  Defaults to false."],"returns":[" * A table containing key-value pairs describing interface details.  Returns an empty table if no primary interface can be determined. Logs an error and returns nil if there was a problem retrieving this information."],"signature":"hs.network.interfaceDetails([interface | favorIPv6]) -> table","stripped_doc":"","type":"Function"},"interfaceName":{"def":"hs.network.interfaceName([interface | favorIPv6]) -> string","desc":"Returns the user defined name for the specified interface or the primary interface if no interface is specified.","doc":"Returns the user defined name for the specified interface or the primary interface if no interface is specified.\n\nParameters:\n * interface - an optional string specifying the interface to retrieve the name for.  Defaults to the primary interface if not specified.\n * favorIPv6 - an optional boolean specifying whether or not to prefer the primary IPv6 or the primary IPv4 interface if `interface` is not specified.  Defaults to false.\n\nReturns:\n * A string containing the user defined name for the interface, if one exists, or false if the interface does not have a user defined name. Logs an error and returns nil if there was a problem retrieving this information.\n\nNotes:\n * Only interfaces which show up in the System Preferences Network panel will have a user defined name.\n\n * When determining the primary interface, the `favorIPv6` flag only determines interface search order.  If you specify true for this flag, but no primary IPv6 interface exists (i.e. your DHCP server only provides an IPv4 address an IPv6 is limited to local only traffic), then the primary IPv4 interface will be used instead.","examples":[],"file":"extensions/network/network.lua","lineno":"190","name":"interfaceName","notes":[" * Only interfaces which show up in the System Preferences Network panel will have a user defined name.",""," * When determining the primary interface, the `favorIPv6` flag only determines interface search order.  If you specify true for this flag, but no primary IPv6 interface exists (i.e. your DHCP server only provides an IPv4 address an IPv6 is limited to local only traffic), then the primary IPv4 interface will be used instead."],"parameters":[" * interface - an optional string specifying the interface to retrieve the name for.  Defaults to the primary interface if not specified."," * favorIPv6 - an optional boolean specifying whether or not to prefer the primary IPv6 or the primary IPv4 interface if `interface` is not specified.  Defaults to false."],"returns":[" * A string containing the user defined name for the interface, if one exists, or false if the interface does not have a user defined name. Logs an error and returns nil if there was a problem retrieving this information."],"signature":"hs.network.interfaceName([interface | favorIPv6]) -> string","stripped_doc":" * When determining the primary interface, the `favorIPv6` flag only determines interface search order.  If you specify true for this flag, but no primary IPv6 interface exists (i.e. your DHCP server only provides an IPv4 address an IPv6 is limited to local only traffic), then the primary IPv4 interface will be used instead.","type":"Function"},"interfaces":{"def":"hs.network.interfaces() -> table","desc":"Returns a list of interfaces currently active for the system.","doc":"Returns a list of interfaces currently active for the system.\n\nParameters:\n * None\n\nReturns:\n * A table containing a list of the interfaces active for the system.  Logs an error and returns nil if there was a problem retrieving this information.\n\nNotes:\n * The names of the interfaces returned by this function correspond to the interface's BSD name, not the user defined name that shows up in the System Preferences's Network panel.\n * This function returns *all* interfaces, even ones used by the system that are not directly manageable by the user.","examples":[],"file":"extensions/network/network.lua","lineno":"38","name":"interfaces","notes":[" * The names of the interfaces returned by this function correspond to the interface's BSD name, not the user defined name that shows up in the System Preferences's Network panel."," * This function returns *all* interfaces, even ones used by the system that are not directly manageable by the user."],"parameters":[" * None"],"returns":[" * A table containing a list of the interfaces active for the system.  Logs an error and returns nil if there was a problem retrieving this information."],"signature":"hs.network.interfaces() -> table","stripped_doc":"","type":"Function"},"primaryInterfaces":{"def":"hs.network.primaryInterfaces() -> ipv4Interface, ipv6Interface","desc":"Returns the names of the primary IPv4 and IPv6 interfaces.","doc":"Returns the names of the primary IPv4 and IPv6 interfaces.\n\nParameters:\n * None\n\nReturns:\n * The name of the primary IPv4 interface or false if there isn't one, and the name of the IPv6 interface or false if there isn't one. Logs an error and returns a single nil if there was a problem retrieving this information.\n\nNotes:\n * The IPv4 and IPv6 interface names are often, but not always, the same.","examples":[],"file":"extensions/network/network.lua","lineno":"115","name":"primaryInterfaces","notes":[" * The IPv4 and IPv6 interface names are often, but not always, the same."],"parameters":[" * None"],"returns":[" * The name of the primary IPv4 interface or false if there isn't one, and the name of the IPv6 interface or false if there isn't one. Logs an error and returns a single nil if there was a problem retrieving this information."],"signature":"hs.network.primaryInterfaces() -> ipv4Interface, ipv6Interface","stripped_doc":"","type":"Function"}}