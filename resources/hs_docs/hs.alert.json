{"closeAll":{"def":"hs.alert.closeAll([seconds])","desc":"Closes all alerts currently open on the screen","doc":"Closes all alerts currently open on the screen\n\nParameters:\n * seconds - Optional number specifying the fade out duration. Defaults to `fadeOutDuration` value currently defined in the [hs.alert.defaultStyle](#defaultStyle)\n\nReturns:\n * None","examples":[],"file":"extensions/alert/alert.lua","lineno":"284","name":"closeAll","notes":[],"parameters":[" * seconds - Optional number specifying the fade out duration. Defaults to `fadeOutDuration` value currently defined in the [hs.alert.defaultStyle](#defaultStyle)"],"returns":[" * None"],"signature":"hs.alert.closeAll([seconds])","stripped_doc":"","type":"Function"},"closeSpecific":{"def":"hs.alert.closeSpecific(uuid, [seconds])","desc":"Closes the alert with the specified identifier","doc":"Closes the alert with the specified identifier\n\nParameters:\n * uuid    - the identifier of the alert to close\n * seconds - Optional number specifying the fade out duration. Defaults to `fadeOutDuration` value currently defined in the [hs.alert.defaultStyle](#defaultStyle)\n\nReturns:\n * None\n\nNotes:\n * Use this function to close an alert which is indefinate or close an alert with a long duration early.","examples":[],"file":"extensions/alert/alert.lua","lineno":"300","name":"closeSpecific","notes":[" * Use this function to close an alert which is indefinate or close an alert with a long duration early."],"parameters":[" * uuid    - the identifier of the alert to close"," * seconds - Optional number specifying the fade out duration. Defaults to `fadeOutDuration` value currently defined in the [hs.alert.defaultStyle](#defaultStyle)"],"returns":[" * None"],"signature":"hs.alert.closeSpecific(uuid, [seconds])","stripped_doc":"","type":"Function"},"defaultStyle":{"def":"hs.alert.defaultStyle[]","desc":"A table defining the default visual style for the alerts generated by this module.","doc":"A table defining the default visual style for the alerts generated by this module.\n\nThe following may be specified in this table (any other key is ignored):\n * Keys which affect the alert rectangle:\n   * fillColor   - a table as defined by the `hs.drawing.color` module to specify the background color for the alert, defaults to { white = 0, alpha = 0.75 }.\n   * strokeColor - a table as defined by the `hs.drawing.color` module to specify the outline color for the alert, defaults to { white = 1, alpha = 1 }.\n   * strokeWidth - a number specifying the width of the outline for the alert, defaults to 2\n   * radius      - a number specifying the radius used for the rounded corners of the alert box, defaults to 27\n\n * Keys which affect the text of the alert when the message is a string (note that these keys will be ignored if the message being displayed is already an `hs.styledtext` object):\n   * textColor   - a table as defined by the `hs.drawing.color` module to specify the message text color for the alert, defaults to { white = 1, alpha = 1 }.\n   * textFont    - a string specifying the font to be used for the alert text, defaults to \".AppleSystemUIFont\" which is a symbolic name representing the systems default user interface font.\n   * textSize    - a number specifying the font size to be used for the alert text, defaults to 27.\n   * textStyle   - an optional table, defaults to `nil`, specifying that a string message should be converted to an `hs.styledtext` object using the style elements specified in this table.  This table should conform to the key-value pairs as described in the documentation for the `hs.styledtext` module.  If this table does not contain a `font` key-value pair, one will be constructed from the `textFont` and `textSize` keys (or their defaults); likewise, if this table does not contain a `color` key-value pair, one will be constructed from the `textColor` key (or its default).\n   * padding     - the number of pixels to reserve around each side of the text and/or image, defaults to textSize/2\n   * atScreenEdge   - 0: screen center (default); 1: top edge; 2: bottom edge . Note when atScreenEdge>0, the latest alert will overlay above the previous ones if multiple alerts visible on same edge; and when atScreenEdge=0, latest alert will show below previous visible ones without overlap.\n   * fadeInDuration  - a number in seconds specifying the fade in duration of the alert, defaults to 0.15\n   * fadeOutDuration - a number in seconds specifying the fade out duration of the alert, defaults to 0.15\n\nIf you modify these values directly, it will affect all future alerts generated by this module.  To adjust one of these properties for a single alert, use the optional `style` argument to the [hs.alert.show](#show) function.","file":"extensions/alert/alert.lua","lineno":"17","name":"defaultStyle","signature":"hs.alert.defaultStyle[]","stripped_doc":"The following may be specified in this table (any other key is ignored):\n * Keys which affect the alert rectangle:\n   * fillColor   - a table as defined by the `hs.drawing.color` module to specify the background color for the alert, defaults to { white = 0, alpha = 0.75 }.\n   * strokeColor - a table as defined by the `hs.drawing.color` module to specify the outline color for the alert, defaults to { white = 1, alpha = 1 }.\n   * strokeWidth - a number specifying the width of the outline for the alert, defaults to 2\n   * radius      - a number specifying the radius used for the rounded corners of the alert box, defaults to 27\n * Keys which affect the text of the alert when the message is a string (note that these keys will be ignored if the message being displayed is already an `hs.styledtext` object):\n   * textColor   - a table as defined by the `hs.drawing.color` module to specify the message text color for the alert, defaults to { white = 1, alpha = 1 }.\n   * textFont    - a string specifying the font to be used for the alert text, defaults to \".AppleSystemUIFont\" which is a symbolic name representing the systems default user interface font.\n   * textSize    - a number specifying the font size to be used for the alert text, defaults to 27.\n   * textStyle   - an optional table, defaults to `nil`, specifying that a string message should be converted to an `hs.styledtext` object using the style elements specified in this table.  This table should conform to the key-value pairs as described in the documentation for the `hs.styledtext` module.  If this table does not contain a `font` key-value pair, one will be constructed from the `textFont` and `textSize` keys (or their defaults); likewise, if this table does not contain a `color` key-value pair, one will be constructed from the `textColor` key (or its default).\n   * padding     - the number of pixels to reserve around each side of the text and/or image, defaults to textSize/2\n   * atScreenEdge   - 0: screen center (default); 1: top edge; 2: bottom edge . Note when atScreenEdge>0, the latest alert will overlay above the previous ones if multiple alerts visible on same edge; and when atScreenEdge=0, latest alert will show below previous visible ones without overlap.\n   * fadeInDuration  - a number in seconds specifying the fade in duration of the alert, defaults to 0.15\n   * fadeOutDuration - a number in seconds specifying the fade out duration of the alert, defaults to 0.15\nIf you modify these values directly, it will affect all future alerts generated by this module.  To adjust one of these properties for a single alert, use the optional `style` argument to the [hs.alert.show](#show) function.","type":"Variable"},"show":{"def":"hs.alert.show(str, [style], [screen], [seconds]) -> uuid","desc":"Shows a message in large words briefly in the middle of the screen; does tostring() on its argument for convenience.","doc":"Shows a message in large words briefly in the middle of the screen; does tostring() on its argument for convenience.\n\nParameters:\n * str     - The string or `hs.styledtext` object to display in the alert\n * style   - an optional table containing one or more of the keys specified in [hs.alert.defaultStyle](#defaultStyle).  If `str` is already an `hs.styledtext` object, this argument is ignored.\n * screen  - an optional `hs.screen` userdata object specifying the screen (monitor) to display the alert on.  Defaults to `hs.screen.mainScreen()` which corresponds to the screen with the currently focused window.\n * seconds - The number of seconds to display the alert. Defaults to 2.  If seconds is specified and is not a number, displays the alert indefinately.\n\nReturns:\n * a string identifier for the alert.\n\nNotes:\n * For convenience, you can call this function as `hs.alert(...)`\n * This function effectively calls `hs.alert.showWithImage(msg, nil, ...)`. As such, all the same rules apply regarding argument processing","examples":[],"file":"extensions/alert/alert.lua","lineno":"263","name":"show","notes":[" * For convenience, you can call this function as `hs.alert(...)`"," * This function effectively calls `hs.alert.showWithImage(msg, nil, ...)`. As such, all the same rules apply regarding argument processing"],"parameters":[" * str     - The string or `hs.styledtext` object to display in the alert"," * style   - an optional table containing one or more of the keys specified in [hs.alert.defaultStyle](#defaultStyle).  If `str` is already an `hs.styledtext` object, this argument is ignored."," * screen  - an optional `hs.screen` userdata object specifying the screen (monitor) to display the alert on.  Defaults to `hs.screen.mainScreen()` which corresponds to the screen with the currently focused window."," * seconds - The number of seconds to display the alert. Defaults to 2.  If seconds is specified and is not a number, displays the alert indefinately."],"returns":[" * a string identifier for the alert."],"signature":"hs.alert.show(str, [style], [screen], [seconds]) -> uuid","stripped_doc":"","type":"Function"},"showWithImage":{"def":"hs.alert.showWithImage(str, image, [style], [screen], [seconds]) -> uuid","desc":"Shows an image and a message in large words briefly in the middle of the screen; does tostring() on its argument for convenience.","doc":"Shows an image and a message in large words briefly in the middle of the screen; does tostring() on its argument for convenience.\n\nParameters:\n * str     - The string or `hs.styledtext` object to display in the alert\n * image   - The image to display in the alert\n * style   - an optional table containing one or more of the keys specified in [hs.alert.defaultStyle](#defaultStyle).  If `str` is already an `hs.styledtext` object, this argument is ignored.\n * screen  - an optional `hs.screen` userdata object specifying the screen (monitor) to display the alert on.  Defaults to `hs.screen.mainScreen()` which corresponds to the screen with the currently focused window.\n * seconds - The number of seconds to display the alert. Defaults to 2.  If seconds is specified and is not a number, displays the alert indefinately.\n\nReturns:\n * a string identifier for the alert.\n\nNotes:\n * The optional parameters are parsed in the order presented as follows:\n   * if the argument is a table and `style` has not previously been set, then the table is assigned to `style`\n   * if the argument is a userdata and `screen` has not previously been set, then the userdata is assigned to `screen`\n   * if `duration` has not been set, then it is assigned the value of the argument\n   * if all of these conditions fail for a given argument, then an error is returned\n * The reason for this logic is to support the creation of persistent alerts as was previously handled by the module: If you specify a non-number value for `seconds` you will need to store the string identifier returned by this function so that you can close it manually with `hs.alert.closeSpecific` when the alert should be removed.\n * Any style element which is not specified in the `style` argument table will use the value currently defined in the [hs.alert.defaultStyle](#defaultStyle) table.","examples":[],"file":"extensions/alert/alert.lua","lineno":"220","name":"showWithImage","notes":[" * The optional parameters are parsed in the order presented as follows:","   * if the argument is a table and `style` has not previously been set, then the table is assigned to `style`","   * if the argument is a userdata and `screen` has not previously been set, then the userdata is assigned to `screen`","   * if `duration` has not been set, then it is assigned the value of the argument","   * if all of these conditions fail for a given argument, then an error is returned"," * The reason for this logic is to support the creation of persistent alerts as was previously handled by the module: If you specify a non-number value for `seconds` you will need to store the string identifier returned by this function so that you can close it manually with `hs.alert.closeSpecific` when the alert should be removed."," * Any style element which is not specified in the `style` argument table will use the value currently defined in the [hs.alert.defaultStyle](#defaultStyle) table."],"parameters":[" * str     - The string or `hs.styledtext` object to display in the alert"," * image   - The image to display in the alert"," * style   - an optional table containing one or more of the keys specified in [hs.alert.defaultStyle](#defaultStyle).  If `str` is already an `hs.styledtext` object, this argument is ignored."," * screen  - an optional `hs.screen` userdata object specifying the screen (monitor) to display the alert on.  Defaults to `hs.screen.mainScreen()` which corresponds to the screen with the currently focused window."," * seconds - The number of seconds to display the alert. Defaults to 2.  If seconds is specified and is not a number, displays the alert indefinately."],"returns":[" * a string identifier for the alert."],"signature":"hs.alert.showWithImage(str, image, [style], [screen], [seconds]) -> uuid","stripped_doc":"","type":"Function"}}