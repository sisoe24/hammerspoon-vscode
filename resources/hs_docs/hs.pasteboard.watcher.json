{"interval":{"def":"hs.pasteboard.watcher.interval([value]) -> number","desc":"Gets or sets the polling interval (i.e. the frequency the pasteboard watcher checks the pasteboard).","doc":"Gets or sets the polling interval (i.e. the frequency the pasteboard watcher checks the pasteboard).\n\nParameters:\n * value - an optional number to set the polling interval to.\n\nReturns:\n * The polling interval as a number.\n\nNotes:\n * This only affects new watchers, not existing/running ones.\n * The default value is 0.25.","examples":[],"file":"extensions/pasteboard/libpasteboard_watcher.m","lineno":"249","name":"interval","notes":[" * This only affects new watchers, not existing/running ones."," * The default value is 0.25."],"parameters":[" * value - an optional number to set the polling interval to."],"returns":[" * The polling interval as a number."],"signature":"hs.pasteboard.watcher.interval([value]) -> number","stripped_doc":"","type":"Function"},"new":{"def":"hs.pasteboard.watcher.new(callbackFn[, name]) -> pasteboardWatcher","desc":"Creates and starts a new `hs.pasteboard.watcher` object for watching for Pasteboard changes.","doc":"Creates and starts a new `hs.pasteboard.watcher` object for watching for Pasteboard changes.\n\nParameters:\n * callbackFn - A function that will be called when the Pasteboard contents has changed. It should accept one parameter:\n  * A string containing the pasteboard contents or `nil` if the contents is not a valid string.\n * name - An optional string containing the name of the pasteboard. Defaults to the system pasteboard.\n\nReturns:\n * An `hs.pasteboard.watcher` object\n\nNotes:\n * Internally this extension uses a single `NSTimer` to check for changes to the pasteboard count every half a second.\n * Example usage:\n ```lua\n generalPBWatcher = hs.pasteboard.watcher.new(function(v) print(string.format(\"General Pasteboard Contents: %s\", v)) end)\n specialPBWatcher = hs.pasteboard.watcher.new(function(v) print(string.format(\"Special Pasteboard Contents: %s\", v)) end, \"special\")\n hs.pasteboard.writeObjects(\"This is on the general pasteboard.\")\n hs.pasteboard.writeObjects(\"This is on the special pasteboard.\", \"special\")```","examples":[],"file":"extensions/pasteboard/libpasteboard_watcher.m","lineno":"143","name":"new","notes":[" * Internally this extension uses a single `NSTimer` to check for changes to the pasteboard count every half a second."," * Example usage:"," ```lua"," generalPBWatcher = hs.pasteboard.watcher.new(function(v) print(string.format(\"General Pasteboard Contents: %s\", v)) end)"," specialPBWatcher = hs.pasteboard.watcher.new(function(v) print(string.format(\"Special Pasteboard Contents: %s\", v)) end, \"special\")"," hs.pasteboard.writeObjects(\"This is on the general pasteboard.\")"," hs.pasteboard.writeObjects(\"This is on the special pasteboard.\", \"special\")```"],"parameters":[" * callbackFn - A function that will be called when the Pasteboard contents has changed. It should accept one parameter:\n   * A string containing the pasteboard contents or `nil` if the contents is not a valid string."," * name - An optional string containing the name of the pasteboard. Defaults to the system pasteboard."],"returns":[" * An `hs.pasteboard.watcher` object"],"signature":"hs.pasteboard.watcher.new(callbackFn[, name]) -> pasteboardWatcher","stripped_doc":"","type":"Constructor"},"running":{"def":"hs.pasteboard.watcher:running() -> boolean","desc":"Returns a boolean indicating whether or not the Pasteboard Watcher is currently running.","doc":"Returns a boolean indicating whether or not the Pasteboard Watcher is currently running.\n\nParameters:\n * None\n\nReturns:\n * A boolean value indicating whether or not the timer is currently running.","examples":[],"file":"extensions/pasteboard/libpasteboard_watcher.m","lineno":"209","name":"running","notes":[],"parameters":[" * None"],"returns":[" * A boolean value indicating whether or not the timer is currently running."],"signature":"hs.pasteboard.watcher:running() -> boolean","stripped_doc":"","type":"Method"},"start":{"def":"hs.pasteboard.watcher:start() -> timer","desc":"Starts an `hs.pasteboard.watcher` object","doc":"Starts an `hs.pasteboard.watcher` object\n\nParameters:\n * None\n\nReturns:\n * The `hs.pasteboard.watcher` object","examples":[],"file":"extensions/pasteboard/libpasteboard_watcher.m","lineno":"187","name":"start","notes":[],"parameters":[" * None"],"returns":[" * The `hs.pasteboard.watcher` object"],"signature":"hs.pasteboard.watcher:start() -> timer","stripped_doc":"","type":"Method"},"stop":{"def":"hs.pasteboard.watcher:stop() -> timer","desc":"Stops an `hs.pasteboard.watcher` object","doc":"Stops an `hs.pasteboard.watcher` object\n\nParameters:\n * None\n\nReturns:\n * The `hs.pasteboard.watcher` object","examples":[],"file":"extensions/pasteboard/libpasteboard_watcher.m","lineno":"228","name":"stop","notes":[],"parameters":[" * None"],"returns":[" * The `hs.pasteboard.watcher` object"],"signature":"hs.pasteboard.watcher:stop() -> timer","stripped_doc":"","type":"Method"}}