{"cancel":{"def":"hs.location.geocoder:cancel() -> nil","desc":"Cancels the pending or in progress geocoding request.","doc":"Cancels the pending or in progress geocoding request.\n\nParameters:\n * None\n\nReturns:\n * nil to facilitate garbage collection by assigning this result to the geocodeObject\n\nNotes:\n * This method has no effect if the geocoding process has already completed.","examples":[],"file":"extensions/location/liblocation.m","lineno":"706","name":"cancel","notes":[" * This method has no effect if the geocoding process has already completed."],"parameters":[" * None"],"returns":[" * nil to facilitate garbage collection by assigning this result to the geocodeObject"],"signature":"hs.location.geocoder:cancel() -> nil","stripped_doc":"","type":"Method"},"geocoding":{"def":"hs.location.geocoder:geocoding() -> boolean","desc":"Returns a boolean indicating whether or not the geocoding process is still active.","doc":"Returns a boolean indicating whether or not the geocoding process is still active.\n\nParameters:\n * None\n\nReturns:\n * a boolean indicating if the geocoding process is still active.  If false, then the callback function either has already been called or will be as soon as the main thread of Hammerspoon becomes idle again.","examples":[],"file":"extensions/location/liblocation.m","lineno":"689","name":"geocoding","notes":[],"parameters":[" * None"],"returns":[" * a boolean indicating if the geocoding process is still active.  If false, then the callback function either has already been called or will be as soon as the main thread of Hammerspoon becomes idle again."],"signature":"hs.location.geocoder:geocoding() -> boolean","stripped_doc":"","type":"Method"},"lookupAddress":{"def":"hs.location.geocoder.lookupAddress(address, fn) -> geocoderObject","desc":"Look up geocoding information for the specified address.","doc":"Look up geocoding information for the specified address.\n\nParameters:\n * `address` - a string containing address information as commonly expressed in your locale.\n * `fn`      - A callback function which should expect 2 arguments and return none:\n   * `state`  - a boolean indicating whether or not geocoding data was provided\n   * `result` - if `state` is true indicating that geocoding was successful, this argument will be a table containing one or more placemarkTables (as described in the module header) containing the geocoding data available for the location.  If `state` is false, this argument will be a string containing an error message describing the problem encountered.\n\nReturns:\n * a geocodingObject\n\nNotes:\n * This constructor requires internet access and the callback will be invoked with an error message if the internet is not currently accessible.\n * This constructor does not require Location Services to be enabled for Hammerspoon.","examples":[],"file":"extensions/location/liblocation.m","lineno":"593","name":"lookupAddress","notes":[" * This constructor requires internet access and the callback will be invoked with an error message if the internet is not currently accessible."," * This constructor does not require Location Services to be enabled for Hammerspoon."],"parameters":[" * `address` - a string containing address information as commonly expressed in your locale."," * `fn`      - A callback function which should expect 2 arguments and return none:\n   * `state`  - a boolean indicating whether or not geocoding data was provided\n   * `result` - if `state` is true indicating that geocoding was successful, this argument will be a table containing one or more placemarkTables (as described in the module header) containing the geocoding data available for the location.  If `state` is false, this argument will be a string containing an error message describing the problem encountered."],"returns":[" * a geocodingObject"],"signature":"hs.location.geocoder.lookupAddress(address, fn) -> geocoderObject","stripped_doc":"","type":"Constructor"},"lookupAddressNear":{"def":"hs.location.geocoder.lookupAddressNear(address, [regionTable], fn) -> geocoderObject","desc":"Look up geocoding information for the specified address.","doc":"Look up geocoding information for the specified address.\n\nParameters:\n * `address`     - a string containing address information as commonly expressed in your locale.\n * `regionTable` - an optional regionTable as described in the `hs.location` header used to prioritize the order of the results found.  If this parameter is not provided and Location Services is enabled for Hammerspoon, a region containing current location is used.\n * `fn`          - A callback function which should expect 2 arguments and return none:\n   * `state`  - a boolean indicating whether or not geocoding data was provided\n   * `result` - if `state` is true indicating that geocoding was successful, this argument will be a table containing one or more placemarkTables (as described in the module header) containing the geocoding data available for the location.  If `state` is false, this argument will be a string containing an error message describing the problem encountered.\n\nReturns:\n * a geocodingObject\n\nNotes:\n * This constructor requires internet access and the callback will be invoked with an error message if the internet is not currently accessible.\n * This constructor does not require Location Services to be enabled for Hammerspoon.\n * While a partial address can be given, the more information you provide, the more likely the results will be useful.  The `regionTable` only determines sort order if multiple entries are returned, it does not constrain the search.","examples":[],"file":"extensions/location/liblocation.m","lineno":"635","name":"lookupAddressNear","notes":[" * This constructor requires internet access and the callback will be invoked with an error message if the internet is not currently accessible."," * This constructor does not require Location Services to be enabled for Hammerspoon."," * While a partial address can be given, the more information you provide, the more likely the results will be useful.  The `regionTable` only determines sort order if multiple entries are returned, it does not constrain the search."],"parameters":[" * `address`     - a string containing address information as commonly expressed in your locale."," * `regionTable` - an optional regionTable as described in the `hs.location` header used to prioritize the order of the results found.  If this parameter is not provided and Location Services is enabled for Hammerspoon, a region containing current location is used."," * `fn`          - A callback function which should expect 2 arguments and return none:\n   * `state`  - a boolean indicating whether or not geocoding data was provided\n   * `result` - if `state` is true indicating that geocoding was successful, this argument will be a table containing one or more placemarkTables (as described in the module header) containing the geocoding data available for the location.  If `state` is false, this argument will be a string containing an error message describing the problem encountered."],"returns":[" * a geocodingObject"],"signature":"hs.location.geocoder.lookupAddressNear(address, [regionTable], fn) -> geocoderObject","stripped_doc":"","type":"Constructor"},"lookupLocation":{"def":"hs.location.geocoder.lookupLocation(locationTable, fn) -> geocoderObject","desc":"Look up geocoding information for the specified location.","doc":"Look up geocoding information for the specified location.\n\nParameters:\n * `locationTable` - a locationTable as described in the `hs.location` header specifying a location to obtain geocoding information about.\n * `fn`            - A callback function which should expect 2 arguments and return none:\n   * `state`  - a boolean indicating whether or not geocoding data was provided\n   * `result` - if `state` is true indicating that geocoding was successful, this argument will be a table containing one or more placemarkTables (as described in the module header) containing the geocoding data available for the location.  If `state` is false, this argument will be a string containing an error message describing the problem encountered.\n\nReturns:\n * a geocodingObject\n\nNotes:\n * This constructor requires internet access and the callback will be invoked with an error message if the internet is not currently accessible.\n * This constructor does not require Location Services to be enabled for Hammerspoon.","examples":[],"file":"extensions/location/liblocation.m","lineno":"551","name":"lookupLocation","notes":[" * This constructor requires internet access and the callback will be invoked with an error message if the internet is not currently accessible."," * This constructor does not require Location Services to be enabled for Hammerspoon."],"parameters":[" * `locationTable` - a locationTable as described in the `hs.location` header specifying a location to obtain geocoding information about."," * `fn`            - A callback function which should expect 2 arguments and return none:\n   * `state`  - a boolean indicating whether or not geocoding data was provided\n   * `result` - if `state` is true indicating that geocoding was successful, this argument will be a table containing one or more placemarkTables (as described in the module header) containing the geocoding data available for the location.  If `state` is false, this argument will be a string containing an error message describing the problem encountered."],"returns":[" * a geocodingObject"],"signature":"hs.location.geocoder.lookupLocation(locationTable, fn) -> geocoderObject","stripped_doc":"","type":"Constructor"}}