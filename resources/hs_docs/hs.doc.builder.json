{"genComments":{"def":"hs.doc.builder.genComments(path, [recurse]) -> table","desc":"Generates a documentation table for Hammerspoon modules or Spoon bundles from the source files located in the path(s) provided.","doc":"Generates a documentation table for Hammerspoon modules or Spoon bundles from the source files located in the path(s) provided.\n\nParameters:\n * where - a string specifying a single path, or a table containing multiple strings specifying paths where source files should be examined to generate the documentation table.\n * recurse - an optional boolean, default true, specifying whether or not files in sub-directories of the specified path should be examined for comment strings as well.\n\nReturns:\n * table - a table containing the documentation broken out into the key-value pairs used to generate documentation displayed by `hs.doc` and `hs.doc.hsdocs`.\n\nNotes:\n * Because Hammerspoon and all known currently available modules are coded in Objective-C and/or Lua, only files with the .m or .lua extension are examined in the provided path(s).  Please submit an issue (or pull request, if you modify this submodule yourself) at https://github.com/Hammerspoon if you need this to be changed for your addition.","examples":[],"file":"extensions/doc/doc_builder.lua","lineno":"37","name":"genComments","notes":[" * Because Hammerspoon and all known currently available modules are coded in Objective-C and/or Lua, only files with the .m or .lua extension are examined in the provided path(s).  Please submit an issue (or pull request, if you modify this submodule yourself) at https://github.com/Hammerspoon if you need this to be changed for your addition."],"parameters":[" * where - a string specifying a single path, or a table containing multiple strings specifying paths where source files should be examined to generate the documentation table."," * recurse - an optional boolean, default true, specifying whether or not files in sub-directories of the specified path should be examined for comment strings as well."],"returns":[" * table - a table containing the documentation broken out into the key-value pairs used to generate documentation displayed by `hs.doc` and `hs.doc.hsdocs`."],"signature":"hs.doc.builder.genComments(path, [recurse]) -> table","stripped_doc":"","type":"Function"},"genJSON":{"def":"hs.doc.builder.genJSON(source) -> string","desc":"Generates a JSON string representation of the documentation source specified. This is the format expected by `hs.doc` and `hs.doc.hsdoc` and is used to provide the built in documentation for Hammerspoon.","doc":"Generates a JSON string representation of the documentation source specified. This is the format expected by `hs.doc` and `hs.doc.hsdoc` and is used to provide the built in documentation for Hammerspoon.\n\nParameters:\n * source - the source to generate the JSON string for.  If this is provided as a string, it is passed to [hs.doc.builder.genComments](#genComments) and the result is used.  If it is a table, then it is assumed to have already been generated by a call to [hs.doc.builder.genComments](#genComments).\n\nReturns:\n * string - the JSON string representation of the documentation\n\nNotes:\n * If you have installed the `hs` command line tool (see `hs.ipc`), you can use the following to generate the `docs.json` file that is used to provide documentation for Hammerspoon Spoon bundles: `hs -c \"hs.doc.builder.genJSON(\\\"$(pwd)\\\")\" > docs.json`\n * You can also use this to generate documentation for any third-party-modules you build, but you will have to register the documentation with `hs.doc.registerJSONFile` yourself -- it is not automatically loaded for you like it is for Spoons.","examples":[],"file":"extensions/doc/doc_builder.lua","lineno":"194","name":"genJSON","notes":[" * If you have installed the `hs` command line tool (see `hs.ipc`), you can use the following to generate the `docs.json` file that is used to provide documentation for Hammerspoon Spoon bundles: `hs -c \"hs.doc.builder.genJSON(\\\"$(pwd)\\\")\" > docs.json`"," * You can also use this to generate documentation for any third-party-modules you build, but you will have to register the documentation with `hs.doc.registerJSONFile` yourself -- it is not automatically loaded for you like it is for Spoons."],"parameters":[" * source - the source to generate the JSON string for.  If this is provided as a string, it is passed to [hs.doc.builder.genComments](#genComments) and the result is used.  If it is a table, then it is assumed to have already been generated by a call to [hs.doc.builder.genComments](#genComments)."],"returns":[" * string - the JSON string representation of the documentation"],"signature":"hs.doc.builder.genJSON(source) -> string","stripped_doc":"","type":"Function"},"genSQL":{"def":"hs.doc.builder.genSQL(source) -> string","desc":"Generates the SQL commands required for creating the search index when creating a docset of the documentation.","doc":"Generates the SQL commands required for creating the search index when creating a docset of the documentation.\n\nParameters:\n * source - the source to generate the SQL commands for.  If this is provided as a string, it is passed to [hs.doc.builder.genComments](#genComments) and the result is used.  If it is a table, then it is assumed to have already been generated by a call to [hs.doc.builder.genComments](#genComments).\n\nReturns:\n * string - the relevant SQL commands as a string","examples":[],"file":"extensions/doc/doc_builder.lua","lineno":"170","name":"genSQL","notes":[],"parameters":[" * source - the source to generate the SQL commands for.  If this is provided as a string, it is passed to [hs.doc.builder.genComments](#genComments) and the result is used.  If it is a table, then it is assumed to have already been generated by a call to [hs.doc.builder.genComments](#genComments)."],"returns":[" * string - the relevant SQL commands as a string"],"signature":"hs.doc.builder.genSQL(source) -> string","stripped_doc":"","type":"Function"}}