{"apply":{"def":"hs.layout.apply(table[, windowTitleComparator])","desc":"Applies a layout to applications/windows","doc":"Applies a layout to applications/windows\n\nParameters:\n * table - A table describing your desired layout. Each element in the table should be another table describing a set of windows to match, and their desired size/position. The fields in each of these tables are:\n  * A string containing an application name, or an `hs.application` object, or nil\n  * A string containing a window title, or an `hs.window` object, or a function, or nil\n  * A string containing a screen name, or an `hs.screen` object, or a function that accepts no parameters and returns an `hs.screen` object, or nil to select the first available screen\n  * A Unit rect, or a function which is called for each window and returns a unit rect (see `hs.window.moveToUnit()`). The function should accept one parameter, which is the window object.\n  * A Frame rect, or a function which is called for each window and returns a frame rect (see `hs.screen:frame()`). The function should accept one parameter, which is the window object.\n  * A Full-frame rect, of a function which is called for each window and returns a full-frame rect (see `hs.screen:fullFrame()`). The function should accept one parameter, which is the window object.\n * windowTitleComparator - (optional) Function to use for window title comparison. It is called with two string arguments (below) and its return value is evaluated as a boolean. If no comparator is provided, the '==' operator is used\n  * windowTitle: The `:title()` of the window object being examined\n  * layoutWindowTitle: The window title string (second field) specified in each element of the layout table\n  * Optionally a final element, the key \"options\" and a table value that can contain the following keys:\n    * `absolute_x`: A boolean indicating that the x value in a frame rect above, is an absolute co-ordinate (ie useful for negative absolute co-ordinates)\n    * `absolute_y`: A boolean indicating that the y value in a frame rect above, is an absolute co-ordinate (ie useful for negative absolute co-ordinates)\n\nReturns:\n * None\n\nNotes:\n * If the application name argument is nil, window titles will be matched regardless of which app they belong to\n * If the window title argument is nil, all windows of the specified application will be matched\n * If the window title argument is a function, the function will be called with the application name argument (which may be nil), and should return a table of `hs.window` objects (even if there is only one window it must be in a table)\n * You can specify both application name and window title if you want to match only one window of a particular application\n * If you specify neither application name or window title, no windows will be matched :)\n * Monitor name is a string, as found in `hs.screen:name()` or `hs.screen:getUUID()`. You can also pass an `hs.screen` object, or a function that returns an `hs.screen` object. If you pass nil, the first screen will be selected\n * The final three arguments use `hs.geometry.rect()` objects to describe the desired position and size of matched windows:\n   * Unit rect will be passed to `hs.window.moveToUnit()`\n   * Frame rect will be passed to `hs.window.setFrame()` (including menubar and dock)\n   * Full-frame rect will be passed to `hs.window.setFrame()` (ignoring menubar and dock)\n * If either the x or y components of frame/full-frame rect are negative, they will be applied as offsets against the opposite edge of the screen (e.g. If x is -100 then the left edge of the window will be 100 pixels from the right edge of the screen)\n * Only one of the rect arguments will apply to any matched windows. If you specify more than one, the first will win\n * An example usage:\n\n    ```lua\n      layout1 = {\n        {\"Mail\", nil, \"Color LCD\", hs.layout.maximized, nil, nil},\n        {\"Safari\", nil, \"Thunderbolt Display\", hs.layout.maximized, nil, nil},\n        {\"iTunes\", \"iTunes\", \"Color LCD\", hs.layout.maximized, nil, nil},\n        {\"iTunes\", \"MiniPlayer\", \"Color LCD\", nil, nil, hs.geometry.rect(0, -48, 400, 48)},\n      }```\n * An example of a function that works well as a `windowTitleComparator` is the Lua built-in `string.match`, which uses Lua Patterns to match strings","examples":[],"file":"extensions/layout/layout.lua","lineno":"69","name":"apply","notes":[" * If the application name argument is nil, window titles will be matched regardless of which app they belong to"," * If the window title argument is nil, all windows of the specified application will be matched"," * If the window title argument is a function, the function will be called with the application name argument (which may be nil), and should return a table of `hs.window` objects (even if there is only one window it must be in a table)"," * You can specify both application name and window title if you want to match only one window of a particular application"," * If you specify neither application name or window title, no windows will be matched :)"," * Monitor name is a string, as found in `hs.screen:name()` or `hs.screen:getUUID()`. You can also pass an `hs.screen` object, or a function that returns an `hs.screen` object. If you pass nil, the first screen will be selected"," * The final three arguments use `hs.geometry.rect()` objects to describe the desired position and size of matched windows:","   * Unit rect will be passed to `hs.window.moveToUnit()`","   * Frame rect will be passed to `hs.window.setFrame()` (including menubar and dock)","   * Full-frame rect will be passed to `hs.window.setFrame()` (ignoring menubar and dock)"," * If either the x or y components of frame/full-frame rect are negative, they will be applied as offsets against the opposite edge of the screen (e.g. If x is -100 then the left edge of the window will be 100 pixels from the right edge of the screen)"," * Only one of the rect arguments will apply to any matched windows. If you specify more than one, the first will win"," * An example usage:","","    ```lua","      layout1 = {","        {\"Mail\", nil, \"Color LCD\", hs.layout.maximized, nil, nil},","        {\"Safari\", nil, \"Thunderbolt Display\", hs.layout.maximized, nil, nil},","        {\"iTunes\", \"iTunes\", \"Color LCD\", hs.layout.maximized, nil, nil},","        {\"iTunes\", \"MiniPlayer\", \"Color LCD\", nil, nil, hs.geometry.rect(0, -48, 400, 48)},","      }```"," * An example of a function that works well as a `windowTitleComparator` is the Lua built-in `string.match`, which uses Lua Patterns to match strings"],"parameters":[" * table - A table describing your desired layout. Each element in the table should be another table describing a set of windows to match, and their desired size/position. The fields in each of these tables are:\n   * A string containing an application name, or an `hs.application` object, or nil\n   * A string containing a window title, or an `hs.window` object, or a function, or nil\n   * A string containing a screen name, or an `hs.screen` object, or a function that accepts no parameters and returns an `hs.screen` object, or nil to select the first available screen\n   * A Unit rect, or a function which is called for each window and returns a unit rect (see `hs.window.moveToUnit()`). The function should accept one parameter, which is the window object.\n   * A Frame rect, or a function which is called for each window and returns a frame rect (see `hs.screen:frame()`). The function should accept one parameter, which is the window object.\n   * A Full-frame rect, of a function which is called for each window and returns a full-frame rect (see `hs.screen:fullFrame()`). The function should accept one parameter, which is the window object."," * windowTitleComparator - (optional) Function to use for window title comparison. It is called with two string arguments (below) and its return value is evaluated as a boolean. If no comparator is provided, the '==' operator is used\n   * windowTitle: The `:title()` of the window object being examined\n   * layoutWindowTitle: The window title string (second field) specified in each element of the layout table\n   * Optionally a final element, the key \"options\" and a table value that can contain the following keys: * `absolute_x`: A boolean indicating that the x value in a frame rect above, is an absolute co-ordinate (ie useful for negative absolute co-ordinates) * `absolute_y`: A boolean indicating that the y value in a frame rect above, is an absolute co-ordinate (ie useful for negative absolute co-ordinates)"],"returns":[" * None"],"signature":"hs.layout.apply(table[, windowTitleComparator])","stripped_doc":"    ```lua\n      layout1 = {\n        {\"Mail\", nil, \"Color LCD\", hs.layout.maximized, nil, nil},\n        {\"Safari\", nil, \"Thunderbolt Display\", hs.layout.maximized, nil, nil},\n        {\"iTunes\", \"iTunes\", \"Color LCD\", hs.layout.maximized, nil, nil},\n        {\"iTunes\", \"MiniPlayer\", \"Color LCD\", nil, nil, hs.geometry.rect(0, -48, 400, 48)},\n      }```\n * An example of a function that works well as a `windowTitleComparator` is the Lua built-in `string.match`, which uses Lua Patterns to match strings","type":"Function"},"left25":{"def":"hs.layout.left25","desc":"A unit rect which will make a window occupy the left 25% of a screen","doc":"A unit rect which will make a window occupy the left 25% of a screen","file":"extensions/layout/layout.lua","lineno":"14","name":"left25","signature":"hs.layout.left25","stripped_doc":"","type":"Constant"},"left30":{"def":"hs.layout.left30","desc":"A unit rect which will make a window occupy the left 30% of a screen","doc":"A unit rect which will make a window occupy the left 30% of a screen","file":"extensions/layout/layout.lua","lineno":"19","name":"left30","signature":"hs.layout.left30","stripped_doc":"","type":"Constant"},"left50":{"def":"hs.layout.left50","desc":"A unit rect which will make a window occupy the left 50% of a screen","doc":"A unit rect which will make a window occupy the left 50% of a screen","file":"extensions/layout/layout.lua","lineno":"24","name":"left50","signature":"hs.layout.left50","stripped_doc":"","type":"Constant"},"left70":{"def":"hs.layout.left70","desc":"A unit rect which will make a window occupy the left 70% of a screen","doc":"A unit rect which will make a window occupy the left 70% of a screen","file":"extensions/layout/layout.lua","lineno":"29","name":"left70","signature":"hs.layout.left70","stripped_doc":"","type":"Constant"},"left75":{"def":"hs.layout.left75","desc":"A unit rect which will make a window occupy the left 75% of a screen","doc":"A unit rect which will make a window occupy the left 75% of a screen","file":"extensions/layout/layout.lua","lineno":"34","name":"left75","signature":"hs.layout.left75","stripped_doc":"","type":"Constant"},"maximized":{"def":"hs.layout.maximized","desc":"A unit rect which will make a window occupy all of a screen","doc":"A unit rect which will make a window occupy all of a screen","file":"extensions/layout/layout.lua","lineno":"64","name":"maximized","signature":"hs.layout.maximized","stripped_doc":"","type":"Constant"},"right25":{"def":"hs.layout.right25","desc":"A unit rect which will make a window occupy the right 25% of a screen","doc":"A unit rect which will make a window occupy the right 25% of a screen","file":"extensions/layout/layout.lua","lineno":"39","name":"right25","signature":"hs.layout.right25","stripped_doc":"","type":"Constant"},"right30":{"def":"hs.layout.right30","desc":"A unit rect which will make a window occupy the right 30% of a screen","doc":"A unit rect which will make a window occupy the right 30% of a screen","file":"extensions/layout/layout.lua","lineno":"44","name":"right30","signature":"hs.layout.right30","stripped_doc":"","type":"Constant"},"right50":{"def":"hs.layout.right50","desc":"A unit rect which will make a window occupy the right 50% of a screen","doc":"A unit rect which will make a window occupy the right 50% of a screen","file":"extensions/layout/layout.lua","lineno":"49","name":"right50","signature":"hs.layout.right50","stripped_doc":"","type":"Constant"},"right70":{"def":"hs.layout.right70","desc":"A unit rect which will make a window occupy the right 70% of a screen","doc":"A unit rect which will make a window occupy the right 70% of a screen","file":"extensions/layout/layout.lua","lineno":"54","name":"right70","signature":"hs.layout.right70","stripped_doc":"","type":"Constant"},"right75":{"def":"hs.layout.right75","desc":"A unit rect which will make a window occupy the right 75% of a screen","doc":"A unit rect which will make a window occupy the right 75% of a screen","file":"extensions/layout/layout.lua","lineno":"59","name":"right75","signature":"hs.layout.right75","stripped_doc":"","type":"Constant"}}