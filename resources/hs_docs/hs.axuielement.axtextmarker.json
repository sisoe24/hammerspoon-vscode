{"_functionCheck":{"def":"hs.axuielement.axtextmarker._functionCheck() -> table","desc":"Returns a table of the AXTextMarker and AXTextMarkerRange functions that have been discovered and are used within this module.","doc":"Returns a table of the AXTextMarker and AXTextMarkerRange functions that have been discovered and are used within this module.\n\nParameters:\n * None\n\nReturns:\n * a table with key-value pairs where the keys correspond to the undocumented Core Foundation functions required by this module to support AXTextMarker and AXTextMarkerRange and the value will be a boolean indicating whether the function exists in the currently loaded frameworks.\n\nNotes:\n * the functions are defined within the HIServices framework which is part of the ApplicationServices framework, so it is expected that the necessary functions will always be available; however, if you ever receive an error message from a function or method within this submodule of the form \"CF function AX... undefined\", please see the submodule heading documentation for a description of the information, including that which this function provides, that should be included in any error report you submit.\n * This is for debugging purposes and is not expected to be used often.","examples":[],"file":"extensions/axuielement/axtextmarker.m","lineno":"143","name":"_functionCheck","notes":[" * the functions are defined within the HIServices framework which is part of the ApplicationServices framework, so it is expected that the necessary functions will always be available; however, if you ever receive an error message from a function or method within this submodule of the form \"CF function AX... undefined\", please see the submodule heading documentation for a description of the information, including that which this function provides, that should be included in any error report you submit."," * This is for debugging purposes and is not expected to be used often."],"parameters":[" * None"],"returns":[" * a table with key-value pairs where the keys correspond to the undocumented Core Foundation functions required by this module to support AXTextMarker and AXTextMarkerRange and the value will be a boolean indicating whether the function exists in the currently loaded frameworks."],"signature":"hs.axuielement.axtextmarker._functionCheck() -> table","stripped_doc":"","type":"Function"},"bytes":{"def":"hs.axuielement.axtextmarker:bytes() -> string | nil, errorString","desc":"Returns a string containing the opaque binary data contained within the axTextMarkerObject","doc":"Returns a string containing the opaque binary data contained within the axTextMarkerObject\n\nParameters:\n * None\n\nReturns:\n *  a string containing the opaque binary data contained within the axTextMarkerObject\n\nNotes:\n * the string will likely contain invalid UTF8 code sequences or unprintable ascii values; to see the data in decimal or hexadecimal form you can use:\n    string.byte(hs.axuielement.axtextmarker:bytes(), 1, hs.axuielement.axtextmarker:length())\n    -- or\n    hs.utf8.hexDump(hs.axuielement.axtextmarker:bytes())\n * As the data is application specific, it is unlikely that you will use this method often; it is included primarily for testing and debugging purposes.","examples":[],"file":"extensions/axuielement/axtextmarker.m","lineno":"174","name":"bytes","notes":[" * the string will likely contain invalid UTF8 code sequences or unprintable ascii values; to see the data in decimal or hexadecimal form you can use:","    string.byte(hs.axuielement.axtextmarker:bytes(), 1, hs.axuielement.axtextmarker:length())","    -- or","    hs.utf8.hexDump(hs.axuielement.axtextmarker:bytes())"," * As the data is application specific, it is unlikely that you will use this method often; it is included primarily for testing and debugging purposes."],"parameters":[" * None"],"returns":[" *  a string containing the opaque binary data contained within the axTextMarkerObject"],"signature":"hs.axuielement.axtextmarker:bytes() -> string | nil, errorString","stripped_doc":"","type":"Function"},"endMarker":{"def":"hs.axuielement.axtextmarker:endMarker() -> axTextMarkerObject | nil, errorString","desc":"Returns the ending marker for an axTextMarkerRangeObject","doc":"Returns the ending marker for an axTextMarkerRangeObject\n\nParameters:\n * None\n\nReturns:\n *  the ending marker for an axTextMarkerRangeObject","examples":[],"file":"extensions/axuielement/axtextmarker.m","lineno":"248","name":"endMarker","notes":[],"parameters":[" * None"],"returns":[" *  the ending marker for an axTextMarkerRangeObject"],"signature":"hs.axuielement.axtextmarker:endMarker() -> axTextMarkerObject | nil, errorString","stripped_doc":"","type":"Function"},"length":{"def":"hs.axuielement.axtextmarker:length() -> integer | nil, errorString","desc":"Returns an integer specifying the number of bytes in the data portion of the axTextMarkerObject.","doc":"Returns an integer specifying the number of bytes in the data portion of the axTextMarkerObject.\n\nParameters:\n * None\n\nReturns:\n *  an integer specifying the number of bytes in the data portion of the axTextMarkerObject\n\nNotes:\n * As the data is application specific, it is unlikely that you will use this method often; it is included primarily for testing and debugging purposes.","examples":[],"file":"extensions/axuielement/axtextmarker.m","lineno":"200","name":"length","notes":[" * As the data is application specific, it is unlikely that you will use this method often; it is included primarily for testing and debugging purposes."],"parameters":[" * None"],"returns":[" *  an integer specifying the number of bytes in the data portion of the axTextMarkerObject"],"signature":"hs.axuielement.axtextmarker:length() -> integer | nil, errorString","stripped_doc":"","type":"Function"},"newMarker":{"def":"hs.axuielement.axtextmarker.newMarker(string) -> axTextMarkerObject | nil, errorString","desc":"Creates a new AXTextMarker object from the string of binary data provided","doc":"Creates a new AXTextMarker object from the string of binary data provided\n\nParameters:\n * `string` - a string containing 1 or more bytes of data for the AXTextMarker object\n\nReturns:\n * a new axTextMarkerObject or nil and a string description if there was an error\n\nNotes:\n * This function is included primarily for testing and debugging purposes -- in general you will probably never use this constructor; AXTextMarker objects appear to be mostly application dependant and have no meaning external to the application from which it was created.","examples":[],"file":"extensions/axuielement/axtextmarker.m","lineno":"43","name":"newMarker","notes":[" * This function is included primarily for testing and debugging purposes -- in general you will probably never use this constructor; AXTextMarker objects appear to be mostly application dependant and have no meaning external to the application from which it was created."],"parameters":[" * `string` - a string containing 1 or more bytes of data for the AXTextMarker object"],"returns":[" * a new axTextMarkerObject or nil and a string description if there was an error"],"signature":"hs.axuielement.axtextmarker.newMarker(string) -> axTextMarkerObject | nil, errorString","stripped_doc":"","type":"Constructor"},"newRange":{"def":"hs.axuielement.axtextmarker.newRange(startMarker, endMarker) -> axTextMarkerRangeObject | nil, errorString","desc":"Creates a new AXTextMarkerRange object from the start and end markers provided","doc":"Creates a new AXTextMarkerRange object from the start and end markers provided\n\nParameters:\n * `startMarker` - an axTextMarkerObject representing the start of the range to be created\n * `endMarker`   - an axTextMarkerObject representing the end of the range to be created\n\nReturns:\n * a new axTextMarkerRangeObject or nil and a string description if there was an error\n\nNotes:\n * this constructor can be used to create a range from axTextMarkerObjects obtained from an application to specify a new range for a parameterized attribute. As a simple example (it is hoped that more will be added to the Hammerspoon wiki shortly):\n    ```lua\n    s = hs.axuielement.applicationElement(hs.application(\"Safari\"))\n    -- for a window displaying the DuckDuckGo main search page, this gets the\n    -- primary display area. Other pages may vary and you should build your\n    -- object as necessary for your target.\n    c = s(\"AXMainWindow\")(\"AXSections\")[1].SectionObject[1][1]\n    start = c(\"AXStartTextMarker\") -- get the text marker for the start of this element\n    ending = c(\"AXNextLineEndTextMarkerForTextMarker\", start) -- get the next end of line marker\n    print(c(\"AXStringForTextMarkerRange\", hs.axuielement.axtextmarker.newRange(start, ending)))\n    -- outputs \"Privacy, simplified.\" to the Hammerspoon console```\n * The specific attributes and parameterized attributes supported by a given application differ and can be discovered with the `hs.axuielement:getAttributeNames` and `hs.axuielement:getParameterizedAttributeNames` methods.","examples":[],"file":"extensions/axuielement/axtextmarker.m","lineno":"73","name":"newRange","notes":[" * this constructor can be used to create a range from axTextMarkerObjects obtained from an application to specify a new range for a parameterized attribute. As a simple example (it is hoped that more will be added to the Hammerspoon wiki shortly):","    ```lua","    s = hs.axuielement.applicationElement(hs.application(\"Safari\"))","    -- for a window displaying the DuckDuckGo main search page, this gets the","    -- primary display area. Other pages may vary and you should build your","    -- object as necessary for your target.","    c = s(\"AXMainWindow\")(\"AXSections\")[1].SectionObject[1][1]","    start = c(\"AXStartTextMarker\") -- get the text marker for the start of this element","    ending = c(\"AXNextLineEndTextMarkerForTextMarker\", start) -- get the next end of line marker","    print(c(\"AXStringForTextMarkerRange\", hs.axuielement.axtextmarker.newRange(start, ending)))","    -- outputs \"Privacy, simplified.\" to the Hammerspoon console```"," * The specific attributes and parameterized attributes supported by a given application differ and can be discovered with the `hs.axuielement:getAttributeNames` and `hs.axuielement:getParameterizedAttributeNames` methods."],"parameters":[" * `startMarker` - an axTextMarkerObject representing the start of the range to be created"," * `endMarker`   - an axTextMarkerObject representing the end of the range to be created"],"returns":[" * a new axTextMarkerRangeObject or nil and a string description if there was an error"],"signature":"hs.axuielement.axtextmarker.newRange(startMarker, endMarker) -> axTextMarkerRangeObject | nil, errorString","stripped_doc":"","type":"Constructor"},"startMarker":{"def":"hs.axuielement.axtextmarker:startMarker() -> axTextMarkerObject | nil, errorString","desc":"Returns the starting marker for an axTextMarkerRangeObject","doc":"Returns the starting marker for an axTextMarkerRangeObject\n\nParameters:\n * None\n\nReturns:\n *  the starting marker for an axTextMarkerRangeObject","examples":[],"file":"extensions/axuielement/axtextmarker.m","lineno":"221","name":"startMarker","notes":[],"parameters":[" * None"],"returns":[" *  the starting marker for an axTextMarkerRangeObject"],"signature":"hs.axuielement.axtextmarker:startMarker() -> axTextMarkerObject | nil, errorString","stripped_doc":"","type":"Function"}}
