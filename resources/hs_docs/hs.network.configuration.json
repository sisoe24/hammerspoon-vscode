{"computerName":{"def":"hs.network.configuration:computerName() -> name, encoding","desc":"Returns the name of the computeras specified in the Sharing Preferences, and its string encoding","doc":"Returns the name of the computeras specified in the Sharing Preferences, and its string encoding\n\nParameters:\n * None\n\nReturns:\n * name     - the computer name\n * encoding - the encoding type\n\nNotes:\n * You can also retrieve this information as key-value pairs with `hs.network.configuration:contents(\"Setup:/System\")`","examples":[],"file":"extensions/network/libnetwork_configuration.m","lineno":"194","name":"computerName","notes":[" * You can also retrieve this information as key-value pairs with `hs.network.configuration:contents(\"Setup:/System\")`"],"parameters":[" * None"],"returns":[" * name     - the computer name"," * encoding - the encoding type"],"signature":"hs.network.configuration:computerName() -> name, encoding","stripped_doc":"","type":"Method"},"consoleUser":{"def":"hs.network.configuration:consoleUser() -> name, uid, gid","desc":"Returns the name of the user currently logged into the system, including the users id and primary group id","doc":"Returns the name of the user currently logged into the system, including the users id and primary group id\n\nParameters:\n * None\n\nReturns:\n * name - the user name\n * uid  - the user ID for the user\n * gid  - the user's primary group ID\n\nNotes:\n * You can also retrieve this information as key-value pairs with `hs.network.configuration:contents(\"State:/Users/ConsoleUser\")`","examples":[],"file":"extensions/network/libnetwork_configuration.m","lineno":"245","name":"consoleUser","notes":[" * You can also retrieve this information as key-value pairs with `hs.network.configuration:contents(\"State:/Users/ConsoleUser\")`"],"parameters":[" * None"],"returns":[" * name - the user name"," * uid  - the user ID for the user"," * gid  - the user's primary group ID"],"signature":"hs.network.configuration:consoleUser() -> name, uid, gid","stripped_doc":"","type":"Method"},"contents":{"def":"hs.network.configuration:contents([keys], [pattern]) -> table","desc":"Return the contents of the store for the specified keys or keys matching the specified pattern(s)","doc":"Return the contents of the store for the specified keys or keys matching the specified pattern(s)\n\nParameters:\n * keys    - a string or table of strings containing the keys or patterns of keys, if `pattern` is true.  Defaults to all keys.\n * pattern - a boolean indicating wether or not the string(s) provided are to be considered regular expression patterns (true) or literal strings to match (false).  Defaults to false.\n\nReturns:\n * a table of key-value pairs from the dynamic store which match the specified keys or key patterns.\n\nNotes:\n * if no parameters are provided, then all key-value pairs in the dynamic store are returned.","examples":[],"file":"extensions/network/libnetwork_configuration.m","lineno":"86","name":"contents","notes":[" * if no parameters are provided, then all key-value pairs in the dynamic store are returned."],"parameters":[" * keys    - a string or table of strings containing the keys or patterns of keys, if `pattern` is true.  Defaults to all keys."," * pattern - a boolean indicating wether or not the string(s) provided are to be considered regular expression patterns (true) or literal strings to match (false).  Defaults to false."],"returns":[" * a table of key-value pairs from the dynamic store which match the specified keys or key patterns."],"signature":"hs.network.configuration:contents([keys], [pattern]) -> table","stripped_doc":"","type":"Method"},"dhcpInfo":{"def":"hs.network.configuration:dhcpInfo([serviceID]) -> table","desc":"Return the DHCP information for the specified service or the primary service if no parameter is specified.","doc":"Return the DHCP information for the specified service or the primary service if no parameter is specified.\n\nParameters:\n * serviceID - an optional string contining the service ID of the interface for which to return DHCP info.  If this parameter is not provided, then the default (primary) service is queried.\n\nReturns:\n * a table containing DHCP information including lease time and DHCP options\n\nNotes:\n * a list of possible Service ID's can be retrieved with `hs.network.configuration:contents(\"Setup:/Network/Global/IPv4\")`\n * generates an error if the service ID is invalid or was not assigned an IP address via DHCP.","examples":[],"file":"extensions/network/libnetwork_configuration.m","lineno":"161","name":"dhcpInfo","notes":[" * a list of possible Service ID's can be retrieved with `hs.network.configuration:contents(\"Setup:/Network/Global/IPv4\")`"," * generates an error if the service ID is invalid or was not assigned an IP address via DHCP."],"parameters":[" * serviceID - an optional string contining the service ID of the interface for which to return DHCP info.  If this parameter is not provided, then the default (primary) service is queried."],"returns":[" * a table containing DHCP information including lease time and DHCP options"],"signature":"hs.network.configuration:dhcpInfo([serviceID]) -> table","stripped_doc":"","type":"Method"},"hostname":{"def":"hs.network.configuration:hostname() -> name","desc":"Returns the current local host name for the computer","doc":"Returns the current local host name for the computer\n\nParameters:\n * None\n\nReturns:\n * name - the local host name\n\nNotes:\n * You can also retrieve this information as key-value pairs with `hs.network.configuration:contents(\"Setup:/System\")`","examples":[],"file":"extensions/network/libnetwork_configuration.m","lineno":"278","name":"hostname","notes":[" * You can also retrieve this information as key-value pairs with `hs.network.configuration:contents(\"Setup:/System\")`"],"parameters":[" * None"],"returns":[" * name - the local host name"],"signature":"hs.network.configuration:hostname() -> name","stripped_doc":"","type":"Method"},"keys":{"def":"hs.network.configuration:keys([keypattern]) -> table","desc":"Return the keys in the dynamic store which match the specified pattern","doc":"Return the keys in the dynamic store which match the specified pattern\n\nParameters:\n * keypattern - a regular expression specifying which keys to return (defaults to \".*\", or all keys)\n\nReturns:\n * a table of keys from the dynamic store.","examples":[],"file":"extensions/network/libnetwork_configuration.m","lineno":"136","name":"keys","notes":[],"parameters":[" * keypattern - a regular expression specifying which keys to return (defaults to \".*\", or all keys)"],"returns":[" * a table of keys from the dynamic store."],"signature":"hs.network.configuration:keys([keypattern]) -> table","stripped_doc":"","type":"Method"},"location":{"def":"hs.network.configuration:location() -> location","desc":"Returns the current location identifier","doc":"Returns the current location identifier\n\nParameters:\n * None\n\nReturns:\n * location - the UUID for the currently active network location\n\nNotes:\n * You can also retrieve this information as key-value pairs with `hs.network.configuration:contents(\"Setup:\")`\n * If you have different locations defined in the Network preferences panel, this can be used to determine the currently active location.","examples":[],"file":"extensions/network/libnetwork_configuration.m","lineno":"397","name":"location","notes":[" * You can also retrieve this information as key-value pairs with `hs.network.configuration:contents(\"Setup:\")`"," * If you have different locations defined in the Network preferences panel, this can be used to determine the currently active location."],"parameters":[" * None"],"returns":[" * location - the UUID for the currently active network location"],"signature":"hs.network.configuration:location() -> location","stripped_doc":"","type":"Method"},"locations":{"def":"hs.network.configuration:locations() -> table","desc":"Returns all configured locations","doc":"Returns all configured locations\n\nParameters:\n * None\n\nReturns:\n * a table of key-value pairs mapping location UUIDs to their names\n","examples":[],"file":"extensions/network/libnetwork_configuration.m","lineno":"425","name":"locations","notes":[],"parameters":[" * None"],"returns":[" * a table of key-value pairs mapping location UUIDs to their names"],"signature":"hs.network.configuration:locations() -> table","stripped_doc":"","type":"Method"},"monitorKeys":{"def":"hs.network.configuration:monitorKeys([keys], [pattern]) -> storeObject","desc":"Specify the key(s) or key pattern(s) to monitor for changes.","doc":"Specify the key(s) or key pattern(s) to monitor for changes.\n\nParameters:\n * keys    - a string or table of strings containing the keys or patterns of keys, if `pattern` is true.  Defaults to all keys.\n * pattern - a boolean indicating wether or not the string(s) provided are to be considered regular expression patterns (true) or literal strings to match (false).  Defaults to false.\n\nReturns:\n * the store Object\n\nNotes:\n * if no parameters are provided, then all key-value pairs in the dynamic store are monitored for changes.","examples":[],"file":"extensions/network/libnetwork_configuration.m","lineno":"572","name":"monitorKeys","notes":[" * if no parameters are provided, then all key-value pairs in the dynamic store are monitored for changes."],"parameters":[" * keys    - a string or table of strings containing the keys or patterns of keys, if `pattern` is true.  Defaults to all keys."," * pattern - a boolean indicating wether or not the string(s) provided are to be considered regular expression patterns (true) or literal strings to match (false).  Defaults to false."],"returns":[" * the store Object"],"signature":"hs.network.configuration:monitorKeys([keys], [pattern]) -> storeObject","stripped_doc":"","type":"Method"},"open":{"def":"hs.network.configuration.open() -> storeObject","desc":"Opens a session to the dynamic store maintained by the System Configuration server.","doc":"Opens a session to the dynamic store maintained by the System Configuration server.\n\nParameters:\n * None\n\nReturns:\n * the storeObject","examples":[],"file":"extensions/network/libnetwork_configuration.m","lineno":"48","name":"open","notes":[],"parameters":[" * None"],"returns":[" * the storeObject"],"signature":"hs.network.configuration.open() -> storeObject","stripped_doc":"","type":"Constructor"},"proxies":{"def":"hs.network.configuration:proxies() -> table","desc":"Returns information about the currently active proxies, if any","doc":"Returns information about the currently active proxies, if any\n\nParameters:\n * None\n\nReturns:\n * a table of key-value pairs describing the current proxies in effect, both globally, and scoped to specific interfaces.\n\nNotes:\n * You can also retrieve this information as key-value pairs with `hs.network.configuration:contents(\"State:/Network/Global/Proxies\")`","examples":[],"file":"extensions/network/libnetwork_configuration.m","lineno":"461","name":"proxies","notes":[" * You can also retrieve this information as key-value pairs with `hs.network.configuration:contents(\"State:/Network/Global/Proxies\")`"],"parameters":[" * None"],"returns":[" * a table of key-value pairs describing the current proxies in effect, both globally, and scoped to specific interfaces."],"signature":"hs.network.configuration:proxies() -> table","stripped_doc":"","type":"Method"},"setCallback":{"def":"hs.network.configuration:setCallback(function) -> storeObject","desc":"Set or remove the callback function for a store object","doc":"Set or remove the callback function for a store object\n\nParameters:\n * a function or nil to set or remove the store object callback function\n\nReturns:\n * the store object\n\nNotes:\n * The callback function will be invoked each time a monitored key changes value and the callback function should accept two parameters: the storeObject itself, and an array of the keys which contain values that have changed.\n * This method just sets the callback function.  You specify which keys to watch with [hs.network.configuration:monitorKeys](#monitorKeys) and start or stop the watcher with [hs.network.configuration:start](#start) or [hs.network.configuartion:stop](#stop)","examples":[],"file":"extensions/network/libnetwork_configuration.m","lineno":"488","name":"setCallback","notes":[" * The callback function will be invoked each time a monitored key changes value and the callback function should accept two parameters: the storeObject itself, and an array of the keys which contain values that have changed."," * This method just sets the callback function.  You specify which keys to watch with [hs.network.configuration:monitorKeys](#monitorKeys) and start or stop the watcher with [hs.network.configuration:start](#start) or [hs.network.configuartion:stop](#stop)"],"parameters":[" * a function or nil to set or remove the store object callback function"],"returns":[" * the store object"],"signature":"hs.network.configuration:setCallback(function) -> storeObject","stripped_doc":"","type":"Method"},"setLocation":{"def":"hs.network.configuration:setLocation(location) -> boolean","desc":"Switches to a new location","doc":"Switches to a new location\n\nParameters:\n * location - string containing name or UUID of new location\n\nReturns:\n * bool - true if the location was successfully changed, false if there was an error","examples":[],"file":"extensions/network/libnetwork_configuration.m","lineno":"316","name":"setLocation","notes":[],"parameters":[" * location - string containing name or UUID of new location"],"returns":[" * bool - true if the location was successfully changed, false if there was an error"],"signature":"hs.network.configuration:setLocation(location) -> boolean","stripped_doc":"","type":"Method"},"start":{"def":"hs.network.configuration:start() -> storeObject","desc":"Starts watching the store object for changes to the monitored keys and invokes the callback function (if any) when a change occurs.","doc":"Starts watching the store object for changes to the monitored keys and invokes the callback function (if any) when a change occurs.\n\nParameters:\n * None\n\nReturns:\n * the store object\n\nNotes:\n * The callback function should be specified with [hs.network.configuration:setCallback](#setCallback) and the keys to monitor should be specified with [hs.network.configuration:monitorKeys](#monitorKeys).","examples":[],"file":"extensions/network/libnetwork_configuration.m","lineno":"523","name":"start","notes":[" * The callback function should be specified with [hs.network.configuration:setCallback](#setCallback) and the keys to monitor should be specified with [hs.network.configuration:monitorKeys](#monitorKeys)."],"parameters":[" * None"],"returns":[" * the store object"],"signature":"hs.network.configuration:start() -> storeObject","stripped_doc":"","type":"Method"},"stop":{"def":"hs.network.configuration:stop() -> storeObject","desc":"Stops watching the store object for changes.","doc":"Stops watching the store object for changes.\n\nParameters:\n * None\n\nReturns:\n * the store object","examples":[],"file":"extensions/network/libnetwork_configuration.m","lineno":"550","name":"stop","notes":[],"parameters":[" * None"],"returns":[" * the store object"],"signature":"hs.network.configuration:stop() -> storeObject","stripped_doc":"","type":"Method"}}